/******************************************************************************/
/***         Generated by IBExpert 2012.02.21 7/20/2021 3:07:21 PM          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES NONE;

CREATE DATABASE 'C:\BinManager\db\T9.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 4096
DEFAULT CHARACTER SET NONE COLLATION NONE;



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE PROCEDURE ADJUSTSITESOH (
    IPBINTYPEID INTEGER = null,
    IPSITEID INTEGER = null,
    IPBINSFULL INTEGER = null,
    IPBINSEMPTY INTEGER = null)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE GET_ORDER (
    IPORDERID INTEGER = null)
RETURNS (
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPADDRID INTEGER,
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPBILLADDRID INTEGER,
    OPBILLADDRESS1 CHAR(30),
    OPBILLADDRESS2 CHAR(30),
    OPBILLTOWN CHAR(30),
    OPBILLSTATE CHAR(30),
    OPBILLPOSTCODE CHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_BINCOMPANIES
RETURNS (
    OPBINCOMPANYID INTEGER,
    OPCOMPANYNAME CHAR(50),
    OPCOMMENTS CHAR(200),
    OPEMAIL CHAR(50),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_BINMOVEMENTS (
    IPDATEFROM DATE,
    IPDATETO DATE)
RETURNS (
    OPCBINNO VARCHAR(10),
    OPCOUNT VARCHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CRMCONTACTS (
    IPCUSTID INTEGER DEFAULT NULL,
    IPFORDATE DATE DEFAULT NULL)
RETURNS (
    OPCONTACTID INTEGER,
    OPCONTACTTIME TIMESTAMP,
    OPCOMMENTS CHAR(200),
    OPFROMPERSON CHAR(50),
    OPTOPERSON CHAR(50),
    OPCOMMSMETHOD CHAR(30),
    OPMORECOMMENTSID INTEGER,
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CRMCUSTSFORSM (
    IPSALESMANID INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CRMNEWCUSTS (
    IPSALESMANID INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(50),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CRMNOORDERS (
    IPSALESMANID INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CUSTBYNAME (
    IPNAME CHAR(50),
    IPJUSTACTIVE INTEGER)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CUSTHISTBASIC (
    IPCUSTID INTEGER)
RETURNS (
    OPJOBDATE DATE,
    OPBINTYPEOUTID INTEGER,
    OPDRIVERID INTEGER,
    OPPAYMETHODID INTEGER,
    OPSITECONTACT CHAR(30),
    OPSITETELEPHONE CHAR(30),
    OPORDERID INTEGER,
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CUSTINVOICES (
    IPCUSTID INTEGER,
    IPJUSTOPEN INTEGER)
RETURNS (
    OPINVINVNO INTEGER,
    OPINVINVBATCHNO INTEGER,
    OPINVINVDATE DATE,
    OPINVDUEDATE DATE,
    OPINVBILLADDRID INTEGER,
    OPINVEXGST FLOAT,
    OPINVGST FLOAT,
    OPINVTOTAL FLOAT,
    OPINVCOMMENTS CHAR(200),
    OPINVPAIDINFULL INTEGER,
    OPINVPAIDSOFAR DECIMAL(18,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CUSTOMER (
    IPCUSTID INTEGER)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CUSTOMERS (
    IPWHATTYPE INTEGER,
    IPJUSTLATEST INTEGER)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CUSTOMERS2 (
    IPWHATTYPE INTEGER,
    IPJUSTLATEST INTEGER)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CUSTRGPICKUPS (
    IPCUSTID INTEGER,
    IPDELTYPE INTEGER)
RETURNS (
    OPRGSOID INTEGER,
    OPCUSTID INTEGER,
    OPDELIVERYDATE DATE,
    OPCONTACTNAME CHAR(30),
    OPCUSTREF CHAR(20),
    OPWEIGHT DECIMAL(15,2),
    OPPRICE DECIMAL(15,2),
    OPRGID INTEGER,
    OPRGOFFICENOTES CHAR(200),
    OPORDERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPPHONE CHAR(30),
    OPFAX CHAR(30),
    OPEMAIL CHAR(50),
    OPMYOBJOBNO CHAR(50),
    OPGROSSWEIGHT DECIMAL(8,2),
    OPTAREWEIGHT DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(8,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CUSTRGPUDATE (
    IPCUSTID INTEGER,
    IPDELTYPE INTEGER,
    IPFROMDATE DATE)
RETURNS (
    OPRGSOID INTEGER,
    OPCUSTID INTEGER,
    OPDELIVERYDATE DATE,
    OPCONTACTNAME CHAR(30),
    OPCUSTREF CHAR(20),
    OPWEIGHT DECIMAL(15,2),
    OPPRICE DECIMAL(15,2),
    OPRGID INTEGER,
    OPRGOFFICENOTES CHAR(200),
    OPORDERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPPHONE CHAR(30),
    OPFAX CHAR(30),
    OPEMAIL CHAR(50),
    OPMYOBJOBNO CHAR(50),
    OPGROSSWEIGHT DECIMAL(8,2),
    OPTAREWEIGHT DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(8,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CUSTSJOBSFROMTO (
    IPCUSTID INTEGER,
    IPSTARTDATE DATE DEFAULT NULL,
    IPENDDATE DATE DEFAULT NULL)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CUSTSOPENJOBS (
    IPCUSTID INTEGER)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CUSTSOPENTIPS (
    IPCUSTID INTEGER)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_CUSTSTIPS (
    IPCUSTID INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_DOCKET (
    IPDOCKETNO INTEGER DEFAULT NULL)
RETURNS (
    OPDOCKETID INTEGER,
    OPDOCKETNO INTEGER,
    OPJOBDATE DATE,
    OPDOBINTYPEID INTEGER,
    OPCOMMENTS CHAR(200),
    OPJOBTIME CHAR(50),
    OPCUSTORDERNO CHAR(50),
    OPTIPREF CHAR(50),
    OPBINNO CHAR(50),
    OPDOCKETTYPE INTEGER,
    OPJOBTYPE INTEGER,
    OPCONTACT CHAR(50),
    OPDKTCCTYPE INTEGER,
    OPDKTNAMEONCARD CHAR(50),
    OPCARDNO1 CHAR(4),
    OPCARDNO2 CHAR(4),
    OPCARDNO3 CHAR(4),
    OPCARDNO4 CHAR(4),
    OPDKTEXPMONTH INTEGER,
    OPDKTEXPYEAR INTEGER,
    OPDKTTIPAMOUNT DECIMAL(6,2),
    OPDKTTIPSITEID INTEGER,
    OPDKTEXGSTPRICE DECIMAL(7,2),
    OPDKTINCGSTPRICE DECIMAL(7,2),
    OPDKTDODRIVERID INTEGER,
    OPDKTPUDRIVERID INTEGER,
    OPDKTPAYCOMMENT CHAR(30),
    OPDKTACREF CHAR(30),
    OPDKTDD CHAR(40),
    OPDKTPUBINTYPEID INTEGER,
    OPDKTNEXTDKTID INTEGER,
    OPDKTPREVDKTID INTEGER,
    OPDKTPUDATE DATE,
    OPDKTDKTCOVERS INTEGER,
    OPDKTMADEFROM INTEGER,
    OPDKTCCPROCESSED INTEGER,
    OPDKTCOPUBINTYPEID INTEGER,
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_DOCKETS (
    IPFORDATE DATE)
RETURNS (
    OPDOCKETID INTEGER,
    OPDOCKETNO INTEGER,
    OPJOBDATE DATE,
    OPDOBINTYPEID INTEGER,
    OPCOMMENTS CHAR(200),
    OPJOBTIME CHAR(50),
    OPCUSTORDERNO CHAR(50),
    OPTIPREF CHAR(50),
    OPBINNO CHAR(50),
    OPDOCKETTYPE INTEGER,
    OPJOBTYPE INTEGER,
    OPCONTACT CHAR(50),
    OPDKTCCTYPE INTEGER,
    OPDKTNAMEONCARD CHAR(50),
    OPCARDNO1 CHAR(4),
    OPCARDNO2 CHAR(4),
    OPCARDNO3 CHAR(4),
    OPCARDNO4 CHAR(4),
    OPDKTEXPMONTH INTEGER,
    OPDKTEXPYEAR INTEGER,
    OPDKTTIPAMOUNT DECIMAL(6,2),
    OPDKTTIPSITEID INTEGER,
    OPDKTEXGSTPRICE DECIMAL(7,2),
    OPDKTINCGSTPRICE DECIMAL(7,2),
    OPDKTDODRIVERID INTEGER,
    OPDKTPUDRIVERID INTEGER,
    OPDKTPAYCOMMENT CHAR(30),
    OPDKTACREF CHAR(30),
    OPDKTDD CHAR(40),
    OPDKTPUBINTYPEID INTEGER,
    OPDKTNEXTDKTID INTEGER,
    OPDKTPREVDKTID INTEGER,
    OPDKTPUDATE DATE,
    OPDKTDKTCOVERS INTEGER,
    OPDKTMADEFROM INTEGER,
    OPDKTCCPROCESSED INTEGER,
    OPDKTCOPUBINTYPEID INTEGER,
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_DOCKETSADDR (
    IPFORCUSTID INTEGER)
RETURNS (
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_DOCKETSCUST (
    IPFORCUSTID INTEGER)
RETURNS (
    OPDOCKETID INTEGER,
    OPDOCKETNO INTEGER,
    OPJOBDATE DATE,
    OPDOBINTYPEID INTEGER,
    OPCOMMENTS CHAR(200),
    OPJOBTIME CHAR(50),
    OPCUSTORDERNO CHAR(50),
    OPTIPREF CHAR(50),
    OPBINNO CHAR(50),
    OPDOCKETTYPE INTEGER,
    OPJOBTYPE INTEGER,
    OPCONTACT CHAR(50),
    OPDKTCCTYPE INTEGER,
    OPDKTNAMEONCARD CHAR(50),
    OPCARDNO1 CHAR(4),
    OPCARDNO2 CHAR(4),
    OPCARDNO3 CHAR(4),
    OPCARDNO4 CHAR(4),
    OPDKTEXPMONTH INTEGER,
    OPDKTEXPYEAR INTEGER,
    OPDKTTIPAMOUNT DECIMAL(6,2),
    OPDKTTIPSITEID INTEGER,
    OPDKTEXGSTPRICE DECIMAL(7,2),
    OPDKTINCGSTPRICE DECIMAL(7,2),
    OPDKTDODRIVERID INTEGER,
    OPDKTPUDRIVERID INTEGER,
    OPDKTPAYCOMMENT CHAR(30),
    OPDKTACREF CHAR(30),
    OPDKTDD CHAR(40),
    OPDKTPUBINTYPEID INTEGER,
    OPDKTNEXTDKTID INTEGER,
    OPDKTPREVDKTID INTEGER,
    OPDKTPUDATE DATE,
    OPDKTDKTCOVERS INTEGER,
    OPDKTMADEFROM INTEGER,
    OPDKTCCPROCESSED INTEGER,
    OPDKTCOPUBINTYPEID INTEGER,
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_INVOICE (
    IPINVNO INTEGER DEFAULT NULL)
RETURNS (
    OPINVINVNO INTEGER,
    OPINVINVBATCHNO INTEGER,
    OPINVINVDATE DATE,
    OPINVDUEDATE DATE,
    OPINVBILLADDRID INTEGER,
    OPINVEXGST FLOAT,
    OPINVGST FLOAT,
    OPINVTOTAL FLOAT,
    OPINVCOMMENTS CHAR(200),
    OPINVPAIDINFULL INTEGER,
    OPINVPAIDSOFAR DECIMAL(18,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_INVOICES (
    IPINVBATCHNO INTEGER = null)
RETURNS (
    OPINVINVNO INTEGER,
    OPINVINVBATCHNO INTEGER,
    OPINVINVDATE DATE,
    OPINVDUEDATE DATE,
    OPINVBILLADDRID INTEGER,
    OPINVEXGST FLOAT,
    OPINVGST FLOAT,
    OPINVTOTAL FLOAT,
    OPINVCOMMENTS CHAR(200),
    OPINVPAIDINFULL INTEGER,
    OPINVPAIDSOFAR DECIMAL(18,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_JOB (
    IPJOBID INTEGER = 0)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPEMAILEDMESSAGE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_JOBPAYDETAILSONDATE (
    IPFORDATE DATE = null)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_JOBSFROMTO (
    IPSTARTDATE DATE = null,
    IPENDDATE DATE = null)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_JOBSFROMTODD (
    IPFROMDD INTEGER,
    IPTODD INTEGER)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_JOBSONDATE (
    IPDATE DATE)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(28),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPFEETOT DECIMAL(9,2),
    OPSAFETYCHECKTIME TIMESTAMP,
    OPEMAILEDMESSAGE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_JOBSONDATEFORDRIVER (
    IPDATE DATE,
    IPDRIVERID INTEGER)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPFEETOT DECIMAL(9,2),
    OPSAFETYCHECKTIME TIMESTAMP)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_OPENORDERANDJOBS
RETURNS (
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_ORDERANDJOBS (
    IPORDERID INTEGER = null)
RETURNS (
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPSAFETYCHECKTIME TIMESTAMP)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_ORDERJOBS (
    IPORDERID INTEGER DEFAULT NULL)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_ORDERSONWKNO (
    IPWKNO INTEGER DEFAULT NULL)
RETURNS (
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_PAYDETAILS (
    IPPAYDETID INTEGER DEFAULT NULL)
RETURNS (
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_PINVOICE (
    IPPINVID INTEGER DEFAULT NULL)
RETURNS (
    OPPINVID INTEGER,
    OPINVINVNO INTEGER,
    OPINVPINVBATCHNO INTEGER,
    OPINVINVDATE DATE,
    OPINVDUEDATE DATE,
    OPINVEXGST FLOAT,
    OPINVGST FLOAT,
    OPINVTOTAL FLOAT,
    OPINVCOMMENTS CHAR(200),
    OPINVPAIDINFULL INTEGER,
    OPINVPAIDSOFAR DECIMAL(18,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_RGORDER (
    IPRGID INTEGER DEFAULT NULL)
RETURNS (
    OPRGSOID INTEGER,
    OPRGSOORDERNO INTEGER,
    OPRGSOTONS DECIMAL(8,2),
    OPRGSODELIVERYTYPE SMALLINT,
    OPRGSOINCPRICE DECIMAL(8,2),
    OPRGSODRIVERNOTES CHAR(200),
    OPRGSOCUSTREF CHAR(20),
    OPRGSOCONTACTNAME CHAR(30),
    OPRGSOCONTACTPHONE CHAR(30),
    OPRGSODELIVERYDATE TIMESTAMP,
    OPRGSODELIVERYCTIME CHAR(10),
    OPRGSODELIVERYNTIME TIMESTAMP,
    OPRGRGID INTEGER,
    OPRGDESCRIPTION CHAR(40),
    OPRGDELPRICE DECIMAL(8,2),
    OPRGPUPRICE DECIMAL(8,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_RGORDERBYINV (
    IPINVNO INTEGER DEFAULT NULL,
    IPINVLINENO INTEGER DEFAULT NULL)
RETURNS (
    OPRGSOID INTEGER,
    OPCUSTID INTEGER,
    OPDELIVERYDATE DATE,
    OPCONTACTNAME CHAR(30),
    OPCUSTREF CHAR(20),
    OPWEIGHT DECIMAL(15,2),
    OPPRICE DECIMAL(15,2),
    OPRGID INTEGER,
    OPRGOFFICENOTES CHAR(200),
    OPORDERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPPHONE CHAR(30),
    OPFAX CHAR(30),
    OPEMAIL CHAR(50),
    OPMYOBJOBNO CHAR(50),
    OPGROSSWEIGHT DECIMAL(8,2),
    OPTAREWEIGHT DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(8,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_RGORDERFORDATE (
    IPFORDATE DATE DEFAULT NULL,
    IPDELIVERYTYPE INTEGER DEFAULT NULL)
RETURNS (
    OPRGSOID INTEGER,
    OPCUSTID INTEGER,
    OPDELIVERYDATE DATE,
    OPCONTACTNAME CHAR(30),
    OPCUSTREF CHAR(20),
    OPWEIGHT DECIMAL(15,2),
    OPPRICE DECIMAL(15,2),
    OPRGID INTEGER,
    OPRGOFFICENOTES CHAR(200),
    OPORDERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPPHONE CHAR(30),
    OPFAX CHAR(30),
    OPEMAIL CHAR(50),
    OPMYOBJOBNO CHAR(50),
    OPGROSSWEIGHT DECIMAL(8,2),
    OPTAREWEIGHT DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(8,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_RGPICKUPS (
    IPDELTYPE INTEGER)
RETURNS (
    OPRGSOID INTEGER,
    OPCUSTID INTEGER,
    OPDELIVERYDATE DATE,
    OPCONTACTNAME CHAR(30),
    OPCUSTREF CHAR(20),
    OPWEIGHT DECIMAL(15,2),
    OPPRICE DECIMAL(15,2),
    OPRGID INTEGER,
    OPRGOFFICENOTES CHAR(200),
    OPORDERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPPHONE CHAR(30),
    OPFAX CHAR(30),
    OPEMAIL CHAR(50),
    OPMYOBJOBNO CHAR(50),
    OPGROSSWEIGHT DECIMAL(8,2),
    OPTAREWEIGHT DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(8,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_SEARCHFOR (
    IPCUSTREF CHAR(100),
    IPDESPATCH CHAR(30),
    IPINVNO INTEGER,
    IPCOMMENTS CHAR(30),
    IPADDRESS CHAR(30),
    IPCONTACT CHAR(30),
    IPFROMDATE DATE,
    IPEPA CHAR(30),
    IPWTD CHAR(30),
    IPBINNO CHAR(8),
    IPPHONE CHAR(10),
    IPCUSTID INTEGER,
    IPMYOBJOBNO CHAR(20))
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_SWPREVORDERS (
    IPCUSTID INTEGER,
    IPDEPOTNO CHAR(12))
RETURNS (
    OPORDERID INTEGER,
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_TIP (
    IPTIPID INTEGER)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_TIPBYINV (
    IPINVNO INTEGER,
    IPINVLINENO INTEGER)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2),
    OPPAYMETHODID INTEGER,
    OPISPAID VARCHAR(255),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_TIPS (
    IPDDATE DATE,
    IPTIPSITEID INTEGER)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2),
    OPPAYMETHODID INTEGER,
    OPISPAID VARCHAR(255),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_TIPSFROMTO (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE MYGET_TIPSNOTINVOICED (
    IPTIPSITEID INTEGER,
    IPINVPERIOD INTEGER)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE POS (
    SUBSTR VARCHAR(100),
    STR VARCHAR(100))
RETURNS (
    POS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPADD_DRIVER (
    IPSHORTNAME CHAR(8) DEFAULT NULL,
    IPFULLNAME CHAR(25) DEFAULT NULL,
    IPSTARTDATE DATE DEFAULT NULL,
    IPFINISHDATE DATE DEFAULT NULL)
RETURNS (
    NEWDRIVERID SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPCALC_SITESOH
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_BINMV (
    IPBINMVID INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_BOOKINVNO (
    IPINVNO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_CLEARJOBFEES (
    IPJOBID INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_CONTRACTDRIVERPRICE (
    IPDRIVERID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_COUNCILPDFS (
    IPCOUNCILID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_COUNCILSUBURBS (
    IPCOUNCILID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_CREDITNOTE (
    IPCREDITNOTEID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_CUSTOMER (
    IPCUSTID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_CUSTSITEPRICES (
    IPCUSTSITEID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_DRIVERRECLINES (
    IPBATCHID INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_HOLIDAY (
    IPDAYOFF DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_INVBATCH (
    IPINVBATCHID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_INVLINE (
    IPINVNO INTEGER,
    IPINVLINENO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_INVOICE (
    IPINVNO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_JOB (
    IPJOBID INTEGER = null)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_JOBBINS (
    IPJOBID INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_JOBRMBREAKDOWN (
    IPJOBID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_JOBSWCODE (
    IPJOBSWCODEID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_ORDER (
    IPORDERID INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_PINVLINE (
    IPPINVID INTEGER,
    IPINVLINENO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_PINVOICE (
    IPPINVID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_RGORDER (
    IPRGSOID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_SITEFOREMAN (
    IPCUSTSITEID INTEGER,
    IPFOREMANID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_SMSTEMPLATE (
    IPID INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_STAKE_BINLINES (
    IPDATE DATE DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_TIP (
    IPTIPID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPDEL_TIPFEES (
    IPTIPID INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPGET_ADDRCOORDS (
    IPADDRID INTEGER)
RETURNS (
    OPPAGENUMBER INTEGER,
    OPMAPREF CHAR(5))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_ADHOCCHARGES (
    IPADHOCCHARGEID INTEGER,
    IPINVOICEABLE INTEGER,
    IPJOBID INTEGER,
    IPINVNO INTEGER,
    IPINVLINENO INTEGER,
    IPPAIDDATE DATE)
RETURNS (
    OPADHOCCHARGEID INTEGER,
    OPCUSTID INTEGER,
    OPCUSTNAME CHAR(50),
    OPCUSTINVPERIOD INTEGER,
    OPJOBID INTEGER,
    OPFEEID INTEGER,
    OPDESCRIPTION CHAR(50),
    OPAMOUNT DECIMAL(8,2),
    OPINCEX INTEGER,
    OPINVNO INTEGER,
    OPINVLINENO INTEGER,
    OPINVOICEABLE INTEGER,
    OPPAYMENTRECEIVED DATE,
    OPPAYMETHODID INTEGER,
    OPCOMMENT VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_AUDITLOG (
    IPFROM TIMESTAMP,
    IPTO TIMESTAMP)
RETURNS (
    OPAMENDTIME TIMESTAMP,
    OPDETAILS CHAR(500),
    OPUSERID INTEGER,
    OPOBJECTID INTEGER,
    OPOPERATION VARCHAR(30),
    OPENTITYID VARCHAR(30))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_AVAIL_POS_FOR_CUST_ADDR (
    IP_CUSTID INTEGER,
    IP_ADDRID INTEGER)
RETURNS (
    OP_PO VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_AVAILCREDIT (
    IPCUSTID INTEGER,
    IPGSTPERCENT DECIMAL(15,2))
RETURNS (
    OPCREDITLIMIT DECIMAL(18,2),
    OPOPENINVOICES DECIMAL(18,2),
    OPOPENJOBS DECIMAL(18,2),
    OPOPENRGPUS DECIMAL(18,2),
    OPOPENTIPS DECIMAL(18,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_BCPRICES (
    IPBINCOMPANYID INTEGER)
RETURNS (
    OPBINCOMPANYID INTEGER,
    OPBINTYPEID INTEGER,
    OPBINFORMATID INTEGER,
    OPPRICE DECIMAL(7,2),
    OPINCEX INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_BINFORMAT (
    IPBINFORMATID INTEGER DEFAULT NULL)
RETURNS (
    OPBINFORMATID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPDEFAULTFORMAT SMALLINT,
    OPVERSIONNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_BINFORMATS
RETURNS (
    OPBINFORMATID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPDEFAULTFORMAT SMALLINT,
    OPVERSIONNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_BINMVS (
    IPMVDATE DATE DEFAULT NULL,
    IPTODATE DATE DEFAULT NULL)
RETURNS (
    OPMOVEID INTEGER,
    OPMVDATE DATE,
    OPBINTYPEID INTEGER,
    OPFROMSITEID INTEGER,
    OPOUTEMPTY INTEGER,
    OPOUTFULL INTEGER,
    OPTOSITEID INTEGER,
    OPINEMPTY INTEGER,
    OPINFULL INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_BINNOUSE (
    IPBINNO CHAR(8) DEFAULT NULL)
RETURNS (
    OPDIRECTION SMALLINT,
    OPJOBID INTEGER,
    OPJOBDATE DATE,
    OPDRIVERID INTEGER,
    OPJOBTYPE INTEGER,
    OPCUSTID INTEGER,
    OPCUSTNAME CHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_BINSUSED (
    IPBINTYPEID INTEGER = null,
    IPSTARTDATE DATE = null,
    IPENDDATE DATE = null,
    IPINCLUDEBOOKEDIN INTEGER = null)
RETURNS (
    OPBINSIN INTEGER,
    OPBINSOUT INTEGER,
    OPDATE DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_BINTYPE (
    IPBINTYPEID INTEGER)
RETURNS (
    OPBINTYPEID INTEGER,
    OPBINTYPE CHAR(3),
    OPDESCRIPTION CHAR(15),
    OPFULLDESC CHAR(30),
    OPPRICE DECIMAL(18,2),
    OPACCOUNTNO CHAR(25),
    OPINCEX INTEGER,
    OPITEMCODE CHAR(12),
    OPSORTORDER INTEGER,
    OPCUBICMETRES DECIMAL(6,1),
    OPVERSIONNO INTEGER,
    OPASBESTOSITEM CHAR(25),
    OPCOMPANY CHAR(10),
    OPVALIDFORMATS CHAR(200),
    OPSITEBINITEMCODE CHAR(24),
    OPSITEBINACCOUNTNO CHAR(24),
    OPADVERTISEDCUBICMETRES INTEGER,
    OPCOMMENTS1 CHAR(50),
    OPCOMMENTS2 CHAR(50),
    OPFLAGS INTEGER,
    OPPINCOLOUR VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_BINTYPES
RETURNS (
    OPBINTYPEID INTEGER,
    OPBINTYPE CHAR(8),
    OPDESCRIPTION CHAR(20),
    OPFULLDESC CHAR(30),
    OPPRICE DECIMAL(18,2),
    OPACCOUNTNO CHAR(25),
    OPINCEX INTEGER,
    OPITEMCODE CHAR(12),
    OPSORTORDER INTEGER,
    OPCUBICMETRES DECIMAL(6,1),
    OPVERSIONNO INTEGER,
    OPASBESTOSITEM CHAR(25),
    OPCOMPANY CHAR(10),
    OPVALIDFORMATS CHAR(200),
    OPSITEBINITEMCODE CHAR(24),
    OPSITEBINACCOUNTNO CHAR(24),
    OPADVERTISEDCUBICMETRES INTEGER,
    OPCOMMENTS1 CHAR(50),
    OPCOMMENTS2 CHAR(50),
    OPFLAGS INTEGER,
    OPPINCOLOUR VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_BOOKINVNOS
RETURNS (
    OPINVNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CALLCOUNTS (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPDDATE DATE,
    OPUSERID INTEGER,
    OPNEWORDERS INTEGER,
    OPCHANGEOVERS INTEGER,
    OPPICKUPS INTEGER,
    OPMISSEDORDERS INTEGER,
    OPGENERALENQUIRIES INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CANDELETECUST (
    IPCUSTID INTEGER)
RETURNS (
    OPCANDELETE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CARDTYPES
RETURNS (
    OPCARDTYPEID INTEGER,
    OPCARDNAME CHAR(8),
    OPSURCHARGE DECIMAL(5,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CDRPT (
    IPDRIVERID INTEGER,
    IPFROMDATE DATE = null,
    IPTODATE DATE = null)
RETURNS (
    OPDRIVERID INTEGER,
    OPBINTYPEIDOUT INTEGER,
    OPBINSOUT INTEGER,
    OPBINTYPEIDIN INTEGER,
    OPBINSIN INTEGER,
    OPBINTYPEREL INTEGER,
    OPBINSREL INTEGER,
    OPJOBTYPE INTEGER,
    OPJOBDATE DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CHANGEDETAILS (
    IPENTITYID INTEGER,
    IPOBJECTID INTEGER)
RETURNS (
    OPAMDTIME TIMESTAMP,
    OPDETAILS CHAR(500),
    OPUSERID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CONTRACTDRIVERPRICES (
    IPDRIVERID INTEGER)
RETURNS (
    OPDRIVERID INTEGER,
    OPJOBTYPE INTEGER,
    OPBINTYPEID INTEGER,
    OPINCPRICE DECIMAL(15,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_COUNCIL (
    IPCOUNCILID INTEGER)
RETURNS (
    OPCOUNCILID INTEGER,
    OPNAME CHAR(40),
    OPCOMMENT CHAR(200))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_COUNCILPDFS (
    IPCOUNCILID INTEGER)
RETURNS (
    OPFILENAME CHAR(256),
    OPDESCRIPTION CHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_COUNCILS
RETURNS (
    OPCOUNCILID INTEGER,
    OPNAME CHAR(40),
    OPCOMMENT CHAR(200))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_COUNCILSFORSUB (
    IPSUBURB CHAR(40),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10))
RETURNS (
    OPCOUNCILID INTEGER,
    OPNAME CHAR(40),
    OPCOMMENT CHAR(200))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_COUNCILSUBURBS (
    IPCOUNCILID INTEGER)
RETURNS (
    OPSUBURBNAME CHAR(40),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CREDITLINES (
    IPCREDITNOTEID INTEGER)
RETURNS (
    OPCREDITLINEID INTEGER,
    OPCREDITNOTEID INTEGER,
    OPLINETYPE INTEGER,
    OPOBJECTID INTEGER,
    OPOBJECTID2 INTEGER,
    OPEXAMOUNT DECIMAL(15,2),
    OPENTEREDASINC INTEGER,
    OPINVLINENO INTEGER,
    OPJOBDATE DATE,
    OPOBJECTID3 INTEGER,
    OPFLAGS INTEGER,
    OPDESCRIPTION VARCHAR(200))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CREDITLINESFROMTO (
    IPLINETYPE INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPCREDITLINEID INTEGER,
    OPCREDITNOTEID INTEGER,
    OPLINETYPE INTEGER,
    OPOBJECTID INTEGER,
    OPOBJECTID2 INTEGER,
    OPEXAMOUNT DECIMAL(15,2),
    OPENTEREDASINC INTEGER,
    OPINVLINENO INTEGER,
    OPJOBDATE DATE,
    OPOBJECTID3 INTEGER,
    OPFLAGS INTEGER,
    OPDESCRIPTION VARCHAR(200))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CREDITNOTE (
    IPCNID INTEGER)
RETURNS (
    OPCREDITNOTEID INTEGER,
    OPCREDITNOTENO INTEGER,
    OPCUSTID INTEGER,
    OPUSERID INTEGER,
    OPTIMECREATED TIMESTAMP,
    OPCREDITDATE DATE,
    OPFLAGS INTEGER,
    OPCOMMENTS CHAR(500),
    OPAMOUNT DECIMAL(15,2),
    OPINVBATCHNO INTEGER,
    OPINVNO CHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CREDITNOTES (
    IPCUSTID INTEGER)
RETURNS (
    OPCREDITNOTEID INTEGER,
    OPCREDITNOTENO INTEGER,
    OPCUSTID INTEGER,
    OPUSERID INTEGER,
    OPTIMECREATED TIMESTAMP,
    OPCREDITDATE DATE,
    OPFLAGS INTEGER,
    OPCOMMENTS CHAR(500),
    OPAMOUNT DECIMAL(15,2),
    OPINVBATCHNO INTEGER,
    OPINVNO CHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CREDITNOTESFORBATCH (
    IPBATCHID INTEGER)
RETURNS (
    OPCREDITNOTEID INTEGER,
    OPCREDITNOTENO INTEGER,
    OPCUSTID INTEGER,
    OPUSERID INTEGER,
    OPTIMECREATED TIMESTAMP,
    OPCREDITDATE DATE,
    OPFLAGS INTEGER,
    OPCOMMENTS CHAR(500),
    OPAMOUNT DECIMAL(15,2),
    OPINVBATCHNO INTEGER,
    OPINVNO CHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CREDITNOTESFORINVNO (
    IPINVNO CHAR(10))
RETURNS (
    OPCREDITNOTEID INTEGER,
    OPCREDITNOTENO INTEGER,
    OPCUSTID INTEGER,
    OPUSERID INTEGER,
    OPTIMECREATED TIMESTAMP,
    OPCREDITDATE DATE,
    OPFLAGS INTEGER,
    OPCOMMENTS CHAR(500),
    OPAMOUNT DECIMAL(15,2),
    OPINVBATCHNO INTEGER,
    OPINVNO CHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CREDITNOTESFROMTO (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPCREDITNOTEID INTEGER,
    OPCREDITNOTENO INTEGER,
    OPCUSTID INTEGER,
    OPUSERID INTEGER,
    OPTIMECREATED TIMESTAMP,
    OPCREDITDATE DATE,
    OPFLAGS INTEGER,
    OPCOMMENTS CHAR(500),
    OPAMOUNT DECIMAL(15,2),
    OPINVBATCHNO INTEGER,
    OPINVNO CHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CRMCOMMSMETHOD
RETURNS (
    OPCOMMSMETHODID INTEGER,
    OPDESCRIPTION CHAR(30))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CURRENTBINLEVELS
RETURNS (
    OPBINTYPEID INTEGER,
    OPSITEID INTEGER,
    OPBINCOUNT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CUSTGROUPS (
    IPCUSTID INTEGER,
    IPGROUPID INTEGER)
RETURNS (
    OPCUSTID INTEGER,
    OPGROUPID INTEGER,
    OPINFO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CUSTHIST (
    IPCUSTID INTEGER = null,
    IPSTARTDATE DATE = null,
    IPMAXROWS INTEGER = null)
RETURNS (
    OPORDERID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CUSTOMERSITES (
    IPCUSTID INTEGER,
    IPJUSTOPEN INTEGER)
RETURNS (
    OPCUSTOMERSITEID INTEGER,
    OPDESCRIPTION CHAR(50),
    OPCONTACT CHAR(50),
    OPPHONE CHAR(30),
    OPCUSTID INTEGER,
    OPISACTIVE SMALLINT,
    OPCUSTREF CHAR(100),
    OPORDERID INTEGER,
    OPCOMMENTS CHAR(200),
    OPOFFICENOTES CHAR(200),
    OPWHENTOINVOICE INTEGER,
    OPDEPOTNO CHAR(12),
    OPEMAIL CHAR(50),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CUSTOPENORDERS (
    IPCUSTID INTEGER,
    IPMAXSITES INTEGER)
RETURNS (
    OPORDERID INTEGER,
    OPCUSTID INTEGER,
    OPCUSTNAME CHAR(50),
    OPCONTACT CHAR(30),
    OPCOMPLETE INTEGER,
    OPINVTYPE INTEGER,
    OPBYBINNO INTEGER,
    DELADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPDELADDRESS1 CHAR(30),
    OPDELADDRESS2 CHAR(30),
    OPDELTOWN CHAR(30),
    OPDELSTATE CHAR(30),
    OPDELPOSTCODE CHAR(10),
    OPDELGPSLAT NUMERIC(18,12),
    OPDELGPSLONG NUMERIC(18,12),
    OPBILLADDRID INTEGER,
    OPBILLADDRESS1 CHAR(30),
    OPBILLADDRESS2 CHAR(30),
    OPBILLTOWN CHAR(30),
    OPBILLSTATE CHAR(30),
    OPBILLPOSTCODE CHAR(10),
    OPBILLGPSLAT NUMERIC(18,12),
    OPBILLGPSLONG NUMERIC(18,12),
    OPVERSIONNO INTEGER,
    OPCUSTTELNO VARCHAR(14),
    OPCUSTTYPE INTEGER,
    OPREFERRALID INTEGER,
    OPFIRSTJOB DATE,
    OPUSERID INTEGER,
    OPCUSTSITEID INTEGER,
    OPJOBNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CUSTRGPRICES (
    IPCUSTID INTEGER)
RETURNS (
    OPRGID INTEGER,
    OPDELIVERED DECIMAL(9,2),
    OPPICKUP DECIMAL(9,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CUSTS1STJOBID (
    IPCUSTID INTEGER,
    IPFROMDATE DATE)
RETURNS (
    OPJOBID INTEGER,
    OPJOBDATE DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_CUSTSITEPRICES (
    IPCUSTSITEID INTEGER DEFAULT NULL)
RETURNS (
    OPBINTYPEID INTEGER,
    OPPRICE DECIMAL(10,2),
    OPINCEX SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_DEPTS
RETURNS (
    OPDEPTID INTEGER,
    OPDEPTDESC CHAR(40),
    OPPERMISSIONS BIGINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_DRIVER (
    IPDRIVERID SMALLINT)
RETURNS (
    OPDRIVERID SMALLINT,
    OPSHORTNAME CHAR(8),
    OPFULLNAME CHAR(25),
    OPSTARTDATE DATE,
    OPFINISHDATE DATE,
    OPVERSIONNO INTEGER,
    OPMOBILE CHAR(20),
    OPJOBTYPEPRICES CHAR(150),
    OPCOPERCENT DECIMAL(6,2),
    OPADDJOBPERCENT DECIMAL(6,2),
    OPFLAGS INTEGER,
    OPLOGINNAME CHAR(50),
    OPPINCOLOUR VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_DRIVERANAL (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPDRIVERID INTEGER,
    OPDATE DATE,
    OPBATCHID INTEGER,
    OPSTARTKMS INTEGER,
    OPENDKMS INTEGER,
    OPTRUCKID INTEGER,
    OPSTARTTIME TIMESTAMP,
    OPENDTIME TIMESTAMP,
    OPFUELCOST DECIMAL(9,0),
    OPDROPCOUNT INTEGER,
    OPDROPM3 DECIMAL(9,0),
    OPCOCOUNT INTEGER,
    OPCOM3 DECIMAL(9,0),
    OPPUCOUNT INTEGER,
    OPPUM3 DECIMAL(9,0),
    OPRELCOUNT INTEGER,
    OPRELM3 DECIMAL(9,0),
    OPNUMTOLLS INTEGER,
    OPLOSTTIME DECIMAL(9,0),
    OPREPAIRS DECIMAL(9,0),
    OPCHEQUEAMT DECIMAL(9,0),
    OPCASHAMT DECIMAL(9,0))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_DRIVERLOGWEB (
    IPDDATE DATE,
    IPDRIVERID INTEGER)
RETURNS (
    OPSTARTTIME TIMESTAMP,
    OPENDTIME TIMESTAMP,
    OPSTARTKMS INTEGER,
    OPENDKMS INTEGER,
    OPFUELCOST DECIMAL(8,2),
    OPFUELLITRES DECIMAL(8,2),
    OPREGO CHAR(15))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_DRIVERREC (
    IPDDATE DATE,
    IPDRIVERID INTEGER)
RETURNS (
    OPBATCHID INTEGER,
    OPJOBID INTEGER,
    OPDD CHAR(12),
    OPPAYMID INTEGER,
    OPCHEQALLOC DECIMAL(18,2),
    OPCASHALLOC DECIMAL(18,2),
    OPDOBINNOS CHAR(30),
    OPPUBINNOS CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPPUVOLUME DECIMAL(5,2),
    OPSITEID INTEGER,
    OPPRICEAREAID INTEGER,
    OPSTARTTIME TIMESTAMP,
    OPENDTIME TIMESTAMP,
    OPTRUCKID INTEGER,
    OPSTARTKMS INTEGER,
    OPENDKMS INTEGER,
    OPFUELCOST DECIMAL(8,2),
    OPNUMTOLLS INTEGER,
    OPLOSTTIME DECIMAL(15,2),
    OPREPAIRS DECIMAL(15,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_DRIVERS
RETURNS (
    OPDRIVERID SMALLINT,
    OPSHORTNAME CHAR(8),
    OPFULLNAME CHAR(25),
    OPSTARTDATE DATE,
    OPFINISHDATE DATE,
    OPVERSIONNO INTEGER,
    OPMOBILE CHAR(20),
    OPJOBTYPEPRICES CHAR(150),
    OPCOPERCENT DECIMAL(6,2),
    OPADDJOBPERCENT DECIMAL(6,2),
    OPFLAGS INTEGER,
    OPLOGINNAME CHAR(50),
    OPPINCOLOUR VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_EVENTTIME (
    IPEVENT CHAR(20) DEFAULT NULL)
RETURNS (
    OPTIMESTAMP TIMESTAMP,
    OPSERVERTIME TIMESTAMP)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_EXTCOMMENTS (
    IPCOMMENTTYPE INTEGER,
    IPID INTEGER)
RETURNS (
    OPCOMMENTS CHAR(200))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_FEE (
    IPFEEID INTEGER DEFAULT NULL)
RETURNS (
    OPFEEID INTEGER,
    OPDESCRIPTION CHAR(20),
    OPAMOUNT DECIMAL(12,2),
    OPINCEX SMALLINT,
    OPACCOUNTNO CHAR(12),
    OPITEMCODE CHAR(12),
    OPVERSIONNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_FEES
RETURNS (
    OPFEEID INTEGER,
    OPDESCRIPTION CHAR(20),
    OPAMOUNT DECIMAL(12,2),
    OPINCEX SMALLINT,
    OPACCOUNTNO CHAR(12),
    OPITEMCODE CHAR(12),
    OPVERSIONNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_FTBINSINOUT (
    IPSTARTDATE DATE DEFAULT NULL,
    IPENDDATE DATE DEFAULT NULL)
RETURNS (
    OPBINTYPEID INTEGER,
    OPBINSOUT INTEGER,
    OPBINSIN INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_FTBINSINOUT_DAILY (
    IPSTARTDATE DATE DEFAULT NULL,
    IPENDDATE DATE DEFAULT NULL)
RETURNS (
    OPBINTYPEID INTEGER,
    OPBINSOUT INTEGER,
    OPBINSIN INTEGER,
    OPDATE DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_HOLIDAYS
RETURNS (
    DAYOFF DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_HOURSWORKED (
    IPJOBID INTEGER)
RETURNS (
    OPHOURSWORKEDID INTEGER,
    OPJOBID INTEGER,
    OPWORKDATE DATE,
    OPSTARTTIME TIME,
    OPENDTIME TIME,
    OPNUMBEROFMEN INTEGER,
    OPJOBTITLEID INTEGER,
    OPFLAGS INTEGER,
    OPRATE DECIMAL(8,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_INCLUDEDWEIGHTS (
    IPPRICEAREAID INTEGER)
RETURNS (
    OPPRICEAREAID INTEGER,
    OPBINTYPEID INTEGER,
    OPINCLTONS DECIMAL(6,2),
    OPINCLVOLUME DECIMAL(6,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_INVBATCH (
    IPINVBATCH INTEGER DEFAULT NULL)
RETURNS (
    OPINVBATCHNO INTEGER,
    OPCREATEDDATE TIMESTAMP,
    OPEXPORTEDDATE TIMESTAMP,
    OPEXPORTEDFILENAME CHAR(50),
    OPCOUNT SMALLINT,
    OPINVPERIOD INTEGER,
    OPVERSIONNO INTEGER,
    OPREFID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_INVBATCHS (
    IPWHICHBATCHES INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPINVBATCHNO INTEGER,
    OPCREATEDDATE TIMESTAMP,
    OPEXPORTEDDATE TIMESTAMP,
    OPEXPORTEDFILENAME CHAR(50),
    OPCOUNT SMALLINT,
    OPINVPERIOD INTEGER,
    OPVERSIONNO INTEGER,
    OPREFID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_INVLINECOMMENT (
    IPJOBID INTEGER)
RETURNS (
    OPCOMMENT CHAR(201))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_INVLINES (
    IPINVNO INTEGER = null)
RETURNS (
    OPINVNO INTEGER,
    OPINVLINENO INTEGER,
    OPEXGSTVALUE DECIMAL(18,2),
    OPGST DECIMAL(18,2),
    OPTOTALVALUE DECIMAL(18,2),
    OPLINETYPE INTEGER,
    OPITEMCODE CHAR(12),
    OPCOMMENTS CHAR(201))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_INVOICE (
    IPINVNO INTEGER DEFAULT NULL)
RETURNS (
    OPINVNO INTEGER,
    OPINVBATCHNO INTEGER,
    OPCUSTID INTEGER,
    OPCUSTNAME CHAR(50),
    OPINVDATE DATE,
    OPDUEDATE DATE,
    OPBILLADDRID INTEGER,
    OPEXGST DECIMAL(18,2),
    OPGST DECIMAL(18,2),
    OPTOTAL DECIMAL(18,2),
    OPINVCOMMENTS CHAR(200))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_INVSINBATCH (
    IPINVBATCHNO INTEGER DEFAULT NULL)
RETURNS (
    OPINVOICENO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_INVSUMM (
    IPFROMDATE DATE DEFAULT NULL,
    IPTODATE DATE DEFAULT NULL)
RETURNS (
    OPCID CHAR(12),
    OPTOTALVALUE DECIMAL(18,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_JOB (
    IPJOBID INTEGER)
RETURNS (
    OPORDERID INTEGER,
    OPJOBID INTEGER,
    OPJOBTYPE INTEGER,
    OPJOBSTATUS INTEGER,
    OPBINTYPEID_OUT INTEGER,
    OPBINS_OUT INTEGER,
    OPBINTYPEID_IN INTEGER,
    OPBINS_IN INTEGER,
    OPDRIVERID INTEGER,
    OPDRIVERSHORT CHAR(8),
    OPJOBTIME CHAR(10),
    OPCONTACT CHAR(30),
    OPCOMMENTS CHAR(200),
    OPNJOBTIME TIMESTAMP,
    OPPRICEAREAID INTEGER,
    OPCUSTREF CHAR(100),
    OPASBESTOS INTEGER,
    OPORDERDAYSEQNO INTEGER,
    OPDTENTERED TIMESTAMP,
    OPDTLASTAMENDED TIMESTAMP,
    OPVERSIONNO INTEGER,
    OPJOBDATE DATE,
    OPDRIVERFULL CHAR(25),
    OPPAYMETHODID INTEGER,
    OPPAYMETHODDESC CHAR(6),
    OPPRICE DECIMAL(18,2),
    OPJOBDETAILS SMALLINT,
    OPINVNO INTEGER,
    OPINVLINENO INTEGER,
    OPINVOICEABLE SMALLINT,
    OPINCEX INTEGER,
    OPDESPDOCK CHAR(12),
    OPVWJOBSEQNO INTEGER,
    OPBTRELOC INTEGER,
    OPRELOCCOUNT INTEGER,
    OPINVRELOCJOB INTEGER,
    OPPAYMREF CHAR(20),
    OPISPAID SMALLINT,
    OPMATERIALID INTEGER,
    OPUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL SMALLINT,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_JOB2 (
    IPJOBID INTEGER)
RETURNS (
    OPJOBID INTEGER,
    OPPINVNO INTEGER,
    OPPUINVLINENO INTEGER,
    OPPUINVOICEABLE INTEGER,
    OPSITEID INTEGER,
    OPINVOICEDWEIGHT DECIMAL(5,3),
    OPINVOICEDPRICE DECIMAL(5,3),
    OPIDESPATCHDOCKETNO INTEGER,
    OPPRICEAREAID INTEGER,
    OPSIGNEDBY CHAR(50),
    OPTIMESIGNED TIMESTAMP,
    OPPHOTOLAT DECIMAL(11,6),
    OPPHOTOLONG DECIMAL(11,6),
    OPPHOTOTIME TIMESTAMP)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_JOBBINNOS (
    IPJOBID INTEGER DEFAULT NULL,
    IPDIRECTION INTEGER DEFAULT NULL)
RETURNS (
    OPBINNO CHAR(8))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_JOBDETAILS (
    IPJOBID INTEGER DEFAULT NULL)
RETURNS (
    OPDESPATCHDOCKET CHAR(12),
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPFROMSITEID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_JOBFEEBYINV (
    IPINVNO INTEGER DEFAULT NULL,
    IPINVLINENO INTEGER DEFAULT NULL)
RETURNS (
    OPFEEID INTEGER,
    OPAMOUNT DECIMAL(12,2),
    OPINCEX SMALLINT,
    OPINVLINENO INTEGER,
    OPINVNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_JOBFEES (
    IPJOBID INTEGER DEFAULT NULL)
RETURNS (
    OPFEEID INTEGER,
    OPAMOUNT DECIMAL(12,2),
    OPINCEX SMALLINT,
    OPINVLINENO INTEGER,
    OPINVNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_JOBIDBYINV (
    IPINVNO INTEGER = null,
    IPINVLINENO INTEGER = null)
RETURNS (
    OPJOBID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_JOBIDBYINV2 (
    IPINVNO INTEGER,
    IPINVLINENO INTEGER)
RETURNS (
    OPJOBID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_JOBRMBREAKDOWN (
    IPJOBID INTEGER)
RETURNS (
    OPJOBID INTEGER,
    OPRGID INTEGER,
    OPRGDESCRIPTION CHAR(40),
    OPPERCENT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_JOBSWCODES (
    IPJOBID INTEGER)
RETURNS (
    OPJOBSWCODEID INTEGER,
    OPJOBID INTEGER,
    OPSWCODESID INTEGER,
    OPUNITS DECIMAL(15,2),
    OPFLAGS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_JOBTIPDOCKETS (
    IPJOBID INTEGER)
RETURNS (
    OPTIPDOCKETID INTEGER,
    OPTIPDOCKETNO INTEGER,
    OPCTIPDOCKETNO CHAR(15),
    OPJOBID INTEGER,
    OPTIPSITEID INTEGER,
    OPTIPDATE DATE,
    OPM3TIPPED DECIMAL(8,2),
    OPWEIGHTTIPPED DECIMAL(8,2),
    OPRATE DECIMAL(8,2),
    OPFLAGS INTEGER,
    OPMATERIALID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_LASTADDRS (
    IPCUSTID INTEGER)
RETURNS (
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_LASTTRUCK (
    IPDDATE DATE DEFAULT NULL,
    IPDRIVERID INTEGER DEFAULT NULL)
RETURNS (
    OPTRUCKID SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_LOGINCHECK (
    IPUSERNAME CHAR(50) DEFAULT NULL,
    IPENCPASSWD CHAR(60) DEFAULT NULL)
RETURNS (
    OPSTATUS SMALLINT,
    OPUSERID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MAP
RETURNS (
    OPID INTEGER,
    OPMAPFILE CHAR(80) CHARACTER SET ASCII,
    OPCURRENT INTEGER,
    OPTOPLEFTLAT BIGINT,
    OPTOPLEFTLONG BIGINT,
    OPBOTTOMRIGHTLAT BIGINT,
    OPBOTTOMRIGHTLONG BIGINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MATCHADDRS (
    IPSTREETNUMBER CHAR(10),
    IPSTREETNAME CHAR(30),
    IPSUBURB CHAR(30))
RETURNS (
    OPORDERID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MATCHCUSTS (
    IPTEXT VARCHAR(50) = null,
    IPROWS INTEGER = null,
    IPWHATTYPE INTEGER = null)
RETURNS (
    OPNAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MATCHSTREETS (
    IPLOOKFOR VARCHAR(45),
    IPROWS INTEGER,
    IPSTATE VARCHAR(30))
RETURNS (
    OPSTREETID INTEGER,
    OPSTREETNAME CHAR(45),
    OPDESIGNATOR CHAR(3),
    OPMAPREF CHAR(5),
    OPPAGENUMBER INTEGER,
    OPNAME CHAR(40),
    OPPOSTCODE CHAR(10),
    OPSTATE CHAR(30),
    OPLONG BIGINT,
    OPLAT BIGINT,
    OPSUBURBID INTEGER,
    OPFIREANTAREA INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MATCHSUBS (
    IPTEXT VARCHAR(40) CHARACTER SET ASCII,
    IPROWS INTEGER,
    IPSTATE VARCHAR(30) CHARACTER SET ASCII)
RETURNS (
    OPNAME VARCHAR(40),
    OPPOSTCODE VARCHAR(5),
    OPSTATE VARCHAR(30),
    OPLONG BIGINT,
    OPLAT BIGINT,
    OPSUBURBID INTEGER,
    OPFIREANTAREA INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MATCHSUPPS (
    IPTEXT VARCHAR(50) = null,
    IPROWS INTEGER = null,
    IPWHATTYPE INTEGER = null)
RETURNS (
    OPNAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MATERIALPRICES (
    IPTIPSITEID INTEGER,
    IPCUSTID INTEGER)
RETURNS (
    OPTIPSITEID INTEGER,
    OPCUSTID INTEGER,
    OPMATERIALID INTEGER,
    OPDELIVEREDPRICE DECIMAL(15,2),
    OPPICKUPPRICE DECIMAL(15,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MATERIALS
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(40),
    OPPERTON DECIMAL(9,2),
    OPPERCUBIC DECIMAL(9,2),
    OPACCOUNTNO CHAR(25),
    OPITEMCODE CHAR(12),
    OPWASTECATEGORYID INTEGER,
    OPFLAGS INTEGER,
    OPMINWEIGHT DECIMAL(6,2),
    OPMINWEIGHTFEE DECIMAL(6,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MATERIALSUMM (
    IPFROMDATE DATE DEFAULT NULL,
    IPTODATE DATE DEFAULT NULL,
    IPINCLUDEALL SMALLINT DEFAULT NULL)
RETURNS (
    OPMATERIALID INTEGER,
    OPBINCOUNT INTEGER,
    OPCUBICMETRES DECIMAL(18,1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MLIST (
    IPMLISTID INTEGER)
RETURNS (
    OPID INTEGER,
    OPLISTID INTEGER,
    OPDESC CHAR(50),
    OPDESC2 CHAR(50),
    OPDESC3 CHAR(30))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MODULESETTINGS (
    IPMODULE INTEGER)
RETURNS (
    OPSETTINGS BIGINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MONEYCOLLECTEDDAYWEB (
    IPFORDATE DATE,
    IPDRIVERID INTEGER)
RETURNS (
    OPJOBID INTEGER,
    OPPAYMETHODID1 INTEGER,
    OPAMOUNT1 DECIMAL(15,2),
    OPPAYMETHODID2 INTEGER,
    OPAMOUNT2 INTEGER,
    OPDDEMAILADDR CHAR(60),
    OPDDATE DATE,
    OPDRIVERID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MONEYCOLLECTEDWEB (
    IPJOBID INTEGER)
RETURNS (
    OPJOBID INTEGER,
    OPPAYMETHODID1 INTEGER,
    OPAMOUNT1 DECIMAL(15,2),
    OPPAYMETHODID2 INTEGER,
    OPAMOUNT2 INTEGER,
    OPDDEMAILADDR CHAR(60),
    OPDDATE DATE,
    OPDRIVERID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MORECOMMENTS (
    IPMORECOMMENTSID INTEGER)
RETURNS (
    OPCOMMENTS CHAR(2000))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MULTIDAYRUNSHEETJOBS (
    IPRUNSHEETID INTEGER)
RETURNS (
    OPID INTEGER,
    OPRUNSHEETID INTEGER,
    OPSORTORDER INTEGER,
    OPJOBID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_MULTIDAYRUNSHEETS
RETURNS (
    OPID INTEGER,
    OPCREATEDON DATE,
    OPRUNNAME CHAR(50),
    OPDRIVERID INTEGER,
    OPFLAGS INTEGER,
    OPACTIVE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_NEWSCRAPLOADID (
    IPHOWMANY INTEGER)
RETURNS (
    OPSTARTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_NEXTCREDITNO
RETURNS (
    OPCREDITNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_NEXTDDNO
RETURNS (
    OPDDNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_NEXTOUTGOINGDKTNO
RETURNS (
    OPDDNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_NEXTSCRAPDDNO
RETURNS (
    OPDDNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_NOORDERFROMTO (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPID INTEGER,
    OPDDATE DATE,
    OPTTIME TIMESTAMP,
    OPUSERID INTEGER,
    OPREASONID INTEGER,
    OPREASONTEXT CHAR(50),
    OPREFERRALID INTEGER,
    OPSUBURB CHAR(50),
    OPNOORDTYPE INTEGER,
    OPCOMMENTS CHAR(100),
    OPPRICEQUOTED DECIMAL(15,2),
    OPBINTYPEID INTEGER,
    OPPRICEAREAID INTEGER,
    OPBINCOUNT INTEGER,
    OPFLAGS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_OPENORDERS
RETURNS (
    OPORDERID INTEGER,
    OPCUSTID INTEGER,
    OPCUSTNAME CHAR(50),
    OPCONTACT CHAR(30),
    OPCOMPLETE INTEGER,
    OPINVTYPE INTEGER,
    OPBYBINNO INTEGER,
    DELADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPDELADDRESS1 CHAR(30),
    OPDELADDRESS2 CHAR(30),
    OPDELTOWN CHAR(30),
    OPDELSTATE CHAR(30),
    OPDELPOSTCODE CHAR(10),
    OPGPSLAT NUMERIC(18,12),
    OPGPSLONG NUMERIC(18,12),
    OPBILLADDRID INTEGER,
    OPBILLADDRESS1 CHAR(30),
    OPBILLADDRESS2 CHAR(30),
    OPBILLTOWN CHAR(30),
    OPBILLSTATE CHAR(30),
    OPBILLPOSTCODE CHAR(10),
    OPBILLGPSLAT NUMERIC(18,12),
    OPBILLGPSLONG NUMERIC(18,12),
    OPVERSIONNO INTEGER,
    OPCUSTTELNO VARCHAR(14),
    OPCUSTTYPE INTEGER,
    OPREFERRALID INTEGER,
    OPFIRSTJOB DATE,
    OPUSERID INTEGER,
    OPCUSTSITEID INTEGER,
    OPJOBNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_ORDER (
    IPORDERID INTEGER = null)
RETURNS (
    OPORDERID INTEGER,
    OPCUSTID INTEGER,
    OPCUSTNAME CHAR(50),
    OPCONTACT CHAR(30),
    OPCOMPLETE INTEGER,
    OPINVTYPE INTEGER,
    OPBYBINNO INTEGER,
    DELADDRID INTEGER,
    OPDELADDRESS1 CHAR(30),
    OPDELADDRESS2 CHAR(30),
    OPDELTOWN CHAR(30),
    OPDELSTATE CHAR(30),
    OPDELPOSTCODE CHAR(10),
    OPBILLADDRID INTEGER,
    OPBILLADDRESS1 CHAR(30),
    OPBILLADDRESS2 CHAR(30),
    OPBILLTOWN CHAR(30),
    OPBILLSTATE CHAR(30),
    OPBILLPOSTCODE CHAR(10),
    OPVERSIONNO INTEGER,
    OPCUSTTELNO VARCHAR(14),
    OPCUSTTYPE INTEGER,
    OPREFERRALID INTEGER,
    OPFIRSTJOB DATE,
    OPFAXNO CHAR(30),
    OPEMAIL CHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_ORDERWEEKS (
    IPWKNO INTEGER DEFAULT NULL)
RETURNS (
    OPORDERID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_PAYMETHOD (
    IPPAYMETHODID INTEGER = null)
RETURNS (
    OPPAYMETHODID SMALLINT,
    OPDESCRIPTION CHAR(6),
    OPACCT SMALLINT,
    OPMEANSPAID SMALLINT,
    OPVERSIONNO INTEGER,
    OPISCHEQUE SMALLINT,
    OPISCASH SMALLINT,
    OPSURCHARGE DECIMAL(4,1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_PAYMETHODS
RETURNS (
    OPPAYMETHODID SMALLINT,
    OPDESCRIPTION CHAR(6),
    OPACCT SMALLINT,
    OPMEANSPAID SMALLINT,
    OPVERSIONNO INTEGER,
    OPISCHEQUE SMALLINT,
    OPISCASH SMALLINT,
    OPSURCHARGE DECIMAL(4,1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_PINVBATCH (
    IPINVBATCH INTEGER = null)
RETURNS (
    OPINVBATCHNO INTEGER,
    OPCREATEDDATE TIMESTAMP,
    OPEXPORTEDDATE TIMESTAMP,
    OPEXPORTEDFILENAME CHAR(50),
    OPCOUNT SMALLINT,
    OPINVPERIOD INTEGER,
    OPVERSIONNO INTEGER,
    OPREFID INTEGER,
    OPBATCHTYPE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_PINVBATCHS (
    IPWHICHBATCHES INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPINVBATCHNO INTEGER,
    OPCREATEDDATE TIMESTAMP,
    OPEXPORTEDDATE TIMESTAMP,
    OPEXPORTEDFILENAME CHAR(50),
    OPCOUNT SMALLINT,
    OPINVPERIOD INTEGER,
    OPVERSIONNO INTEGER,
    OPREFID INTEGER,
    OPBATCHTYPE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_PINVLINES (
    IPPINVID INTEGER = null)
RETURNS (
    OPPINVID INTEGER,
    OPINVLINENO INTEGER,
    OPEXGSTVALUE DECIMAL(18,2),
    OPGST DECIMAL(18,2),
    OPTOTALVALUE DECIMAL(18,2),
    OPLINETYPE INTEGER,
    OPITEMCODE CHAR(12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_PINVSFORCUSTID (
    IPCUSTID INTEGER = null)
RETURNS (
    OPPINVID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_PINVSINBATCH (
    IPINVBATCHNO INTEGER = null)
RETURNS (
    OPINVOICENO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_PRICE (
    IPCUSTID INTEGER DEFAULT NULL,
    IPPRICEAREAID INTEGER DEFAULT NULL,
    IPBINTYPEID INTEGER DEFAULT NULL)
RETURNS (
    OPCUSTID INTEGER,
    OPPRICEAREAID INTEGER,
    OPBINTYPEID INTEGER,
    OPPRICE DECIMAL(12,2),
    OPFIXED SMALLINT,
    OPINCEX SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_PRICEAREA (
    IPPRICEAREAID INTEGER = null)
RETURNS (
    OPPRICEAREAID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPDEFAULTAREA INTEGER,
    OPASBESTOSAREA INTEGER,
    OPVERSIONNO INTEGER,
    OPSORTORDER INTEGER,
    OPACTIVE INTEGER,
    OPCHARGESFORPU INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_PRICEAREAS
RETURNS (
    OPPRICEAREAID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPDEFAULTAREA INTEGER,
    OPASBESTOSAREA INTEGER,
    OPVERSIONNO INTEGER,
    OPSORTORDER INTEGER,
    OPACTIVE INTEGER,
    OPCHARGESFORPU INTEGER,
    OPINCLUDEDWEIGHT DECIMAL(5,2),
    OPINCLUDEDVOLUME INTEGER,
    OPTIPSITEID INTEGER,
    OPPRICEPERTON DECIMAL(6,2),
    OPPRICEPERCUBE DECIMAL(6,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_PRICES (
    IPCUSTID INTEGER DEFAULT NULL)
RETURNS (
    OPCUSTID INTEGER,
    OPPRICEAREAID INTEGER,
    OPBINTYPEID INTEGER,
    OPPRICE DECIMAL(18,2),
    OPFIXED SMALLINT,
    OPINCEX SMALLINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_PRICESFORWS (
    IPCUSTID INTEGER)
RETURNS (
    OPCUSTID INTEGER,
    OPPRICEAREAID INTEGER,
    OPBINTYPEID INTEGER,
    OPPRICE DECIMAL(12,2),
    OPINCEX INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_READDDNO
RETURNS (
    OPDDNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_READFLDDNO
RETURNS (
    OPFLDDNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_READINVNO
RETURNS (
    OPINVNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_READOUTGOINGDKTNO
RETURNS (
    OPDDNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_READPINVNO
RETURNS (
    OPPINVNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_READTIPDDNO (
    IPTIPDDSEQ INTEGER)
RETURNS (
    OPTIPDDNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_READYTOINVOICE (
    IPJOBSTATUS INTEGER = null,
    IPINVPERIOD INTEGER = null,
    IPUPTODATE DATE = null)
RETURNS (
    OPJOBID INTEGER,
    OPINVTYPE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_RECONFORDAY (
    IPDDATE DATE DEFAULT NULL)
RETURNS (
    OPDRIVERID INTEGER,
    OPBATCHID INTEGER,
    OPCHEQALLOC DECIMAL(18,2),
    OPCASHALLOC DECIMAL(18,2),
    OPVERSIONNO INTEGER,
    OPBALANCED SMALLINT,
    OPSTARTTIME TIMESTAMP,
    OPENDTIME TIMESTAMP,
    OPTRUCKID INTEGER,
    OPSTARTKMS INTEGER,
    OPENDKMS INTEGER,
    OPFUELCOST DECIMAL(8,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_RECYCLEDGOODS
RETURNS (
    OPRGID INTEGER,
    OPDESCRIPTION CHAR(40),
    OPDELIVEREDPRICE DECIMAL(8,2),
    OPPUPRICE DECIMAL(8,2),
    OPACCOUNTNO CHAR(25),
    OPITEMCODE CHAR(12),
    OPSHORTDESC CHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_REFERRAL (
    IPREFERRALID SMALLINT DEFAULT NULL)
RETURNS (
    OPREFERRALID INTEGER,
    OPDESCRIPTION CHAR(20),
    OPVERSIONNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_REFERRALS
RETURNS (
    OPREFERRALID INTEGER,
    OPDESCRIPTION CHAR(20),
    OPVERSIONNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_REFERSUMM (
    IPSTARTDATE DATE DEFAULT NULL,
    IPENDDATE DATE DEFAULT NULL)
RETURNS (
    LRID INTEGER,
    REFCOUNT INTEGER,
    LDESC CHAR(20))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_REPORTNO
RETURNS (
    OPREPORTNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_RGORDERFROMTO (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPRGSOID INTEGER,
    OPCUSTID INTEGER,
    OPDELIVERYDATE DATE,
    OPDELIVERYTYPE INTEGER,
    OPCONTACTNAME CHAR(30),
    OPCUSTREF CHAR(20),
    OPWEIGHT DECIMAL(15,2),
    OPPRICE DECIMAL(15,2),
    OPRGID INTEGER,
    OPRGOFFICENOTES CHAR(200),
    OPORDERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPPHONE CHAR(30),
    OPFAX CHAR(30),
    OPEMAIL CHAR(50),
    OPMYOBJOBNO CHAR(50),
    OPORDERNO INTEGER,
    OPDRIVERNOTES CHAR(200),
    OPDELIVERYCTIME CHAR(10),
    OPDELIVERYNTIME TIMESTAMP,
    OPCOMPLETE SMALLINT,
    OPPAYDETID INTEGER,
    OPUSERID INTEGER,
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_RGSORDER (
    IPCUSTID INTEGER,
    IPJUSTOPEN SMALLINT)
RETURNS (
    OPRGSOID INTEGER,
    OPORDERNO INTEGER,
    OPCUSTID INTEGER,
    OPRGID INTEGER,
    OPTONS DECIMAL(8,2),
    OPDELIVERYTYPE SMALLINT,
    OPINCPRICE DECIMAL(8,2),
    OPDRIVERNOTES CHAR(200),
    OPOFFICENOTES CHAR(200),
    OPCUSTREF CHAR(20),
    OPCONTACTNAME CHAR(30),
    OPCONTACTPHONE CHAR(30),
    OPCOMPLETE SMALLINT,
    OPEMAIL CHAR(50),
    OPFAX CHAR(30),
    OPUSERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPORDERID INTEGER,
    OPMYOBJOBNO CHAR(50),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPGPSLAT NUMERIC(18,12),
    OPGPSLONG NUMERIC(18,12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_RMBREAKDOWN (
    IPFROMDATE DATE,
    IPTODATE DATE,
    IPORDERID INTEGER)
RETURNS (
    OPRMGROUPID INTEGER,
    OPDESCRIPTION CHAR(40),
    OPCUBICMETRES DECIMAL(15,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_RMGROUPS
RETURNS (
    OPRMGROUPID INTEGER,
    OPDESCRIPTION CHAR(40),
    OPSHORTDESC CHAR(60),
    OPTOTONS DECIMAL(8,3))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_RMJOBBREAKDOWN (
    IPFROMDATE DATE,
    IPTODATE DATE,
    IPCUSTID INTEGER,
    IPCUSTSITEID INTEGER)
RETURNS (
    OPRMGROUPID INTEGER,
    OPDESCRIPTION CHAR(40),
    OPCUBICMETRES DECIMAL(15,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SALESMEN
RETURNS (
    OPSALESMANID INTEGER,
    OPNAME CHAR(40),
    OPTELEPHONE CHAR(12),
    OPEMAIL CHAR(50),
    OPACTIVE INTEGER,
    OPINITPERCUBE DECIMAL(6,2),
    OPPERCUBE DECIMAL(6,2),
    OPINITPERCENT DECIMAL(6,2),
    OPPERCENT DECIMAL(6,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SALESSUMMBT (
    IPSUMMTYPE INTEGER = null,
    IPFROMDATE DATE = null,
    IPTODATE DATE = null,
    IPPAYMETHODID INTEGER = null,
    IPGSTPERCENT DECIMAL(15,2) = null)
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPNUMDELIVERIES INTEGER,
    OPCUBICMETRES DECIMAL(18,1),
    OPTOTALVALUE DECIMAL(18,4))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SALESSUMMCUST (
    IPSUMMTYPE INTEGER = null,
    IPFROMDATE DATE = null,
    IPTODATE DATE = null,
    IPPAYMETHODID INTEGER = null,
    IPGSTPERCENT DECIMAL(15,2) = null)
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(50),
    OPNUMDELIVERIES INTEGER,
    OPCUBICMETRES DECIMAL(18,1),
    OPTOTALVALUE DECIMAL(18,4))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SALESSUMMDRIV (
    IPSUMMTYPE INTEGER = null,
    IPFROMDATE DATE = null,
    IPTODATE DATE = null,
    IPPAYMETHODID INTEGER = null,
    IPGSTPERCENT DECIMAL(15,2) = null)
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPNUMDELIVERIES INTEGER,
    OPCUBICMETRES DECIMAL(18,1),
    OPTOTALVALUE DECIMAL(18,4),
    OPNUMCHANGEOVERS INTEGER,
    OPNUMPICKUPS INTEGER,
    OPNUMSERVICES INTEGER,
    OPNUMRELOCATIONS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SALESSUMMPA (
    IPSUMMTYPE INTEGER = null,
    IPFROMDATE DATE = null,
    IPTODATE DATE = null,
    IPPAYMETHODID INTEGER = null,
    IPGSTPERCENT DECIMAL(15,2) = null)
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPNUMDELIVERIES INTEGER,
    OPCUBICMETRES DECIMAL(18,1),
    OPTOTALVALUE DECIMAL(18,4))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SALESSUMMSUB (
    IPSUMMTYPE INTEGER = null,
    IPFROMDATE DATE = null,
    IPTODATE DATE = null,
    IPPAYMETHODID INTEGER = null,
    IPGSTPERCENT DECIMAL(15,2) = null)
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPNUMDELIVERIES INTEGER,
    OPCUBICMETRES DECIMAL(18,1),
    OPTOTALVALUE DECIMAL(18,4))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SCRAPBATCHNO (
    IPDATE DATE = null)
RETURNS (
    OPBATCHNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SITE (
    IPSITEID INTEGER = null)
RETURNS (
    OPSITEID INTEGER,
    OPDESCRIPTION CHAR(20),
    OPTIPSITE SMALLINT,
    OPVERSIONNO INTEGER,
    OPDEFAULTSITE INTEGER,
    OPINCLUDEDWEIGHT DECIMAL(5,3),
    OPINCLUDEDVOLUME DECIMAL(4,1),
    OPPRICEPERTON DECIMAL(6,2),
    OPPRICEPERCUBE DECIMAL(6,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SITEBINBYINV (
    IPINVNO INTEGER,
    IPINVLINENO INTEGER)
RETURNS (
    OPJOBID INTEGER,
    OPFROMDATE DATE,
    OPTODATE DATE,
    OPINVNO BIGINT,
    OPINVLINENO INTEGER,
    OPBINTYPEID INTEGER,
    OPBINCOUNT INTEGER,
    OPBINPRICE DECIMAL(18,2),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPSUBURB CHAR(20),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SITEBINORDERS (
    IPFROMDATE DATE)
RETURNS (
    OPORDERID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SITEBINSLASTINVOICE (
    IPJOBID INTEGER)
RETURNS (
    OPLASTINVDATE DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SITEFOREMAN (
    IPCUSTOMERSITEID INTEGER)
RETURNS (
    OPCUSTSITEID INTEGER,
    OPFOREMANID INTEGER,
    OPNAME CHAR(40),
    OPCONTACTNUMBER CHAR(30))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SITES
RETURNS (
    OPSITEID INTEGER,
    OPDESCRIPTION CHAR(20),
    OPTIPSITE SMALLINT,
    OPVERSIONNO INTEGER,
    OPDEFAULTSITE INTEGER,
    OPINCLUDEDWEIGHT DECIMAL(5,3),
    OPINCLUDEDVOLUME DECIMAL(4,1),
    OPPRICEPERTON DECIMAL(6,2),
    OPPRICEPERCUBE DECIMAL(6,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SITESOH (
    IPASATDATE DATE DEFAULT NULL)
RETURNS (
    OPSITEID INTEGER,
    OPBINTYPEID INTEGER,
    OPBINSFULL INTEGER,
    OPBINSEMPTY INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SMSFROMTO (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPSMSTYPE INTEGER,
    OPID INTEGER,
    OPTEXTMESSAGE CHAR(160),
    OPTIMESENT TIMESTAMP,
    OPSUCCESSFUL INTEGER,
    OPMOBILE CHAR(20))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SMSFROMTOCOUNT (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPCOUNT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SMSS (
    IPSMSTYPE INTEGER DEFAULT NULL,
    IPID INTEGER DEFAULT NULL)
RETURNS (
    OPSMSTYPE INTEGER,
    OPID INTEGER,
    OPTEXTMESSAGE CHAR(160),
    OPTIMESENT TIMESTAMP,
    OPSUCCESSFUL INTEGER,
    OPMOBILE CHAR(20))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SMSTEMPLATES
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(30) CHARACTER SET ASCII,
    OPTHETEXT CHAR(170) CHARACTER SET ASCII)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_STAFFACTIVITY (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPUSERID INTEGER,
    OPUSERNAME CHAR(50),
    OPNEWORDERCOUNT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_STAKE_BIN_DATES
RETURNS (
    OPSDATE DATE,
    OPCOMMENT CHAR(40))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_STAKEFINDCURRENT (
    IPDATE DATE DEFAULT NULL)
RETURNS (
    OPDATE DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_STOCKTAKE_BINTYPE_LINES (
    IPDATE DATE DEFAULT NULL)
RETURNS (
    OPBINTYPEID INTEGER,
    OPSITEID INTEGER,
    OPTOTALBINS INTEGER,
    OPBINSAVAILFULL INTEGER,
    OPBINSAVAILEMPTY INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_STOCKTAKE_FROMTO (
    IPFROMDATE DATE DEFAULT NULL,
    IPTODATE DATE DEFAULT NULL)
RETURNS (
    OPSTAKEDATE DATE,
    OPCOMMENT CHAR(40),
    OPBINTYPEID INTEGER,
    OPSITEID INTEGER,
    OPTOTALBINS INTEGER,
    OPBINSAVAILFULL INTEGER,
    OPBINSAVAILEMPTY INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_STREETCOORDS (
    IPSTREETID INTEGER)
RETURNS (
    OPPAGENUMBER INTEGER,
    OPMAPREF CHAR(5))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_STREETSMATCHING (
    IPSTATE CHAR(30),
    IPSUBURB CHAR(40),
    IPPOSTCODE CHAR(10),
    IPSTREETNAME VARCHAR(45))
RETURNS (
    OPINSTATE CHAR(30),
    OPINSUBURB CHAR(40),
    OPINPOSTCODE CHAR(10),
    OPSTREETNAME CHAR(45),
    OPSTREETDESIGNATOR CHAR(10),
    OPSTREETID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SUBURB (
    IPSUBURBNAME VARCHAR(40) CHARACTER SET ASCII = null,
    IPPOSTCODE VARCHAR(5) CHARACTER SET ASCII = null,
    IPSTATE VARCHAR(30) CHARACTER SET ASCII = null)
RETURNS (
    OPLONG BIGINT,
    OPLAT BIGINT)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SUBURBSBYPCODE (
    IPPOSTCODE VARCHAR(5) CHARACTER SET ASCII)
RETURNS (
    OPSUBURB VARCHAR(40) CHARACTER SET ASCII,
    OPPOSTCODE VARCHAR(5) CHARACTER SET ASCII,
    OPSTATE VARCHAR(30) CHARACTER SET ASCII,
    OPLONG BIGINT,
    OPLAT BIGINT,
    OPSUBURBID INTEGER,
    OPFIREANTAREA INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SUBURBSBYSTATE (
    IPSTATE VARCHAR(30) CHARACTER SET ASCII)
RETURNS (
    OPSUBURB VARCHAR(40) CHARACTER SET ASCII,
    OPPOSTCODE VARCHAR(5) CHARACTER SET ASCII,
    OPSTATE VARCHAR(30) CHARACTER SET ASCII,
    OPLONG BIGINT,
    OPLAT BIGINT,
    OPSUBURBID INTEGER,
    OPFIREANTAREA INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SWCODES
RETURNS (
    OPSWCODEID INTEGER,
    OPSWCODENO CHAR(10),
    OPDESCRIPTION CHAR(150),
    OPSERVICETYPE CHAR(40),
    OPBINTYPEID INTEGER,
    OPBINFORMATID INTEGER,
    OPPRICEPER INTEGER,
    OPRATE DECIMAL(8,2),
    OPFLAGS INTEGER,
    OPSORTORDER INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SWORDERBYJOBID (
    IPJOBID INTEGER)
RETURNS (
    OPSWORDERID INTEGER,
    OPREQUESTDATE DATE,
    OPSWCODEID INTEGER,
    OPDELIVEREDSWCODEID INTEGER,
    OPDEPTCODE CHAR(12),
    OPMAXIMO CHAR(30),
    OPPROJECTID CHAR(30),
    OPBINSORDERED INTEGER,
    OPJOBID INTEGER,
    OPCUSTID INTEGER,
    OPORDERID INTEGER,
    OPDEPOTNO CHAR(12),
    OPREQUESTORPH CHAR(30),
    OPJOBTYPE INTEGER,
    OPREQUESTOR CHAR(30),
    OPSITECONTACTPERSON CHAR(30),
    OPSITECONTACTNUMBER CHAR(30),
    OPUNITS DECIMAL(15,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SYSFLAG (
    IPSUBJECT CHAR(25) DEFAULT NULL)
RETURNS (
    OPDATA CHAR(140))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_SYSFLAGS
RETURNS (
    OPDATA CHAR(140))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TAREWT (
    IPREGO CHAR(20))
RETURNS (
    OPREGO CHAR(20),
    OPTAREWT DECIMAL(12,2),
    OPTRAILERREGO CHAR(20))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TERM (
    IPTERMSID INTEGER DEFAULT NULL)
RETURNS (
    OPTERMSID INTEGER,
    OPDESCRIPTION CHAR(20))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TERMS
RETURNS (
    OPTERMSID INTEGER,
    OPDESCRIPTION CHAR(20))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TEST
RETURNS (
    ID INTEGER,
    OCUSTID INTEGER,
    OJOBID INTEGER,
    OJOBDATE DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TIPBATCHNO (
    IPDATE DATE = null,
    IPTIPSITEID INTEGER = null)
RETURNS (
    OPBATCHNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TIPFEEBYINV (
    IPINVNO INTEGER DEFAULT NULL,
    IPINVLINENO INTEGER DEFAULT NULL)
RETURNS (
    OPTFID INTEGER,
    OPTIPID INTEGER,
    OPFEEID INTEGER,
    OPEXAMOUNT DECIMAL(12,2),
    OPINCEX SMALLINT,
    OPINVNO INTEGER,
    OPINVLINENO INTEGER,
    OPINCAMOUNT DECIMAL(12,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TIPFEES (
    IPTIPID INTEGER DEFAULT NULL)
RETURNS (
    OPTFID INTEGER,
    OPTIPID INTEGER,
    OPFEEID INTEGER,
    OPEXAMOUNT DECIMAL(18,2),
    OPINCEX SMALLINT,
    OPINVNO INTEGER,
    OPINVLINENO INTEGER,
    OPINCAMOUNT DECIMAL(12,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TIPNEXTDDNO (
    IPWHICHSEQUENCE INTEGER)
RETURNS (
    OPNEXTDDNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TIPREGOS (
    IPCUSTID INTEGER,
    IPFROMDATE DATE)
RETURNS (
    OPREGO CHAR(20),
    OPTAREWEIGHT DECIMAL(15,2),
    OPTRAILERREGO CHAR(20),
    OPTRAILERTARE DECIMAL(15,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TIPSITES
RETURNS (
    OPTIPSITEID INTEGER,
    OPDESCRIPTION CHAR(40),
    OPRULES CHAR(1000),
    OPDEFDEST INTEGER,
    OPFLAGS INTEGER,
    OPEPLNUMBER VARCHAR(40))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TRUCK (
    IPTRUCKID INTEGER = null)
RETURNS (
    OPTRUCKID INTEGER,
    OPDESCRIPTION CHAR(12) CHARACTER SET ASCII,
    OPVEHICLEID CHAR(12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TRUCKANDDOGSFROMTO (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPTRUCKANDDOGID INTEGER,
    OPJOBDATE DATE,
    OPTRAVELFROM CHAR(50),
    OPTRAVELTO CHAR(50),
    OPDOCKETNO CHAR(20),
    OPCOMMENT CHAR(200),
    OPDRIVERID INTEGER,
    OPJOBSTATUS INTEGER,
    OPDOGTRUCKID INTEGER,
    OPORDERDAYSEQNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TRUCKANDDOGSONDAY2 (
    IPFORDATE DATE)
RETURNS (
    OPTRUCKANDDOGID INTEGER,
    OPJOBDATE DATE,
    OPTRAVELFROM CHAR(50),
    OPTRAVELTO CHAR(50),
    OPDOCKETNO CHAR(20),
    OPCOMMENT CHAR(200),
    OPDRIVERID INTEGER,
    OPJOBSTATUS INTEGER,
    OPDOGTRUCKID INTEGER,
    OPORDERDAYSEQNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TRUCKDRIVERS (
    IPDDATE DATE = null)
RETURNS (
    OPDDATE DATE,
    OPDRIVERID INTEGER,
    OPTRUCKID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_TRUCKS
RETURNS (
    OPTRUCKID INTEGER,
    OPDESCRIPTION CHAR(12) CHARACTER SET ASCII,
    OPVEHICLEID CHAR(12))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_UNAVAIL_POS_FOR_CUST_ADDR (
    IP_CUSTID INTEGER,
    IP_ADDRID INTEGER)
RETURNS (
    OP_PO VARCHAR(100))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_USERS
RETURNS (
    OPUSERID INTEGER,
    OPUSERNAME CHAR(50),
    OPFULLNAME CHAR(50),
    OPISACTIVE SMALLINT,
    OPDEPTID INTEGER,
    OPENCPASSWD CHAR(60),
    OPPERMISSIONS BIGINT,
    OPFONTFORDEL CHAR(50),
    OPFONTFORCO CHAR(50),
    OPFONTFORPU CHAR(50),
    OPFONTFORWL CHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPGET_VOLPICKEDUP (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPDATE DATE,
    OPSITEID INTEGER,
    OPVOLUME DECIMAL(15,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_ADDRFIND (
    IPORDERID INTEGER,
    IPSUBURB CHAR(30),
    IPSTREETNAME CHAR(30),
    IPSTREETNUMBER CHAR(10),
    IPADDRID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_ADHOCCHARGE (
    IPADHOCCHARGEID INTEGER,
    IPCUSTID INTEGER,
    IPJOBID INTEGER,
    IPFEEID INTEGER,
    IPDESCRIPTION CHAR(50),
    IPAMOUNT DECIMAL(8,2),
    IPINCEX INTEGER,
    IPINVOIEABLE INTEGER,
    IPPAYMENTRECEIVED DATE,
    IPPAYMETHODID INTEGER,
    IPINCGSTAMOUNT DECIMAL(8,2),
    IPCOMMENT VARCHAR(100))
RETURNS (
    OPADHOCCHARGEID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_ADHOCINVSTATE (
    IPADHOCCHARGEID INTEGER,
    IPINVSTATE INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_BCPRICE (
    IPBINCOMPANYID INTEGER,
    IPBINTYPEID INTEGER,
    IPBINFORMATID INTEGER,
    IPPRICE DECIMAL(7,2),
    IPINCEX INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_BINCOMPANY (
    IPBINCOMPANYID INTEGER,
    IPCOMPANYNAME CHAR(50),
    IPCOMMENTS CHAR(50),
    IPEMAIL CHAR(50),
    IPADDRID INTEGER,
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10))
RETURNS (
    OPBINCOMPANYID INTEGER,
    OPADDRID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_BINFORMAT (
    IPBINFORMATID INTEGER DEFAULT NULL,
    IPDESCRIPTION CHAR(30) DEFAULT NULL,
    IPDEFAULTFORMAT SMALLINT DEFAULT NULL)
RETURNS (
    THEBINFORMATID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_BINMV (
    IPBINMVID INTEGER DEFAULT NULL,
    IPMVDATE DATE DEFAULT NULL,
    IPBINTYPEID INTEGER DEFAULT NULL,
    IPFROMSITEID INTEGER DEFAULT NULL,
    IPOUTBINSEMPTY INTEGER DEFAULT NULL,
    IPOUTBINSFULL INTEGER DEFAULT NULL,
    IPTOSITEID INTEGER DEFAULT NULL,
    IPINBINSEMPTY INTEGER DEFAULT NULL,
    IPINBINSFULL INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_BINTYPE (
    IPBINTYPEID INTEGER,
    IPBINTYPE CHAR(8),
    IPDESCRIPTION CHAR(20),
    IPFULLDESCRIPTION CHAR(30),
    IPSORTORDER INTEGER,
    IPCUBICMETRES DECIMAL(6,1),
    IPVERSIONNO INTEGER,
    IPPRICEPERHIRE DECIMAL(18,2),
    IPINCEX INTEGER,
    IPASBESTOSITEM CHAR(25),
    IPITEMCODE CHAR(12),
    IPACCOUNTNO CHAR(25),
    IPCOMPANY CHAR(10),
    IPVALIDFORMATS CHAR(200),
    IPSITEBINITEMCODE CHAR(24),
    IPSITEBINACCOUNTNO CHAR(24),
    IPADVERTISEDM3 INTEGER,
    IPCOMMENT1 CHAR(50),
    IPCOMMENT2 CHAR(50),
    IPFLAGS INTEGER,
    IPPINCOLOUR VARCHAR(50))
RETURNS (
    THEBINTYPEID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_BOOKINVNO (
    IPINVNO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_CALLCOUNTS (
    IPDDATE DATE,
    IPUSERID INTEGER,
    IPNEWORDERS INTEGER,
    IPCHANGEOVERS INTEGER,
    IPPICKUPS INTEGER,
    IPMISSEDORDERS INTEGER,
    IPGENENQS INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_CARDTYPE (
    IPCARDTYPEID INTEGER,
    IPCARDNAME CHAR(8),
    IPSURCHARGE DECIMAL(5,2))
RETURNS (
    OPCARDTYPEID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_CHANGEDETAILS (
    IPENTITYID INTEGER,
    IPOBJECTID INTEGER,
    IPAMDTIME TIMESTAMP,
    IPDETAILS CHAR(500),
    IPUSERID INTEGER,
    IPOPERATION VARCHAR(30),
    IPENTITY VARCHAR(30))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_COMMSMETHOD (
    IPCOMMSMETHODID INTEGER,
    IPDESCRIPTION CHAR(30))
RETURNS (
    OPCOMMSMETHODID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_CONTACTDETAILS (
    IPCONTACTDETAILSID INTEGER,
    IPCONTACTNAME VARCHAR(500),
    IPTELEPHONE VARCHAR(500),
    IPMOBILE VARCHAR(500),
    IPEMAIL VARCHAR(500),
    IPADDRID INTEGER,
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10))
RETURNS (
    OPCONTACTDETAILSID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_CONTRACTDRIVERPRICES (
    IPDRIVERID INTEGER,
    IPJOBTYPE INTEGER,
    IPBINTYPEID INTEGER,
    IPINCPRICE DECIMAL(15,2))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_COUNCIL (
    IPCOUNCILID INTEGER,
    IPNAME CHAR(40),
    IPCOMMENT CHAR(200))
RETURNS (
    OPCOUNCILID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_COUNCILPDF (
    IPCOUNCILID INTEGER,
    IPFILENAME CHAR(256),
    IPDESCRIPTION CHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_COUNCILSUBURB (
    IPCOUNCILID INTEGER,
    IPSUBURBNAME CHAR(40),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(5))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_CREDITNOTE (
    IPCREDITNOTEID INTEGER,
    IPCREDITNOTENO INTEGER,
    IPCUSTID INTEGER,
    IPUSERID INTEGER,
    IPCREDITDATE DATE,
    IPFLAGS INTEGER,
    IPCOMMENTS CHAR(500),
    IPINVNO CHAR(10))
RETURNS (
    OPCREDITNOTEID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_CREDITNOTELINE (
    IPCREDITLINEID INTEGER,
    IPCREDITNOTEID INTEGER,
    IPLINETYPE INTEGER,
    IPOBJECTID INTEGER,
    IPOBJECTID2 INTEGER,
    IPOBJECTID3 INTEGER,
    IPEXAMOUNT DECIMAL(8,2),
    IPENTEREDASINC INTEGER,
    IPINVLINENO INTEGER,
    IPJOBDATE DATE,
    IPFLAGS INTEGER,
    IPDESCRIPTION VARCHAR(200))
RETURNS (
    OPCREDITLINEID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_CRMCONTACT (
    IPCONTACTID INTEGER,
    IPCUSTID INTEGER,
    IPCONTACTTIME TIMESTAMP,
    IPCOMMENTS CHAR(200),
    IPCOMMSMETHOD CHAR(30),
    IPFROMPERSON CHAR(50),
    IPTOPERSON CHAR(50))
RETURNS (
    OPCONTACTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_CUSTGROUP (
    IPCUSTID INTEGER,
    IPGROUPID INTEGER,
    IPINFO CHAR(50),
    IPADD INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_CUSTLASTPA (
    IPCUSTID INTEGER DEFAULT NULL,
    IPPAID INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_CUSTOMER (
    IPCUSTID INTEGER,
    IPNAME CHAR(50),
    IPTELEPHONE CHAR(14),
    IPADDRID INTEGER,
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10),
    IPMOBILE CHAR(14),
    IPCONTACT CHAR(30),
    IPEMAIL CHAR(50),
    IPFAX CHAR(14),
    IPABN CHAR(16),
    IPTERMSID INTEGER,
    IPONHOLD INTEGER,
    IPISACTIVE INTEGER,
    IPCOMMENTS CHAR(500),
    IPCUSTTYPE INTEGER,
    IPEXTERNAL CHAR(50),
    IPVERSIONNO INTEGER,
    IPINVPERIOD INTEGER,
    IPDEFPRICEAREAID INTEGER,
    IPINVOICEPERSITE INTEGER,
    IPDEFREFERRALID INTEGER,
    IPSALESMAN CHAR(30),
    IPCARDTYPEID INTEGER,
    IPCARDNUMBER CHAR(60),
    IPNAMEONCARD CHAR(40),
    IPEXPMONTH SMALLINT,
    IPEXPYEAR SMALLINT,
    IPSECURITYCODE CHAR(6),
    IPWANTSBDOWN SMALLINT,
    IPSALESMANID INTEGER,
    IPCUSTMODULES INTEGER,
    IPDOCSRECEIVED INTEGER,
    IPDIRNAME CHAR(40),
    IPCREDITLIMIT DECIMAL(14,2),
    IPWHENTOINVOICE INTEGER,
    IPISCUSTOMER INTEGER,
    IPISSUPPLIER INTEGER,
    IPSUPPLIERFLAGS INTEGER,
    IPRCTISINCE DATE,
    IPGSTREGISTERED DATE)
RETURNS (
    THECUSTID INTEGER,
    THEADDRID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_CUSTOMERPAYALLOCATION (
    IPID INTEGER,
    IPCUSTOMERPAYMENTID INTEGER,
    IPINVNO INTEGER,
    IPAMOUNT DECIMAL(15,2),
    IPCREDITNOTEID INTEGER)
RETURNS (
    OPID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_CUSTOMERPAYMENT (
    IPID INTEGER,
    IPCUSTID INTEGER,
    IPPAYMENTDATE DATE,
    IPPAYMENTMETHODID INTEGER,
    IPAMOUNT DECIMAL(15,2),
    IPBATCHID INTEGER,
    IPFLAGS INTEGER)
RETURNS (
    OPID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_CUSTOMERSITE (
    IPCUSTSITEID INTEGER,
    IPDESCRIPTION CHAR(50),
    IPCONTACT CHAR(50),
    IPPHONE CHAR(30),
    IPCUSTID INTEGER,
    IPISACTIVE INTEGER,
    IPCUSTREF CHAR(100),
    IPORDERID INTEGER,
    IPADDRID INTEGER,
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10),
    IPCOMMENTS CHAR(200),
    IPOFFICENOTES CHAR(200),
    IPWHENTOINVOICE INTEGER,
    IPDEPOTNO CHAR(12),
    IPEMAIL CHAR(50))
RETURNS (
    OPCUSTSITEID INTEGER,
    OPADDRID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_CUSTREGO (
    IPCUSTREGOID INTEGER,
    IPCUSTID INTEGER,
    IPREGO VARCHAR(100),
    IPSEARCHFOR VARCHAR(100))
RETURNS (
    OPCUSTREGOID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_CUSTRGPRICE (
    IPCUSTID INTEGER,
    IPRGID INTEGER,
    IPDELIVERED DECIMAL(9,2),
    IPPICKUP DECIMAL(9,2))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_CUSTSALESMAN (
    IPCUSTID INTEGER,
    IPSALESMANID INTEGER,
    IPSALESMANSTARTDATE DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_CUSTSITEPRICE (
    IPCUSTSITEID INTEGER,
    IPBINTYPEID INTEGER,
    IPPRICE DECIMAL(9,2),
    IPINCEX INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_DCKSAVEDOCKET (
    IPDOCKETID INTEGER,
    IPDOCKETNO INTEGER,
    IPCUSTID INTEGER,
    IPDOBINTYPEID INTEGER,
    IPJOBDATE DATE,
    IPCOMMENTS CHAR(200),
    IPJOBTIME CHAR(50),
    IPCUSTORDERNO CHAR(50),
    IPTIPREF CHAR(50),
    IPBINNO CHAR(50),
    IPDOCKETTYPE INTEGER,
    IPJOBTYPE INTEGER,
    IPCONTACT CHAR(50),
    IPCCTYPE INTEGER,
    IPNAMEONCARD CHAR(50),
    IPCARDNO1 CHAR(4),
    IPCARDNO2 CHAR(4),
    IPCARDNO3 CHAR(4),
    IPCARDNO4 CHAR(4),
    IPEXPMONTH INTEGER,
    IPEXPYEAR INTEGER,
    IPTIPAMOUNT DECIMAL(7,2),
    IPTIPSITEID INTEGER,
    IPEXGSTPRICE DECIMAL(6,2),
    IPINCGSTPRICE DECIMAL(6,2),
    IPDODRIVERID INTEGER,
    IPPUDRIVERID INTEGER,
    IPPAYCOMMENT CHAR(30),
    IPACREF CHAR(30),
    IPDD CHAR(40),
    IPPUBINTYPEID INTEGER,
    IPNEXTDKTID INTEGER,
    IPPREVDKTID INTEGER,
    IPPUDATE DATE,
    IPDKTCOVERS INTEGER,
    IPCCPROCESSED INTEGER,
    IPCOPUBINTYPEID INTEGER,
    IPADDRID INTEGER,
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10))
RETURNS (
    OPDOCKETID INTEGER,
    OPADDRID INTEGER,
    OPDOCKETNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_DEDUCTION (
    IPDEDUCTIONID INTEGER,
    IPDEDUCTIONITEMID INTEGER,
    IPQTY DECIMAL(8,2),
    IPCOMMENTS VARCHAR(500),
    IPKGWEIGHT DECIMAL(15,2),
    IPFIXEDCOST DECIMAL(15,2),
    IPCOSTPERKG DECIMAL(15,2),
    IPFLAGS INTEGER,
    IPSCRAPLOADID INTEGER,
    IPUSERID INTEGER)
RETURNS (
    OPDEDUCTIONID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_DEDUCTIONITEM (
    IPDEDUCTIONITEMSID INTEGER,
    IPDESCRIPTION VARCHAR(100),
    IPFLAGS INTEGER,
    IPACCOUNTNO VARCHAR(50))
RETURNS (
    OPDEDUCTIONITEMSID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_DEPT (
    IPDEPTID INTEGER,
    IPDEPTDESC CHAR(40),
    IPPERMISSIONS BIGINT)
RETURNS (
    OPDEPTID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_DRIVER (
    IPDRIVERID SMALLINT,
    IPSHORTNAME CHAR(8),
    IPFULLNAME CHAR(25),
    IPSTARTDATE DATE,
    IPFINISHDATE DATE,
    IPVERSIONNO INTEGER,
    IPMOBILE CHAR(20),
    IPJOBTYPEPRICES CHAR(150),
    IPCOPERCENT DECIMAL(6,2),
    IPADDJOBPERCENT DECIMAL(6,2),
    IPFLAGS INTEGER,
    IPLOGINNAME CHAR(50),
    IPENCPASSWORD CHAR(60),
    IPPINCOLOUR VARCHAR(50))
RETURNS (
    THEDRIVERID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_DRIVERLOGWEB (
    IPDRIVERID INTEGER,
    IPFORDATE DATE,
    IPREGO CHAR(15),
    IPSTARTKMS INTEGER,
    IPENDKMS INTEGER,
    IPSTARTTIME TIMESTAMP,
    IPENDTIME TIMESTAMP,
    IPFUELCOST DECIMAL(8,2),
    IPFUELLITRES DECIMAL(8,2))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_DRIVERRECBATCH (
    IPBATCHID INTEGER,
    IPDDATE DATE,
    IPDRIVERID INTEGER,
    IPCHEQTOT DECIMAL(18,2),
    IPCASHTOT DECIMAL(18,2),
    IPVERSIONNO INTEGER,
    IPBALANCED SMALLINT,
    IPSTARTTIME TIMESTAMP,
    IPENDTIME TIMESTAMP,
    IPTRUCKID INTEGER,
    IPSTARTKMS INTEGER,
    IPENDKMS INTEGER,
    IPFUELCOST DECIMAL(18,2),
    IPNUMTOLLS INTEGER,
    IPLOSTTIME DECIMAL(15,2),
    IPREPAIRS DECIMAL(15,2))
RETURNS (
    OPBATCHID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_DRIVERRECBATCHBAL (
    IPBATCHID INTEGER DEFAULT NULL,
    IPBALANCED SMALLINT DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_DRIVERRECLINE (
    IPBATCHID INTEGER = null,
    IPJOBID INTEGER = null,
    IPCHEQALLOC DECIMAL(18,2) = null,
    IPCASHALLOC DECIMAL(18,2) = null,
    IPDD CHAR(12) = null,
    IPPMID INTEGER = null,
    IPDOBINNOS CHAR(30) = null,
    IPPUBINNOS CHAR(30) = null,
    IPPUWEIGHT DECIMAL(5,3) = null,
    IPPUVOLUME DECIMAL(5,2) = null,
    IPSITEID INTEGER = null,
    IPPRICEAREAID INTEGER = null)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_EMAILLOG (
    IPLOGENTRYID INTEGER,
    IPOBJECTTYPE INTEGER,
    IPOBJECTID INTEGER,
    IPTIMESENT TIMESTAMP,
    IPRECIPIENT CHAR(50),
    IPREADRECT INTEGER,
    IPBYUSER INTEGER)
RETURNS (
    OPLOGENTRYID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_EXTCOMMENT (
    IPID INTEGER,
    IPNEXTID INTEGER,
    IPCOMMENTTYPE INTEGER,
    IPCOMMENT CHAR(200))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_FEE (
    IPFEEID INTEGER DEFAULT NULL,
    IPDESCRIPTION CHAR(20) DEFAULT NULL,
    IPAMOUNT DECIMAL(18,2) DEFAULT NULL,
    IPINCEX SMALLINT DEFAULT NULL,
    IPACCOUNTNO CHAR(12) DEFAULT NULL,
    IPITEMCODE CHAR(12) DEFAULT NULL,
    IPVERSIONNO INTEGER DEFAULT NULL)
RETURNS (
    THEFEEID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_HOLIDAY (
    IPDAYOFF DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_HOURSWORKED (
    IPHOURSWORKEDID INTEGER,
    IPJOBID INTEGER,
    IPWORKDATE DATE,
    IPSTARTTIME TIME,
    IPENDTIME TIME,
    IPNUMBEROFMEN INTEGER,
    IPJOBTITLEID INTEGER,
    IPFLAGS INTEGER,
    IPRATE DECIMAL(15,2))
RETURNS (
    OPHOURSWORKEDID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_INCLUDEDWEIGHT (
    IPPRICEAREAID INTEGER,
    IPBINTYPEID INTEGER,
    IPINCLTONS DECIMAL(6,2),
    IPINCLVOLUME DECIMAL(6,2))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_INVBATCH (
    IPINVBATCH INTEGER DEFAULT NULL,
    IPCREATEDDATE TIMESTAMP DEFAULT NULL,
    IPEXPORTEDDATE TIMESTAMP DEFAULT NULL,
    IPFILENAME CHAR(50) DEFAULT NULL,
    IPCOUNT SMALLINT DEFAULT NULL,
    IPINVPERIOD INTEGER DEFAULT NULL,
    IPREFID INTEGER DEFAULT NULL)
RETURNS (
    THEINVBATCH INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_INVCOMMENTS (
    IPINVNO INTEGER DEFAULT NULL,
    IPCOMMENTS CHAR(200) DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_INVITEMCODE (
    IPINVNO INTEGER DEFAULT NULL,
    IPLINENO INTEGER DEFAULT NULL,
    IPITEMCODE CHAR(12) DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_INVLINE (
    IPINVNO INTEGER = null,
    IPLINENO INTEGER = null,
    IPEXGSTVALUE DECIMAL(18,2) = null,
    IPGST DECIMAL(18,2) = null,
    IPTOTALVALUE DECIMAL(18,2) = null,
    IPLINETYPE SMALLINT = null,
    IPJOBID INTEGER = null,
    IPFEEID INTEGER = null,
    IPITEMCODE CHAR(12) = null,
    IPDOJOBID INTEGER = null)
RETURNS (
    ERRSTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_INVLINECHG (
    IPINVNO INTEGER DEFAULT NULL,
    IPINVLINENO INTEGER DEFAULT NULL,
    IPEXGST DECIMAL(18,2) DEFAULT NULL,
    IPGST DECIMAL(18,2) DEFAULT NULL,
    IPTOTAL DECIMAL(18,2) DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_INVLINECOMMENT (
    IPJOBID INTEGER,
    IPCOMMENT CHAR(201),
    IPINVNO INTEGER,
    IPINVLINENO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_INVOICE (
    IPINVBATCH INTEGER = null,
    IPCUSTID INTEGER = null,
    IPINVDATE DATE = null,
    IPDUEDATE DATE = null,
    IPBILLADDRID INTEGER = null,
    IPCOMMENTS CHAR(200) = null,
    IPDESIREDINVNO INTEGER = null)
RETURNS (
    OPINVNO INTEGER,
    ERRSTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_INVOICECHG (
    IPINVNO INTEGER DEFAULT NULL,
    IPNEWCUSTID INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_INVOICEPAIDDETS (
    IPINVNO INTEGER,
    IPPAIDINFULL INTEGER,
    IPPAIDSOFAR DECIMAL(18,2))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOB (
    IPJOBID INTEGER,
    IPJOBDATE DATE,
    IPORDERID INTEGER,
    IPBINTYPEIDOUT INTEGER,
    IPBINSOUT INTEGER,
    IPBINTYPEIDIN INTEGER,
    IPBINSIN INTEGER,
    IPDRIVERID INTEGER,
    IPCONTACT CHAR(30),
    IPJOBTIME CHAR(10),
    IPCOMMENTS CHAR(200),
    IPPRICEAREAID INTEGER,
    IPPRICE DECIMAL(18,4),
    IPINCEX SMALLINT,
    IPORDERDAYSEQNO SMALLINT,
    IPJOBTYPE SMALLINT,
    IPJOBSTATUS INTEGER,
    IPCUSTREFERENCE CHAR(100),
    IPVERSIONNO INTEGER,
    IPNJOBTIME TIMESTAMP,
    IPASBESTOSBINS INTEGER,
    IPLASTAMENDED TIMESTAMP,
    IPCUSTID INTEGER,
    IPINVNO INTEGER,
    IPINVLINENO INTEGER,
    IPINVOICEABLE INTEGER,
    IPOFFICENOTES CHAR(200),
    IPDOBINNOS CHAR(60),
    IPPUBINNOS CHAR(60),
    IPVWJOBSEQNO INTEGER,
    IPDESPATCHDOCKET CHAR(12) CHARACTER SET ASCII,
    IPFROMSITEID INTEGER,
    IPEPA CHAR(12) CHARACTER SET ASCII,
    IPWTD CHAR(12) CHARACTER SET ASCII,
    IPTOSITEID INTEGER,
    IPFULLE SMALLINT,
    IPPAYMETHODID INTEGER,
    IPBTRELOCATE INTEGER,
    IPRELOCCOUNT INTEGER,
    IPINVRELOC INTEGER,
    IPCLOBBER SMALLINT,
    IPBINFORMATOUT INTEGER,
    IPBINFORMATIN INTEGER,
    IPBINFORMATREL INTEGER,
    IPISPAID SMALLINT,
    IPMATERIALID INTEGER,
    IPUSERID INTEGER,
    IPTELEPHONE CHAR(30),
    IPPRIORITYLEVEL INTEGER,
    IPRGWEIGHT DECIMAL(6,2),
    IPRGID INTEGER,
    IPSITEBINS INTEGER,
    IPORDERPLACEDBY CHAR(30),
    IPPUWEIGHT DECIMAL(5,3),
    IPINTEGERDD INTEGER,
    IPWHENTOINVOICE INTEGER,
    IPTIPATSITEID INTEGER)
RETURNS (
    THEJOBID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_JOB2GPS (
    IPJOBID INTEGER,
    IPIMGNUMBER INTEGER,
    IPLAT DECIMAL(11,6),
    IPLONG DECIMAL(11,6))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOB2INVVALS (
    IPJOBID INTEGER,
    IPINVWEIGHT DECIMAL(5,3),
    IPINVRATE DECIMAL(6,2))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOB2PHOTOTIME (
    IPJOBID INTEGER,
    IPIMGNUMBER INTEGER,
    IPCOMMENT CHAR(100),
    IPTIMECAPTURED TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOB2WEB (
    IPJOBID INTEGER,
    IPTIMESIGNED TIMESTAMP,
    IPPERSONSIGNED CHAR(50),
    IPBINLOCATION CHAR(50),
    IPINSTRUCTEDBY CHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBBINCOMPANY (
    IPJOBID INTEGER,
    IPBINCOMPANYID INTEGER,
    IPBUYPRICE INTEGER,
    IPORDERDAYSEQNO INTEGER,
    IPJOBSTATUS INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBBINNOS (
    IPJOBID INTEGER = null,
    IPDIRECTION SMALLINT = null,
    IPBINNO CHAR(8) = null)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBDD (
    IPJOBID INTEGER = null,
    IPDDNO CHAR(12) CHARACTER SET ASCII = null,
    IPINTEGERDD INTEGER = null)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBDDEMAIL (
    IPJOBID INTEGER,
    IPDDEMAIL CHAR(60))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBDONEWEB (
    IPJOBID INTEGER,
    IPNEWSTATUS INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBDRIVER (
    IPJOBID INTEGER = null,
    IPNEWDRIVER INTEGER = null,
    IPSEQNO INTEGER = null)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBEPAWTD (
    IPJOBID INTEGER,
    IPEPA CHAR(12),
    IPWTD CHAR(12))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBEVENTTIMES (
    IPID INTEGER,
    IPEVENTTYPE INTEGER,
    IPEVENTTIME TIMESTAMP,
    IPOBJECTID INTEGER,
    IPINFO CHAR(60))
RETURNS (
    OPID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_JOBFEE (
    IPJOBID INTEGER = null,
    IPFEEID INTEGER = null,
    IPAMOUNT DECIMAL(18,2) = null,
    IPINCEX SMALLINT = null,
    IPINVNO INTEGER = null,
    IPINVLINENO INTEGER = null)
RETURNS (
    THEFEEID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_JOBINVOICEABLE (
    IPJOBID INTEGER DEFAULT NULL,
    IPINVOICEABLE INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBMV (
    IPJOBID INTEGER DEFAULT NULL,
    IPOLDMVDATE DATE DEFAULT NULL,
    IPNEWMVDATE DATE DEFAULT NULL,
    IPOLDSTATUS INTEGER DEFAULT NULL,
    IPNEWSTATUS INTEGER DEFAULT NULL,
    IPOLDFROMSITEID INTEGER DEFAULT NULL,
    IPNEWFROMSITEID INTEGER DEFAULT NULL,
    IPOLDTOSITEID INTEGER DEFAULT NULL,
    IPNEWTOSITEID INTEGER DEFAULT NULL,
    IPOLDFULLE SMALLINT DEFAULT NULL,
    IPNEWFULLE SMALLINT DEFAULT NULL,
    IPOLDBINTYPEIDOUT INTEGER DEFAULT NULL,
    IPOLDBINTYPEIDIN INTEGER DEFAULT NULL,
    IPBINTYPEIDOUT INTEGER DEFAULT NULL,
    IPBINTYPEIDIN INTEGER DEFAULT NULL,
    IPMOVEIDDO INTEGER DEFAULT NULL,
    IPMOVEIDPU INTEGER DEFAULT NULL,
    IPOLDBINSOUT INTEGER DEFAULT NULL,
    IPBINSOUT INTEGER DEFAULT NULL,
    IPOLDBINSIN INTEGER DEFAULT NULL,
    IPBINSIN INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBPAYDETAILS (
    IPDOJOBID INTEGER,
    IPPAYDETID INTEGER,
    IPPAYMETHODID INTEGER,
    IPREFERENCE CHAR(40),
    IPISPAID SMALLINT,
    IPNAMEONCARD CHAR(40),
    IPEXPMONTH SMALLINT,
    IPEXPYEAR SMALLINT,
    IPSECCODE CHAR(6),
    IPPUJOBID INTEGER,
    IPPAYAGAINST SMALLINT,
    IPCARDTYPEID INTEGER,
    IPCARDNUMBER CHAR(60),
    IPRGSOID INTEGER,
    IPRECEIVEDBY CHAR(40),
    IPRECEIVEDON DATE)
RETURNS (
    OPID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_JOBPAYMETHOD (
    IPJOBID INTEGER = null,
    IPOLDPMID INTEGER = null,
    IPNEWPMID INTEGER = null,
    IPOLDREF CHAR(20) = null,
    IPNEWREF CHAR(20) = null,
    IPOLDISPAID SMALLINT = null,
    IPNEWISPAID SMALLINT = null)
RETURNS (
    OPTHESTATUS INTEGER,
    OPTHEVERSIONNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_JOBPUINVOICEABLE (
    IPJOBID INTEGER,
    IPINVOICEME INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBPUWEIGHT (
    IPJOBID INTEGER,
    IPPUWEIGHT DECIMAL(5,3),
    IPINVOICEME INTEGER,
    IPSITEID INTEGER,
    IPPRICEAREAID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBRMBREAKDOWN (
    IPJOBID INTEGER,
    IPRMGROUPID INTEGER,
    IPPERCENT INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBSENTTODEVICE (
    IPJOBID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBSTATUS (
    IPJOBID INTEGER = null,
    IPOLDSTATUS INTEGER = null,
    IPNEWSTATUS INTEGER = null,
    IPORDERID INTEGER = null,
    IPDONE INTEGER = null)
RETURNS (
    OPTHESTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_JOBSWCODE (
    IPJOBSWCODEID INTEGER,
    IPJOBID INTEGER,
    IPSWCODESID INTEGER,
    IPUNITS DECIMAL(15,2),
    IPFLAGS INTEGER)
RETURNS (
    OPJOBSWCODEID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_JOBTIPDOCKET (
    IPTIPDOCKETID INTEGER,
    IPTIPDOCKETNO INTEGER,
    IPCTIPDOCKETNO CHAR(20),
    IPJOBID INTEGER,
    IPTIPSITEID INTEGER,
    IPTIPDATE DATE,
    IPM3TIPPED DECIMAL(8,2),
    IPWEIGHTTIPPED DECIMAL(8,2),
    IPRATE DECIMAL(8,2),
    IPFLAGS INTEGER,
    IPMATERIALID INTEGER)
RETURNS (
    OPTIPDOCKETID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_JOBWEB (
    IPJOBID INTEGER,
    IPDD CHAR(12),
    IPDOBINNOS CHAR(60),
    IPFROMSITEID INTEGER,
    IPPUBINNOS CHAR(60),
    IPTOSITEID INTEGER,
    IPMATERIALID INTEGER,
    IPRGWEIGHT DECIMAL(15,2),
    IPDRIVERID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_JOBWHENTOINVOICE (
    IPDOJOBID INTEGER,
    IPPUJOBID INTEGER,
    IPWHENTOINVOICE INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_LOADEDINVOICE (
    IPINVBATCH INTEGER DEFAULT NULL,
    IPINVNO INTEGER DEFAULT NULL,
    IPCUSTID INTEGER DEFAULT NULL,
    IPINVDATE DATE DEFAULT NULL,
    IPDUEDATE DATE DEFAULT NULL,
    IPBILLADDRID INTEGER DEFAULT NULL)
RETURNS (
    OPINVNO INTEGER,
    ERRSTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_LOADINVBATCH (
    IPINVBATCH INTEGER DEFAULT NULL,
    IPCREATEDDATE TIMESTAMP DEFAULT NULL,
    IPEXPORTEDDATE TIMESTAMP DEFAULT NULL,
    IPFILENAME CHAR(50) DEFAULT NULL,
    IPCOUNT SMALLINT DEFAULT NULL,
    IPINVPERIOD INTEGER DEFAULT NULL)
RETURNS (
    THEINVBATCH INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_MARKTIPASOKAYED (
    IPTIPID INTEGER,
    IPOKAYEDTPINVOICE SMALLINT,
    IPPRICE DECIMAL(15,2))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_MATERIAL (
    IPID INTEGER = null,
    IPDESCRIPTION CHAR(40) = null,
    IPPERTON DECIMAL(18,2) = null,
    IPPERCUBE DECIMAL(18,2) = null,
    IPACCOUNTNO CHAR(25) = null,
    IPITEMCODE CHAR(12) = null,
    IPWASTECATEGORYID INTEGER = null,
    IPFLAGS INTEGER = null,
    IPPINCOLOUR VARCHAR(255) = null,
    IPMINWEIGHT DECIMAL(6,2) = null,
    IPMINWEIGHTFEE DECIMAL(6,2) = null)
RETURNS (
    THEID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_MATERIALPRICE (
    IPTIPSITEID INTEGER,
    IPCUSTID INTEGER,
    IPMATERIALID INTEGER,
    IPDELIVEREDPRICE DECIMAL(15,2),
    IPPICKUPPRICE DECIMAL(15,2))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_MATERIALPRICE_PERM3 (
    IPTIPSITEID INTEGER,
    IPCUSTID INTEGER,
    IPMATERIALID INTEGER,
    IPM3PRICE DECIMAL(15,2))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_MATERIALPRICE_PERTON (
    IPTIPSITEID INTEGER,
    IPCUSTID INTEGER,
    IPMATERIALID INTEGER,
    IPPERTONPRICE DECIMAL(15,2))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_MLIST (
    IPID INTEGER,
    IPMLISTID INTEGER,
    IPDESC CHAR(50),
    IPDESC2 CHAR(50),
    IPDESC3 CHAR(30))
RETURNS (
    OPID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_MODULESETTINGS (
    IPMODULE INTEGER,
    IPSETTINGS BIGINT)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_MONEYCOLLECTEDEMAIL (
    IPJOBID INTEGER,
    IPEMAILADDR CHAR(60))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_MONEYCOLLECTEDWEB (
    IPJOBID INTEGER,
    IPPAYMETHODID1 INTEGER,
    IPAMOUNT1 DECIMAL(15,2),
    IPPAYMETHODID2 INTEGER,
    IPAMOUNT2 DECIMAL(15,2),
    IPEMAILADDR CHAR(60),
    IPFORDATE DATE,
    IPDRIVERID INTEGER,
    IPNAMEONCARD CHAR(40),
    IPISPAID SMALLINT,
    IPEXPMONTH SMALLINT,
    IPEXPYEAR SMALLINT,
    IPSECCODE CHAR(6),
    IPCARDTYPEID INTEGER,
    IPCARDNUMBER CHAR(60),
    IPSAVECCDETAILS INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_MORECOMMENTS (
    IPCOMMENTSID INTEGER,
    IPCOMMENTS CHAR(2000),
    IPCRMCONTACTID INTEGER)
RETURNS (
    OPMORECOMMENTSID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_MULTIDAYRUNSHEET (
    IPID INTEGER,
    IPCREATEDON DATE,
    IPRUNNAME CHAR(50),
    IPDRIVERID INTEGER,
    IPFLAGS INTEGER,
    IPACTIVE INTEGER)
RETURNS (
    OPID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_MULTIDAYRUNSHEETJOB (
    IPRUNSHEETID INTEGER,
    IPSORTORDER INTEGER,
    IPJOBID INTEGER)
RETURNS (
    OPID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_NEWDDNO (
    IPNEWDDNO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_NEWFLDDNO (
    IPNEWFLDDNO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_NEWINVNO (
    IPNEWINVNO INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_NEWOUTGOINGDKTNO (
    IPNEWDDNO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_NEWPINVNO (
    IPNEWINVNO INTEGER = null)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_NEWTIPDDNO (
    IPDDSEQUENCE INTEGER,
    IPNEWTIPDDNO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_NOORDER (
    IPID INTEGER,
    IPDDATE DATE,
    IPTTIME TIMESTAMP,
    IPUSERID INTEGER,
    IPREASONID INTEGER,
    IPREASONTEXT CHAR(50),
    IPREFERRALID INTEGER,
    IPSUBURB CHAR(50),
    IPNOORDTYPE INTEGER,
    IPCOMMENT CHAR(100),
    IPPRICEQUOTED DECIMAL(10,2),
    IPBINTYPEID INTEGER,
    IPPRICEAREAID INTEGER,
    IPBINCOUNT INTEGER,
    IPFLAGS INTEGER)
RETURNS (
    OPID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_ORDER (
    IPORDERID INTEGER,
    IPCUSTID INTEGER,
    IPINVTYPE INTEGER,
    IPBYBINNO INTEGER,
    IPCOMPLETE INTEGER,
    IPADDRID INTEGER,
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10),
    IPBILLADDRID INTEGER,
    IPBILLADDRESS1 CHAR(30),
    IPBILLADDRESS2 CHAR(30),
    IPBILLTOWN CHAR(30),
    IPBILLSTATE CHAR(30),
    IPBILLPOSTCODE CHAR(10),
    IPVERSIONNO INTEGER,
    IPCUSTTYPE INTEGER,
    IPREFERRALID INTEGER,
    IPFIRSTJOB DATE,
    IPWKNOFIRST INTEGER,
    IPWKNOLAST INTEGER,
    IPCLOBBER SMALLINT,
    IPFAXNO CHAR(30),
    IPEMAIL CHAR(50),
    IPUSERID INTEGER,
    IPCUSTSITEID INTEGER,
    IPJOBNO CHAR(20))
RETURNS (
    OPTHEORDERID INTEGER,
    OPTHEADDRID INTEGER,
    OPTHEBILLADDRID INTEGER,
    OPTHEVERSIONNO INTEGER,
    OPTHESTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_ORDERPLACEDBY (
    IPJOBID INTEGER,
    IPPLACEDBY CHAR(30),
    IPENTITYID INTEGER,
    IPUSERID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_PAYMETHOD (
    IPPAYMETHODID INTEGER,
    IPDESCRIPTION CHAR(6),
    IPACCT SMALLINT,
    IPMEANSPAID SMALLINT,
    IPVERSIONNO INTEGER,
    IPISCHEQUE SMALLINT,
    IPISCASH SMALLINT,
    IPSURCHARGE DECIMAL(4,1))
RETURNS (
    OPPAYMETHODID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_PINVBATCH (
    IPINVBATCH INTEGER = null,
    IPCREATEDDATE TIMESTAMP = null,
    IPEXPORTEDDATE TIMESTAMP = null,
    IPFILENAME CHAR(50) = null,
    IPCOUNT SMALLINT = null,
    IPINVPERIOD INTEGER = null,
    IPREFID INTEGER = null,
    IPBATCHTYPE INTEGER = null)
RETURNS (
    THEINVBATCH INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_PINVLINE (
    IPPINVID INTEGER = null,
    IPLINENO INTEGER = null,
    IPEXGSTVALUE DECIMAL(18,2) = null,
    IPGST DECIMAL(18,2) = null,
    IPTOTALVALUE DECIMAL(18,2) = null,
    IPLINETYPE SMALLINT = null,
    IPJOBID INTEGER = null,
    IPFEEID INTEGER = null,
    IPITEMCODE CHAR(12) = null,
    IPINVNO INTEGER = null)
RETURNS (
    ERRSTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_PINVOICE (
    IPINVBATCH INTEGER = null,
    IPCUSTID INTEGER = null,
    IPINVDATE DATE = null,
    IPDUEDATE DATE = null,
    IPBILLADDRID INTEGER = null,
    IPCOMMENTS CHAR(200) = null,
    IPDESIREDINVNO INTEGER = null)
RETURNS (
    OPPINVID INTEGER,
    OPINVNO INTEGER,
    ERRSTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_PRICE (
    IPCUSTID INTEGER DEFAULT NULL,
    IPPRICEAREAID INTEGER DEFAULT NULL,
    IPBINTYPEID INTEGER DEFAULT NULL,
    IPPRICE DECIMAL(18,2) DEFAULT NULL,
    IPFIXED SMALLINT DEFAULT NULL,
    IPOLDPRICE DECIMAL(18,2) DEFAULT NULL,
    IPOLDFIXED SMALLINT DEFAULT NULL,
    IPCLOBBER SMALLINT DEFAULT NULL,
    IPINCEX SMALLINT DEFAULT NULL,
    IPOLDINCEX SMALLINT DEFAULT NULL)
RETURNS (
    THESTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_PRICEAREA (
    IPPRICEAREAID INTEGER,
    IPDESCRIPTION CHAR(30),
    IPDEFAULTAREA INTEGER,
    IPASBESTOSAREA INTEGER,
    IPVERSIONNO INTEGER,
    IPSORTORDER INTEGER,
    IPACTIVE INTEGER,
    IPCHARGESFORPU INTEGER)
RETURNS (
    THEPRICEAREAID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_RECYCLEDGOOD (
    IPRGID INTEGER,
    IPDESCRIPTION CHAR(40),
    IPDELIVEREDPRICE DECIMAL(8,2),
    IPPUPRICE DECIMAL(8,2),
    IPACCOUNTNO CHAR(25),
    IPITEMCODE CHAR(12),
    IPSHORTDESC CHAR(10))
RETURNS (
    OPRGID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_REFERRAL (
    IPREFERRALID INTEGER DEFAULT NULL,
    IPDESCRIPTION CHAR(20) DEFAULT NULL,
    IPVERSIONNO INTEGER DEFAULT NULL)
RETURNS (
    THEREFERRALID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_RGROORDER (
    IPORDERID INTEGER,
    IPRGSOID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_RGSORDER (
    IPRGSOID INTEGER,
    IPORDERNO INTEGER,
    IPCUSTID INTEGER,
    IPRGID INTEGER,
    IPTONS DECIMAL(8,2),
    IPDELIVERYTYPE SMALLINT,
    IPINCPRICE DECIMAL(8,2),
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10),
    IPDRIVERNOTES CHAR(200),
    IPOFFICENOTES CHAR(200),
    IPCUSTREF CHAR(20),
    IPCONTACT CHAR(30),
    IPPHONE CHAR(30),
    IPCOMPLETE SMALLINT,
    IPEMAIL CHAR(50),
    IPFAX CHAR(30),
    IPUSERID INTEGER,
    IPORDERID INTEGER,
    IPDELIVERYDATE DATE,
    IPMYOBJOBNO CHAR(50),
    IPGROSSWEIGHT DECIMAL(8,2),
    IPTAREWEIGHT DECIMAL(8,2),
    IPSURCHARGE DECIMAL(6,2),
    IPCASHROUNDING DECIMAL(5,2))
RETURNS (
    OPRGSOID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_RMGROUP (
    IPID INTEGER,
    IPDESCRIPTION CHAR(40),
    IPSHORTDESC CHAR(60),
    IPTOTONS DECIMAL(8,3))
RETURNS (
    THEID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_SALESMAN (
    IPSALESMANID INTEGER,
    IPNAME CHAR(40),
    IPTELEPHONE CHAR(12),
    IPEMAIL CHAR(50),
    IPISACTIVE INTEGER,
    IPINITPERCUBE DECIMAL(6,2),
    IPPERCUBE DECIMAL(6,2),
    IPINITPERCENT DECIMAL(6,2),
    IPPERCENT DECIMAL(6,2))
RETURNS (
    OPSALESMANID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_SITE (
    IPSITEID INTEGER = null,
    IPDESCRIPTION CHAR(20) = null,
    IPTIPSITE INTEGER = null,
    IPVERSIONNO INTEGER = null,
    IPDEFAULTSITE INTEGER = null,
    IPINCLUDEDWEIGHT DECIMAL(5,3) = null,
    IPINCLUDEDVOLUME DECIMAL(4,1) = null,
    IPPRICEPERTON DECIMAL(6,2) = null,
    IPPRICEPERCUBE DECIMAL(6,2) = null)
RETURNS (
    THESITEID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_SITEBININVOICE (
    IPJOBID INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE,
    IPBINTYPEID INTEGER,
    IPBINCOUNT INTEGER,
    IPINVNO INTEGER,
    IPINVLINENO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_SITEFOREMAN (
    IPCUSTSITEID INTEGER,
    IPFOREMANID INTEGER,
    IPNAME CHAR(40),
    IPCONTACTNUMBER CHAR(30))
RETURNS (
    OPFOREMANID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_SMS (
    IPSMSTYPE SMALLINT DEFAULT NULL,
    IPID INTEGER DEFAULT NULL,
    IPMESSAGE CHAR(160) DEFAULT NULL,
    IPSUCCESSFUL INTEGER DEFAULT NULL,
    IPMOBILE CHAR(20) DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_SMSCOUNT (
    IPFORDATE DATE,
    IPMSGCOUNT INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_SMSTEMPLATE (
    IPID INTEGER DEFAULT NULL,
    IPDESCRIPTION CHAR(30) CHARACTER SET ASCII DEFAULT NULL,
    IPTHETEXT CHAR(170) CHARACTER SET ASCII DEFAULT NULL)
RETURNS (
    THEID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_STAKE_BINLINE (
    IPDATE DATE DEFAULT NULL,
    IPBINTYPEID INTEGER DEFAULT NULL,
    IPTOTALBINS INTEGER DEFAULT NULL,
    IPBINSAVAIL INTEGER DEFAULT NULL,
    IPSITEID INTEGER DEFAULT NULL,
    IPBINSAVAILEMPTY INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_STAKE_BINTYPE (
    IPDATE DATE DEFAULT NULL,
    IPCOMMENT CHAR(40) DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_STREET (
    IPSTREETID INTEGER,
    IPSTREETNAME CHAR(45),
    IPMAPREF CHAR(5),
    IPPAGENO INTEGER,
    IPSUBURBID INTEGER,
    IPDESIGNATOR CHAR(3))
RETURNS (
    OPSTREETID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_SUBURB (
    IPSUBURB VARCHAR(40) CHARACTER SET ASCII,
    IPPOSTCODE VARCHAR(5) CHARACTER SET ASCII,
    IPSTATE VARCHAR(30) CHARACTER SET ASCII,
    IPORIGSUBURB VARCHAR(40) CHARACTER SET ASCII,
    IPORIGPOSTCODE VARCHAR(5) CHARACTER SET ASCII,
    IPORIGSTATE VARCHAR(30) CHARACTER SET ASCII,
    IPLONG BIGINT,
    IPLAT BIGINT,
    IPFIREANTAREA INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_SWCODE (
    IPSWCODEID INTEGER,
    IPSWCODENO CHAR(12),
    IPDESCRIPTION CHAR(150),
    IPSERVICETYPE CHAR(40),
    IPBINTYPEID INTEGER,
    IPBINFORMATID INTEGER,
    IPPRICEPER INTEGER,
    IPRATE DECIMAL(8,2),
    IPFLAGS INTEGER,
    IPSORTORDER INTEGER)
RETURNS (
    OPSWCODEID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_SWORDER (
    IPSWORDERID INTEGER,
    IPREQUESTDATE DATE,
    IPORDEREDSWCODEID INTEGER,
    IPDELIVEREDSWCODEID INTEGER,
    IPDEPTCODE CHAR(12),
    IPMAXIMO CHAR(30),
    IPPROJECTID CHAR(30),
    IPBINSORDERED INTEGER,
    IPJOBID INTEGER,
    IPCUSTID INTEGER,
    IPORDERID INTEGER,
    IPDEPOTNO CHAR(12),
    IPREQUESTORPH CHAR(30),
    IPJOBTYPE INTEGER,
    IPREQUESTOR CHAR(30),
    IPSITEPERSON CHAR(30),
    IPSITENUMBER CHAR(30),
    IPUNITS DECIMAL(15,2))
RETURNS (
    OPSWORDERID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_SYSDATA (
    IPSUBJECT INTEGER,
    IPDATA CHAR(200),
    IPDTIME TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_SYSFLAG (
    IPSUBJECT CHAR(25) DEFAULT NULL,
    IPVALUE CHAR(140) DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_TAREWT (
    IPREGO CHAR(20),
    IPTAREWT DECIMAL(12,2),
    IPTRAILERREGO CHAR(20))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_TIP (
    IPTIPID INTEGER,
    IPDDATE DATE,
    IPTIMEIN TIMESTAMP,
    IPTIMEOUT TIMESTAMP,
    IPCUSTID INTEGER,
    IPREGO CHAR(20),
    IPBYCUBIC SMALLINT,
    IPCUBICMETRES DECIMAL(18,1),
    IPGROSSWEIGHT DECIMAL(18,2),
    IPTAREWEIGHT DECIMAL(18,2),
    IPPAYMETHODID INTEGER,
    IPPRICE DECIMAL(18,2),
    IPPAYMENTID INTEGER,
    IPINVNO INTEGER,
    IPINVLINENO INTEGER,
    IPISPAID SMALLINT,
    IPMATERIALID INTEGER,
    IPVERSIONNO INTEGER,
    IPTIPSITEID INTEGER,
    IPCLOBBER SMALLINT,
    IPCOMMENTS CHAR(200),
    IPPAYREF CHAR(20),
    IPGROSSWEIGHT2 DECIMAL(18,2),
    IPCAMEFROM CHAR(30),
    IPDUMPEDIN CHAR(30),
    IPOKAYEDTOINVOICE SMALLINT,
    IPTAREWEIGHT2 DECIMAL(12,2),
    IPTRAILERREGO CHAR(20),
    IPTIPDDNO INTEGER,
    IPMYOBJOBNO CHAR(30),
    IPCUSTREF CHAR(30),
    IPBINJOBID INTEGER,
    IPEPAENTRYPURPOSEID INTEGER,
    IPEPASUBWASTESTREAMID INTEGER,
    IPEPAVEHICLETYPECODE CHAR(20),
    IPEPAWASTESTREAMID INTEGER,
    IPEPAWASTETYPEID INTEGER,
    IPEPAAPPROVALNUMBER CHAR(30),
    IPFLAGS INTEGER,
    IPFIXEDVALUEEX DECIMAL(8,2),
    IPFIXEDVALUEGST DECIMAL(8,2),
    IPSURCHARGE DECIMAL(6,2),
    IPCASHROUNDING DECIMAL(5,2))
RETURNS (
    OPTHETIPID INTEGER,
    OPTHEVERSIONNO INTEGER,
    OPTHESTATUS INTEGER,
    OPTIPDDNO INTEGER,
    OPTRANNO INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_TIPFEE (
    IPID INTEGER DEFAULT NULL,
    IPFEEID INTEGER DEFAULT NULL,
    IPTIPID INTEGER DEFAULT NULL,
    IPEXAMOUNT DECIMAL(18,2) DEFAULT NULL,
    IPINCEX SMALLINT DEFAULT NULL,
    IPINVNO INTEGER DEFAULT NULL,
    IPINVLINENO INTEGER DEFAULT NULL,
    IPINCAMOUNT DECIMAL(18,2) DEFAULT NULL)
RETURNS (
    OPTHEID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_TIPOUTGOING (
    IPTIPOUTGOINGID INTEGER,
    IPDDATE DATE,
    IPOUTMATERIALID INTEGER,
    IPGROSSWEIGHT DECIMAL(8,2),
    IPTAREWEIGHT DECIMAL(8,2),
    IPCUBICMETRES DECIMAL(5,2),
    IPTIMEOUT TIMESTAMP,
    IPDOCKETNO INTEGER,
    IPTIPSITEID INTEGER,
    IPREGO CHAR(20),
    IPTOTIPSITEID INTEGER,
    IPFLAGS INTEGER,
    IPMYOBJOBNO CHAR(50))
RETURNS (
    OPTIPOUTGOINGID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_TIPSITE (
    IPID INTEGER,
    IPDESCRIPTION CHAR(40),
    IPRULES CHAR(1000),
    IPDEFTOTIPSITEID INTEGER,
    IPFLAGS INTEGER,
    IPEPLNUMBER VARCHAR(40))
RETURNS (
    THEID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_TRUCK (
    IPID INTEGER = null,
    IPDESCRIPTION CHAR(30) CHARACTER SET ASCII = null,
    IPVEHICLEID CHAR(12) CHARACTER SET ASCII = null)
RETURNS (
    THEID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_TRUCKANDDOG2 (
    IPTRUCKANDDOGID INTEGER,
    IPJOBDATE DATE,
    IPTRAVELFROM CHAR(50),
    IPTRAVELTO CHAR(50),
    IPDOCKETNO CHAR(20),
    IPCOMMENT CHAR(200),
    IPDRIVERID INTEGER,
    IPJOBSTATUS INTEGER,
    IPDOGTRUCKID INTEGER,
    IPORDERDAYSEQNO INTEGER)
RETURNS (
    OPTRUCKANDDOGID INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_TRUCKDRIVER (
    IPDDATE DATE DEFAULT NULL,
    IPDRIVERID INTEGER DEFAULT NULL,
    IPTRUCKID INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_USER (
    IPUSERID INTEGER,
    IPUSERNAME CHAR(50),
    IPFULLNAME CHAR(50),
    IPISACTIVE SMALLINT,
    IPENCPASSWORD CHAR(60),
    IPDEPTID INTEGER,
    IPPERMISSIONS BIGINT,
    IPFONTFORDEL CHAR(50),
    IPFONTFORCO CHAR(50),
    IPFONTFORPU CHAR(50),
    IPFONTFORWL CHAR(50))
RETURNS (
    ERRORCODE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SPSAVE_WSSESSION (
    IPSESSIONID INTEGER,
    IPDRIVERID INTEGER,
    IPLOGINTIME TIMESTAMP,
    IPLASTACCESS TIMESTAMP)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_WSTEXT (
    IPWSTEXTID INTEGER,
    IPTHETEXT CHAR(10000))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSAVE_XVERSIONNO (
    IPVERSIONNO INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSET_EVENT (
    IPEVENT CHAR(12) DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE SPSET_JOBBINS (
    IPJOBID INTEGER DEFAULT NULL)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE TESTSPEED
RETURNS (
    LCOUNT INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE UPD_EVENT (
    IPEVENT CHAR(20) DEFAULT NULL)
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE ADJUSTSITESOH (
    IPBINTYPEID INTEGER = null,
    IPSITEID INTEGER = null,
    IPBINSFULL INTEGER = null,
    IPBINSEMPTY INTEGER = null)
AS
BEGIN
  update sitesoh
       set binsfull = binsfull + :ipbinsfull,
           binsempty = binsempty + :ipbinsempty
      where sitesoh.SITEID = :ipsiteid
        and SITESOH.BINTYPEID = :ipbintypeid;
  if (row_count = 0) then
     insert into SITESOH
       (SITESOH.bintypeid,
        SITESOH.SITEID,
        SITESOH.BINSEMPTY,
        SITESOH.BINSFULL)
       values
       (:ipbintypeid,
        :ipsiteid,
        :ipbinsempty,
        :ipbinsfull);
END^


ALTER PROCEDURE GET_ORDER (
    IPORDERID INTEGER = null)
RETURNS (
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPADDRID INTEGER,
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPBILLADDRID INTEGER,
    OPBILLADDRESS1 CHAR(30),
    OPBILLADDRESS2 CHAR(30),
    OPBILLTOWN CHAR(30),
    OPBILLSTATE CHAR(30),
    OPBILLPOSTCODE CHAR(10))
AS
BEGIN
for SELECT 
   sorder.orderid, sorder.contact, sorder.complete, sorder.invtype, sorder.bybinno, sorder.versionno, SORDER.CUSTTYPE, sorder.REFERRALID, sorder.FIRSTJOBDATE ,
  address.addrid, address.address1, address.address2, address.town, address.state, address.postcode ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid ,
  custaddr.addrid, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode ,
  billaddr.addrid, billaddr.address1, billaddr.address2, billaddr.town, billaddr.state, billaddr.postcode
FROM SORDER
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
  left outer join address as billaddr on sorder.billaddrid = billaddr.addrid
where orderid = :iporderid
INTO
     :opordorderid, :opordcontact, :opordcomplete, :opordinvtype, :opordbybinno, :opordversionno, :opordcusttype, :opordreferralid, :opordfirstjob ,
    :opaddrid, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode ,
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea ,
    :opcustaddrid, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode ,
   :opbilladdrid, :opbilladdress1, :opbilladdress2, :opbilltown, :opbillstate, :opbillpostcode 
     do
SUSPEND;
END^


ALTER PROCEDURE MYGET_BINCOMPANIES
RETURNS (
    OPBINCOMPANYID INTEGER,
    OPCOMPANYNAME CHAR(50),
    OPCOMMENTS CHAR(200),
    OPEMAIL CHAR(50),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for select
bincompany.bincompanyid,
bincompany.companyname,
bincompany.comments,
bincompany.email,
address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude 
FROM bincompany
  left outer join address on bincompany.addrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
INTO 
  :opbincompanyid,
  :opcompanyname,
  :opcomments,
  :opemail,
  :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude 
  DO suspend;
END^


ALTER PROCEDURE MYGET_BINMOVEMENTS (
    IPDATEFROM DATE,
    IPDATETO DATE)
RETURNS (
    OPCBINNO VARCHAR(10),
    OPCOUNT VARCHAR(10))
AS
begin
    for
  select JOBBINS.cbinno, count(*)
    from jobbins
    left outer join job on job.jobid = jobbins.jobid
    where job.jobdate between :ipdatefrom
    and :ipdateto
    group by jobbins.cbinno
    into :opcbinno, :opcount
  do
  begin
    suspend;
  end
END^


ALTER PROCEDURE MYGET_CRMCONTACTS (
    IPCUSTID INTEGER DEFAULT NULL,
    IPFORDATE DATE DEFAULT NULL)
RETURNS (
    OPCONTACTID INTEGER,
    OPCONTACTTIME TIMESTAMP,
    OPCOMMENTS CHAR(200),
    OPFROMPERSON CHAR(50),
    OPTOPERSON CHAR(50),
    OPCOMMSMETHOD CHAR(30),
    OPMORECOMMENTSID INTEGER,
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
if (ipcustid > 0)
then for SELECT
  crmcontacts.contactid,
  crmcontacts.contacttime,
  crmcontacts.comments,
  crmcontacts.fromperson,
  crmcontacts.toperson,
  crmcontacts.commsmethod,
  crmcontacts.morecommentsid,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM crmcontacts
left outer join customer on crmcontacts.custid = customer.custid
left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where crmcontacts.custid = :ipcustid
INTO 
  :opcontactid,
  :opcontacttime,
  :opcomments,
  :opfromperson,
  :optoperson,
  :opcommsmethod,
  :opmorecommentsid,
  :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
do 
  SUSPEND;
else
for SELECT
  crmcontacts.contactid,
  crmcontacts.contacttime,
  crmcontacts.comments,
  crmcontacts.fromperson,
  crmcontacts.toperson,
  crmcontacts.commsmethod,
  crmcontacts.morecommentsid,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM crmcontacts
left outer join customer on crmcontacts.custid = customer.custid
left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where crmcontacts.ddate = :ipfordate
INTO 
  :opcontactid,
  :opcontacttime,
  :opcomments,
  :opfromperson,
  :optoperson,
  :opcommsmethod,
  :opmorecommentsid,
  :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
do 
  SUSPEND;

END^


ALTER PROCEDURE MYGET_CRMCUSTSFORSM (
    IPSALESMANID INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
declare variable ldate date;
BEGIN

for select customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
         custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
    from customer
    left outer join address as custaddr on customer.custaddrid = custaddr.addrid
    where customer.salesmanid = :ipsalesmanid
   into
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
  do  suspend;

END^


ALTER PROCEDURE MYGET_CRMNEWCUSTS (
    IPSALESMANID INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(50),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
declare variable LDATE date;
BEGIN

for select customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
         custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
    from customer
    left outer join address as custaddr on customer.custaddrid = custaddr.addrid
    where customer.salesmanid = :ipsalesmanid
   into
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
do begin

  for select first 1 job.jobdate
           from job
          where job.custid = :opcstcustid
            plan (job index (IDX_CUST)) 
          into :LDATE
  do begin
     if (LDATE >= ipfromdate and LDATE <= iptodate)
    then suspend;
 end
end
END^


ALTER PROCEDURE MYGET_CRMNOORDERS (
    IPSALESMANID INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
declare variable lcount integer;
BEGIN

for select customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
         custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
    from customer
    left outer join address as custaddr on customer.custaddrid = custaddr.addrid
    where customer.salesmanid = :ipsalesmanid
   into
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
do begin

  select first 1 count(job.jobid)
           from job
          where job.custid = :opcstcustid
              and job.jobdate >= :ipfromdate
              and job.jobdate <= :iptodate
          into :LCOUNT;
  if (LCOUNT = 0)  /* no orders */
  then suspend;
end

END^


ALTER PROCEDURE MYGET_CUSTBYNAME (
    IPNAME CHAR(50),
    IPJUSTACTIVE INTEGER)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM customer
left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where lcname = lower(:ipname)
  and (:ipjustactive = 0 or
           customer.isactive = 1)
INTO
  :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
do SUSPEND;
END^


ALTER PROCEDURE MYGET_CUSTHISTBASIC (
    IPCUSTID INTEGER)
RETURNS (
    OPJOBDATE DATE,
    OPBINTYPEOUTID INTEGER,
    OPDRIVERID INTEGER,
    OPPAYMETHODID INTEGER,
    OPSITECONTACT CHAR(30),
    OPSITETELEPHONE CHAR(30),
    OPORDERID INTEGER,
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
/* this is for the customer history icon that is on the dlgenterorder screen */
for SELECT
  job.jobdate,
  job.bintypeid_out,
  job.driverid,
  jobpaydetails.paymethodid,
  job.contact,
  job.telephone,
  job.orderid,
  address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, address.gpslatitude, address.gpslongitude 
FROM JOB
  left outer join sorder on job.orderid = sorder.orderid
  left outer join address on sorder.deladdrid = address.addrid
  left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
where job.custid = :ipcustid
    and job.bintypeid_out > 0  /* just deliveries and COs */
INTO
    :opjobdate,
    :opbintypeoutid,
    :opdriverid,
    :oppaymethodid,
    :opsitecontact,
    :opsitetelephone,
    :oporderid,
    :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :opgpslatitude, :opgpslongitude 
     do  SUSPEND;
END^


ALTER PROCEDURE MYGET_CUSTINVOICES (
    IPCUSTID INTEGER,
    IPJUSTOPEN INTEGER)
RETURNS (
    OPINVINVNO INTEGER,
    OPINVINVBATCHNO INTEGER,
    OPINVINVDATE DATE,
    OPINVDUEDATE DATE,
    OPINVBILLADDRID INTEGER,
    OPINVEXGST FLOAT,
    OPINVGST FLOAT,
    OPINVTOTAL FLOAT,
    OPINVCOMMENTS CHAR(200),
    OPINVPAIDINFULL INTEGER,
    OPINVPAIDSOFAR DECIMAL(18,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
if (ipjustopen = 0)
then begin
  for SELECT
  invno, invbatchid, invdate, duedate, billaddrid, invoice.comments, invoice.paidinfull, invoice.paidsofar  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
  FROM invoice
  left outer join customer on invoice.custid = customer.custid
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid 
  where invoice.custid = :ipcustid
  order by invoice.invno descending
  INTO 
  :opinvinvno, :opinvinvbatchno, :opinvinvdate, :opinvduedate, :opinvbilladdrid, :opinvcomments, :opinvpaidinfull, :opinvpaidsofar  ,
  :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
  do BEGIN
    select sum(invline.exgstvalue),
         sum(invline.gst),
         sum(invline.totalvalue)
         from INVLINE
         where invline.invno = :opinvinvno
         into opinvexgst, opinvgst, opinvtotal;
    SUSPEND;
  end
end /* of getting all invoices */
else begin
 for SELECT
  invno, invbatchid, invdate, duedate, billaddrid, invoice.comments, invoice.paidinfull, invoice.paidsofar 
  FROM invoice
  where invoice.custid = :ipcustid
      and invoice.paidinfull = 0
  INTO 
  :opinvinvno, :opinvinvbatchno, :opinvinvdate, :opinvduedate, :opinvbilladdrid, :opinvcomments, :opinvpaidinfull, :opinvpaidsofar 
  do BEGIN
    select sum(invline.exgstvalue),
         sum(invline.gst),
         sum(invline.totalvalue)
         from INVLINE
         where invline.invno = :opinvinvno
         into opinvexgst, opinvgst, opinvtotal;
    SUSPEND;
  end
end /* of getting just open invoices */
END^


ALTER PROCEDURE MYGET_CUSTOMER (
    IPCUSTID INTEGER)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM customer
left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where custid = :ipcustid
INTO
 :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
do
  SUSPEND;
END^


ALTER PROCEDURE MYGET_CUSTOMERS (
    IPWHATTYPE INTEGER,
    IPJUSTLATEST INTEGER)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
if (ipjustlatest = 0) then begin
  /* return them all */
for SELECT
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM customer
left outer join address as custaddr on customer.custaddrid = custaddr.addrid
INTO
 :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
do begin
  if (ipwhattype = 1 or  /* all customers */

      (ipwhattype = 3 and  /* skip customers */
        (opcustomermodules = 1 or opcustomermodules = 3)) or

      (ipwhattype = 2 and   /* just tip customers */
        (opcustomermodules = 2 or opcustomermodules = 3)) or

      (ipwhattype = 4 and /* just account customers */
        (opcstcusttype = 1 or opcstcusttype = 2)) or

      (ipwhattype = 5 and /* just cash customers */
        opcstcusttype = 0)
    )
    then SUSPEND;
end
end
else begin
  /* return just the customers changed today */
  for SELECT
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM customer
left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where customer.lastamended = current_date
INTO
 :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
do begin
  if (ipwhattype = 1 or  /* all customers */

      (ipwhattype = 3 and  /* skip customers */
        (opcustomermodules = 1 or opcustomermodules = 3)) or

      (ipwhattype = 2 and   /* just tip customers */
        (opcustomermodules = 2 or opcustomermodules = 3)) or

      (ipwhattype = 4 and /* just account customers */
        (opcstcusttype = 1 or opcstcusttype = 2)) or

      (ipwhattype = 5 and /* just cash customers */
        opcstcusttype = 0)
    )
    then SUSPEND;
end
end
END^


ALTER PROCEDURE MYGET_CUSTOMERS2 (
    IPWHATTYPE INTEGER,
    IPJUSTLATEST INTEGER)
RETURNS (
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
if (ipjustlatest = 0) then begin
  /* return them all */
for SELECT
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM customer
left outer join address as custaddr on customer.custaddrid = custaddr.addrid
INTO
 :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
do begin
  if (ipwhattype = 1 or  /* all customers */

      (ipwhattype = 3 and  /* skip customers */
        (opcustomermodules = 1 or opcustomermodules = 3)) or

      (ipwhattype = 2 and   /* just tip customers */
        (opcustomermodules = 2 or opcustomermodules = 3)) or

      (ipwhattype = 4 and /* just account customers */
        (opcstcusttype = 1 or opcstcusttype = 2)) or

      (ipwhattype = 5 and /* just cash customers */
        opcstcusttype = 0)
    )
    then SUSPEND;
end
end
else begin
  /* return just the customers changed today */
  for SELECT
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM customer
left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where customer.lastamended = current_date
INTO
 :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
do begin
  if (ipwhattype = 1 or  /* all customers */

      (ipwhattype = 3 and  /* skip customers */
        (opcustomermodules = 1 or opcustomermodules = 3)) or

      (ipwhattype = 2 and   /* just tip customers */
        (opcustomermodules = 2 or opcustomermodules = 3)) or

      (ipwhattype = 4 and /* just account customers */
        (opcstcusttype = 1 or opcstcusttype = 2)) or

      (ipwhattype = 5 and /* just cash customers */
        opcstcusttype = 0)
    )
    then SUSPEND;
end
end
END^


ALTER PROCEDURE MYGET_CUSTRGPICKUPS (
    IPCUSTID INTEGER,
    IPDELTYPE INTEGER)
RETURNS (
    OPRGSOID INTEGER,
    OPCUSTID INTEGER,
    OPDELIVERYDATE DATE,
    OPCONTACTNAME CHAR(30),
    OPCUSTREF CHAR(20),
    OPWEIGHT DECIMAL(15,2),
    OPPRICE DECIMAL(15,2),
    OPRGID INTEGER,
    OPRGOFFICENOTES CHAR(200),
    OPORDERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPPHONE CHAR(30),
    OPFAX CHAR(30),
    OPEMAIL CHAR(50),
    OPMYOBJOBNO CHAR(50),
    OPGROSSWEIGHT DECIMAL(8,2),
    OPTAREWEIGHT DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(8,2))
AS
begin
  for select rgsalesorder.rgsoid,
             rgsalesorder.custid,
             rgsalesorder.deliverydate,
             rgsalesorder.contactname,
             rgsalesorder.customerreference,
             rgsalesorder.tons,
             rgsalesorder.incprice,
             rgsalesorder.rgid,
             rgsalesorder.officenotes,
             rgsalesorder.orderid,
             rgsalesorder.contactphone,
             rgsalesorder.fax,
             rgsalesorder.email,
             rgsalesorder.myobjobno,
             rgsalesorder.grossweight,
             rgsalesorder.tareweight,
             rgsalesorder.surcharge,
             rgsalesorder.cashrounding
      from rgsalesorder
      where rgsalesorder.custid = :ipcustid
        and rgsalesorder.complete = 0
        and rgsalesorder.deliverytype = :ipdeltype
       into :oprgsoid,
            :opcustid,
            :opdeliverydate,
            :opcontactname,
            :opcustref,
            :opweight,
            :opprice,
            :oprgid,
            :oprgofficenotes,
            :oporderid,
            :opphone,
            :opfax,
            :opemail,
            :opmyobjobno,
            :opgrossweight,
            :optareweight,
            :opsurcharge,
            :opcashrounding
  do suspend;
end^


ALTER PROCEDURE MYGET_CUSTRGPUDATE (
    IPCUSTID INTEGER,
    IPDELTYPE INTEGER,
    IPFROMDATE DATE)
RETURNS (
    OPRGSOID INTEGER,
    OPCUSTID INTEGER,
    OPDELIVERYDATE DATE,
    OPCONTACTNAME CHAR(30),
    OPCUSTREF CHAR(20),
    OPWEIGHT DECIMAL(15,2),
    OPPRICE DECIMAL(15,2),
    OPRGID INTEGER,
    OPRGOFFICENOTES CHAR(200),
    OPORDERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPPHONE CHAR(30),
    OPFAX CHAR(30),
    OPEMAIL CHAR(50),
    OPMYOBJOBNO CHAR(50),
    OPGROSSWEIGHT DECIMAL(8,2),
    OPTAREWEIGHT DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(8,2))
AS
begin
  for select rgsalesorder.rgsoid,
             rgsalesorder.custid,
             rgsalesorder.deliverydate,
             rgsalesorder.contactname,
             rgsalesorder.customerreference,
             rgsalesorder.tons,
             rgsalesorder.incprice,
             rgsalesorder.rgid,
             rgsalesorder.officenotes,
             rgsalesorder.orderid,
             rgsalesorder.contactphone,
             rgsalesorder.fax,
             rgsalesorder.email,
             rgsalesorder.myobjobno,
             rgsalesorder.grossweight,
             rgsalesorder.tareweight,
             rgsalesorder.surcharge,
             rgsalesorder.cashrounding
      from rgsalesorder
      where rgsalesorder.custid = :ipcustid
        and rgsalesorder.deliverytype = :ipdeltype
        and rgsalesorder.deliverydate >= :ipfromdate
       into :oprgsoid,
            :opcustid,
            :opdeliverydate,
            :opcontactname,
            :opcustref,
            :opweight,
            :opprice,
            :oprgid,
            :oprgofficenotes,
            :oporderid,
            :opphone,
            :opfax,
            :opemail,
            :opmyobjobno,
            :opgrossweight,
            :optareweight,
            :opsurcharge,
            :opcashrounding
  do suspend;
end^


ALTER PROCEDURE MYGET_CUSTSJOBSFROMTO (
    IPCUSTID INTEGER,
    IPSTARTDATE DATE DEFAULT NULL,
    IPENDDATE DATE DEFAULT NULL)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT 
  job.jobid, job.jobtype, job.bintypeid_out, job.bins_out, job.bintypeid_in, job.bins_in, job.driverid, job.jobtime, job.contact, job.comments, job.jobstatus, job.njobtime, job.priceareaid, job.custreference, job.asbestosbins, job.orderdayseqno, job.dtentered, job.dtlastamended, job.versionno, job.jobdate, job.paymethodid, job.JOBDETAILSDONE, job.invno, job.invlineno, job.invoiceable, job.INCEX, job.DESPATCHDOCKET,job.officenotes, job.dobinnos, job.pubinnos, job.vwjobseqno, job.fromsiteid, job.tositeid, job.epa, job.wtd, job.moveiddo, job.moveidpu, job.fulle, job.bintyperelocate, job.bins_relocate, job.invoicerelocate, job.binformatout, job.binformatin, job.binformatrel, job.paymreference, job.ispaid, job.materialid, job.userid, job.telephone, job.prioritylevel, job.rgweight, job.rgid, job.sitebins, job.orderplacedby, job.puweight, job.additionalcharges, job.whentoinvoice, job.extaxprice  ,
  sorder.orderid, sorder.contact, sorder.complete, sorder.invtype, sorder.bybinno, sorder.versionno, SORDER.CUSTTYPE, sorder.REFERRALID, sorder.FIRSTJOBDATE, sorder.faxno, sorder.email, sorder.userid, sorder.customersiteid, sorder.cjobno  ,
  address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude  ,
  /* {BillAddrFields} */
  jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid ,
  jobpupaydetails.paydetid, jobpupaydetails.reference, jobpupaydetails.ispaid, jobpupaydetails.nameoncard, jobpupaydetails.expmonth, jobpupaydetails.expyear, jobpupaydetails.securitycode, jobpupaydetails.paymethodid, jobpupaydetails.paidagainst, jobpupaydetails.cardtypeid, jobpupaydetails.cardnumber, jobpupaydetails.receivedby, jobpupaydetails.entereddate, jobpupaydetails.jobid 
FROM JOB
  left outer join sorder on job.orderid = sorder.orderid
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
  /* left outer join address as billaddr on sorder.billaddrid = billaddr.addrid */
  left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
  left outer join jobpaydetails as jobpupaydetails on job.pupaydetid = jobpupaydetails.paydetid
where job.custid = :ipcustid
   and job.jobdate >= :ipstartdate
   and job.jobdate <= :ipenddate
INTO
   :opjobjobid, :opjobjobtype, :opjobbintypeid_out, :opjobbins_out, :opjobbintypeid_in, :opjobbins_in, :opjobdriverid, :opjobjobtime, :opjobcontact, :opjobcomments, :opjobjobstatus, :opjobnjobtime, :opjobpriceareaid, :opjobcustref, :opjobasbestos, :opjoborderdayseqno, :opjobdtentered, :opjobdtlastamended, :opjobversionno, :opjobjobdate, :opjobpaymethodid, :opjobjobdetails, :opjobinvno, :opjobinvlineno, :opjobinvoiceable, :opjobincex, :opjobdespdock, :opjobofficenotes, :opdobinnos, :oppubinnos, :opvwjobseqno, :opfromsiteid, :optositeid, :opepa, :opwtd, :opmoveiddo, :opmoveidpu, :opfulle, :opbtrelocate, :opbins_relocate, :opinvoicerelocate, :opbinformatout, :opbinformatin, :opbinformatrel, :oppaymreference, :opispaid, :opjobmaterialid, :opjobuserid, :optelephone, :opprioritylevel, :oprgweight, :oprgid, :opsitebins, :oporderplacedby, :oppuweight, :opadhoccharges, :opjobwhentoinvoice, :opjobextaxprice  ,
    :opordorderid, :opordcontact, :opordcomplete, :opordinvtype, :opordbybinno, :opordversionno, :opordcusttype, :opordreferralid, :opordfirstjob, :opordfaxno, :opordemail, :oporduserid, :opordcustsiteid, :opjobno  ,
    :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude  ,
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude  ,
   /* {BillAddrOutFields} */ 
    :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid ,
    :oppaypupaydetid, :oppaypureference, :oppaypuispaid, :oppaypunameoncard, :oppaypuexpmonth, :oppaypuexpyear, :oppaypusecuritycode, :oppaypupaymethodid, :oppaypupayagainst, :oppaypucardtypeid, :oppaypucardnumber, :oppaypureceivedby, :oppaypureceivedon, :oppaypujobid 
     do begin

         if (opwantsbreakdown = 1 and
            (opjobjobtype = 2 or opjobjobtype = 3))  /* C/O or pickup */
        then begin 
           if (EXISTS(select jobrmbreakdown.jobid from jobrmbreakdown
                      where jobrmbreakdown.jobid = :opjobjobid))
           then opbreakdown = 1;
           else opbreakdown = 0;
        end
        else opbreakdown = -1;

        SUSPEND;
   end
END^


ALTER PROCEDURE MYGET_CUSTSOPENJOBS (
    IPCUSTID INTEGER)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6))
AS
BEGIN
for SELECT 
  job.jobid, job.jobtype, job.bintypeid_out, job.bins_out, job.bintypeid_in, job.bins_in, job.driverid, job.jobtime, job.contact, job.comments, job.jobstatus, job.njobtime, job.priceareaid, job.custreference, job.asbestosbins, job.orderdayseqno, job.dtentered, job.dtlastamended, job.versionno, job.jobdate, job.paymethodid, job.JOBDETAILSDONE, job.invno, job.invlineno, job.invoiceable, job.INCEX, job.DESPATCHDOCKET,job.officenotes, job.dobinnos, job.pubinnos, job.vwjobseqno, job.fromsiteid, job.tositeid, job.epa, job.wtd, job.moveiddo, job.moveidpu, job.fulle, job.bintyperelocate, job.bins_relocate, job.invoicerelocate, job.binformatout, job.binformatin, job.binformatrel, job.paymreference, job.ispaid, job.materialid, job.userid, job.telephone, job.prioritylevel, job.rgweight, job.rgid, job.sitebins, job.orderplacedby, job.puweight, job.additionalcharges, job.whentoinvoice, job.extaxprice 
FROM JOB
where job.invoiceable = 1
  and job.invno = 0
  and job.custid = :ipcustid
INTO
   :opjobjobid, :opjobjobtype, :opjobbintypeid_out, :opjobbins_out, :opjobbintypeid_in, :opjobbins_in, :opjobdriverid, :opjobjobtime, :opjobcontact, :opjobcomments, :opjobjobstatus, :opjobnjobtime, :opjobpriceareaid, :opjobcustref, :opjobasbestos, :opjoborderdayseqno, :opjobdtentered, :opjobdtlastamended, :opjobversionno, :opjobjobdate, :opjobpaymethodid, :opjobjobdetails, :opjobinvno, :opjobinvlineno, :opjobinvoiceable, :opjobincex, :opjobdespdock, :opjobofficenotes, :opdobinnos, :oppubinnos, :opvwjobseqno, :opfromsiteid, :optositeid, :opepa, :opwtd, :opmoveiddo, :opmoveidpu, :opfulle, :opbtrelocate, :opbins_relocate, :opinvoicerelocate, :opbinformatout, :opbinformatin, :opbinformatrel, :oppaymreference, :opispaid, :opjobmaterialid, :opjobuserid, :optelephone, :opprioritylevel, :oprgweight, :oprgid, :opsitebins, :oporderplacedby, :oppuweight, :opadhoccharges, :opjobwhentoinvoice, :opjobextaxprice 
  do SUSPEND;
END^


ALTER PROCEDURE MYGET_CUSTSOPENTIPS (
    IPCUSTID INTEGER)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2))
AS
BEGIN
for SELECT 
  TIP.ID, TIP.DDATE, TIP.TIMEIN, TIP.TIMEOUT, TIP.CUSTID, TIP.REGO, TIP.BYCUBIC, TIP.CUBICMETRES, TIP.GROSSWEIGHT, TIP.TAREWEIGHT, TIP.PRICE, TIP.PAYMENTID, TIP.INVNO, TIP.INVLINENO, TIP.MATERIALID, TIP.VERSIONNO, TIP.TIPSITEID, TIP.COMMENTS, TIP.PAYREFERENCE, TIP.GROSSWEIGHT2, TIP.CAMEFROM, TIP.DUMPEDIN, TIP.TIPDDNO, TIP.OKAYEDTOINVOICE, TIP.tareweight2, TIP.trailerrego, TIP.MYOBJOBNO, TIP.CUSTOMERREFERENCE, TIP.BINJOBID, tip.epaentrypurposeid, tip.epasubwastestreamid, tip.epavehicletypecode, tip.epawastestreamid, tip.epawastetypeid, tip.epaapprovalnumber, tip.flags, tip.transactionnumber, tip.fixedvalueexgst, tip.fixedvaluegst, tip.surcharge, tip.cashrounding 
FROM TIP
where tip.invno = 0
    and tip.custid = :ipcustid
INTO
   :OPTIPID, :OPTIPDDATE, :OPTIPTIMEIN, :OPTIPTIMEOUT, :OPTIPCUSTID, :OPTIPREGO, :OPTIPBYCUBIC, :OPTIPCUBICMETRES, :OPTIPGROSSWEIGHT, :OPTIPTAREWEIGHT, :OPTIPPRICE, :OPTIPPAYMENTID, :OPTIPINVNO, :OPTIPINVLINENO, :OPTIPMATERIALID, :OPTIPVERSIONNO, :OPTIPTIPSITEID, :OPTIPCOMMENTS, :OPTIPPAYREF, :OPTIPGROSSWEIGHT2, :OPTIPCAMEFROM, :OPTIPDUMPEDIN, :OPTIPTIPDDNO, :OPTIPOKAYEDTOINVOICE, :OPTIPTAREWEIGHT2, :OPTIPTRAILERREGO, :OPTIPMYOBJOBNO, :OPTIPCUSTREF, :OPTIPBINJOBID, :opepaentrypurposeid, :opepasubwastestreamid, :opepavehicletypecode, :opepawastestreamid, :opepawastetypeid, :opepaapprovalnumber, :opflags, :optransactionnumber, :opfixedvalueexgst, :opfixedvaluegst, :opsurcharge, :opcashrounding 
     do begin
          select sum(tipfee.incamount)
                    from tipfee
                    where tipfee.tipid = :optipid
                    into :optipfeetotal;
          if (optipfeetotal is null)
          then optipfeetotal = 0;
          SUSPEND;
   end
END^


ALTER PROCEDURE MYGET_CUSTSTIPS (
    IPCUSTID INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2))
AS
BEGIN
for SELECT 
  TIP.ID, TIP.DDATE, TIP.TIMEIN, TIP.TIMEOUT, TIP.CUSTID, TIP.REGO, TIP.BYCUBIC, TIP.CUBICMETRES, TIP.GROSSWEIGHT, TIP.TAREWEIGHT, TIP.PRICE, TIP.PAYMENTID, TIP.INVNO, TIP.INVLINENO, TIP.MATERIALID, TIP.VERSIONNO, TIP.TIPSITEID, TIP.COMMENTS, TIP.PAYREFERENCE, TIP.GROSSWEIGHT2, TIP.CAMEFROM, TIP.DUMPEDIN, TIP.TIPDDNO, TIP.OKAYEDTOINVOICE, TIP.tareweight2, TIP.trailerrego, TIP.MYOBJOBNO, TIP.CUSTOMERREFERENCE, TIP.BINJOBID, tip.epaentrypurposeid, tip.epasubwastestreamid, tip.epavehicletypecode, tip.epawastestreamid, tip.epawastetypeid, tip.epaapprovalnumber, tip.flags, tip.transactionnumber, tip.fixedvalueexgst, tip.fixedvaluegst, tip.surcharge, tip.cashrounding 
FROM TIP
where tip.custid = :ipcustid
    and tip.ddate >= :ipfromdate
    and tip.ddate <= :iptodate
INTO
   :OPTIPID, :OPTIPDDATE, :OPTIPTIMEIN, :OPTIPTIMEOUT, :OPTIPCUSTID, :OPTIPREGO, :OPTIPBYCUBIC, :OPTIPCUBICMETRES, :OPTIPGROSSWEIGHT, :OPTIPTAREWEIGHT, :OPTIPPRICE, :OPTIPPAYMENTID, :OPTIPINVNO, :OPTIPINVLINENO, :OPTIPMATERIALID, :OPTIPVERSIONNO, :OPTIPTIPSITEID, :OPTIPCOMMENTS, :OPTIPPAYREF, :OPTIPGROSSWEIGHT2, :OPTIPCAMEFROM, :OPTIPDUMPEDIN, :OPTIPTIPDDNO, :OPTIPOKAYEDTOINVOICE, :OPTIPTAREWEIGHT2, :OPTIPTRAILERREGO, :OPTIPMYOBJOBNO, :OPTIPCUSTREF, :OPTIPBINJOBID, :opepaentrypurposeid, :opepasubwastestreamid, :opepavehicletypecode, :opepawastestreamid, :opepawastetypeid, :opepaapprovalnumber, :opflags, :optransactionnumber, :opfixedvalueexgst, :opfixedvaluegst, :opsurcharge, :opcashrounding 
     do begin
          select sum(tipfee.incamount)
                    from tipfee
                    where tipfee.tipid = :optipid
                    into :optipfeetotal;
          if (optipfeetotal is null)
          then optipfeetotal = 0;
          SUSPEND;
   end
END^


ALTER PROCEDURE MYGET_DOCKET (
    IPDOCKETNO INTEGER DEFAULT NULL)
RETURNS (
    OPDOCKETID INTEGER,
    OPDOCKETNO INTEGER,
    OPJOBDATE DATE,
    OPDOBINTYPEID INTEGER,
    OPCOMMENTS CHAR(200),
    OPJOBTIME CHAR(50),
    OPCUSTORDERNO CHAR(50),
    OPTIPREF CHAR(50),
    OPBINNO CHAR(50),
    OPDOCKETTYPE INTEGER,
    OPJOBTYPE INTEGER,
    OPCONTACT CHAR(50),
    OPDKTCCTYPE INTEGER,
    OPDKTNAMEONCARD CHAR(50),
    OPCARDNO1 CHAR(4),
    OPCARDNO2 CHAR(4),
    OPCARDNO3 CHAR(4),
    OPCARDNO4 CHAR(4),
    OPDKTEXPMONTH INTEGER,
    OPDKTEXPYEAR INTEGER,
    OPDKTTIPAMOUNT DECIMAL(6,2),
    OPDKTTIPSITEID INTEGER,
    OPDKTEXGSTPRICE DECIMAL(7,2),
    OPDKTINCGSTPRICE DECIMAL(7,2),
    OPDKTDODRIVERID INTEGER,
    OPDKTPUDRIVERID INTEGER,
    OPDKTPAYCOMMENT CHAR(30),
    OPDKTACREF CHAR(30),
    OPDKTDD CHAR(40),
    OPDKTPUBINTYPEID INTEGER,
    OPDKTNEXTDKTID INTEGER,
    OPDKTPREVDKTID INTEGER,
    OPDKTPUDATE DATE,
    OPDKTDKTCOVERS INTEGER,
    OPDKTMADEFROM INTEGER,
    OPDKTCCPROCESSED INTEGER,
    OPDKTCOPUBINTYPEID INTEGER,
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT 
docket.docketid, docket.docketno, docket.jobdate, docket.dobintypeid, docket.comments, docket.jobtime, docket.custorderno, docket.tipref, docket.binno, docket.dockettype, docket.jobtype, docket.contact, docket.cctype, docket.nameoncard, docket.cardno1, docket.cardno2, docket.cardno3, docket.cardno4, docket.expmonth, docket.expyear, docket.tipamount, docket.tipsiteid, docket.exgstprice, docket.incgstprice, docket.dodriverid, docket.pudriverid, docket.paymentcomment, docket.acref, docket.despatchdocketno, docket.pubintypeid, docket.nextdocketid, docket.prevdocketid, docket.pudate, docket.docketcovers, docket.ccprocessed, docket.copubintypeid ,
address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude ,
customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM Docket
  left outer join customer on docket.custid = customer.CUSTID
  left outer join address on docket.addrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where docket.docketno = :ipdocketno
INTO 
:opdocketid, :opdocketno, :opjobdate, :opdobintypeid, :opcomments, :opjobtime, :opcustorderno, :optipref, :opbinno, :opdockettype, :opjobtype, :opcontact, :opdktcctype, :opdktnameoncard, :opcardno1, :opcardno2, :opcardno3, :opcardno4, :opdktexpmonth, :opdktexpyear, :opdkttipamount, :opdkttipsiteid, :opdktexgstprice, :opdktincgstprice, :opdktdodriverid, :opdktpudriverid, :opdktpaycomment, :opdktacref, :opdktdd, :opdktpubintypeid, :opdktnextdktid, :opdktprevdktid, :opdktpudate, :opdktdktcovers, :opdktccprocessed, :opdktcopubintypeid ,
:opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude ,
:opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
:opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
DO suspend;
END^


ALTER PROCEDURE MYGET_DOCKETS (
    IPFORDATE DATE)
RETURNS (
    OPDOCKETID INTEGER,
    OPDOCKETNO INTEGER,
    OPJOBDATE DATE,
    OPDOBINTYPEID INTEGER,
    OPCOMMENTS CHAR(200),
    OPJOBTIME CHAR(50),
    OPCUSTORDERNO CHAR(50),
    OPTIPREF CHAR(50),
    OPBINNO CHAR(50),
    OPDOCKETTYPE INTEGER,
    OPJOBTYPE INTEGER,
    OPCONTACT CHAR(50),
    OPDKTCCTYPE INTEGER,
    OPDKTNAMEONCARD CHAR(50),
    OPCARDNO1 CHAR(4),
    OPCARDNO2 CHAR(4),
    OPCARDNO3 CHAR(4),
    OPCARDNO4 CHAR(4),
    OPDKTEXPMONTH INTEGER,
    OPDKTEXPYEAR INTEGER,
    OPDKTTIPAMOUNT DECIMAL(6,2),
    OPDKTTIPSITEID INTEGER,
    OPDKTEXGSTPRICE DECIMAL(7,2),
    OPDKTINCGSTPRICE DECIMAL(7,2),
    OPDKTDODRIVERID INTEGER,
    OPDKTPUDRIVERID INTEGER,
    OPDKTPAYCOMMENT CHAR(30),
    OPDKTACREF CHAR(30),
    OPDKTDD CHAR(40),
    OPDKTPUBINTYPEID INTEGER,
    OPDKTNEXTDKTID INTEGER,
    OPDKTPREVDKTID INTEGER,
    OPDKTPUDATE DATE,
    OPDKTDKTCOVERS INTEGER,
    OPDKTMADEFROM INTEGER,
    OPDKTCCPROCESSED INTEGER,
    OPDKTCOPUBINTYPEID INTEGER,
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
opdktmadefrom = 0; /* from dodate loop */
for SELECT 
docket.docketid, docket.docketno, docket.jobdate, docket.dobintypeid, docket.comments, docket.jobtime, docket.custorderno, docket.tipref, docket.binno, docket.dockettype, docket.jobtype, docket.contact, docket.cctype, docket.nameoncard, docket.cardno1, docket.cardno2, docket.cardno3, docket.cardno4, docket.expmonth, docket.expyear, docket.tipamount, docket.tipsiteid, docket.exgstprice, docket.incgstprice, docket.dodriverid, docket.pudriverid, docket.paymentcomment, docket.acref, docket.despatchdocketno, docket.pubintypeid, docket.nextdocketid, docket.prevdocketid, docket.pudate, docket.docketcovers, docket.ccprocessed, docket.copubintypeid ,
address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude ,
customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM Docket
  left outer join customer on docket.custid = customer.CUSTID
  left outer join address on docket.addrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where docket.jobdate = :ipfordate
INTO 
:opdocketid, :opdocketno, :opjobdate, :opdobintypeid, :opcomments, :opjobtime, :opcustorderno, :optipref, :opbinno, :opdockettype, :opjobtype, :opcontact, :opdktcctype, :opdktnameoncard, :opcardno1, :opcardno2, :opcardno3, :opcardno4, :opdktexpmonth, :opdktexpyear, :opdkttipamount, :opdkttipsiteid, :opdktexgstprice, :opdktincgstprice, :opdktdodriverid, :opdktpudriverid, :opdktpaycomment, :opdktacref, :opdktdd, :opdktpubintypeid, :opdktnextdktid, :opdktprevdktid, :opdktpudate, :opdktdktcovers, :opdktccprocessed, :opdktcopubintypeid ,
:opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude ,
:opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
:opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
DO suspend;

/* now do the same but for the pudate */
opdktmadefrom = 1; /* from pudate loop */
for SELECT 
docket.docketid, docket.docketno, docket.jobdate, docket.dobintypeid, docket.comments, docket.jobtime, docket.custorderno, docket.tipref, docket.binno, docket.dockettype, docket.jobtype, docket.contact, docket.cctype, docket.nameoncard, docket.cardno1, docket.cardno2, docket.cardno3, docket.cardno4, docket.expmonth, docket.expyear, docket.tipamount, docket.tipsiteid, docket.exgstprice, docket.incgstprice, docket.dodriverid, docket.pudriverid, docket.paymentcomment, docket.acref, docket.despatchdocketno, docket.pubintypeid, docket.nextdocketid, docket.prevdocketid, docket.pudate, docket.docketcovers, docket.ccprocessed, docket.copubintypeid ,
address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude ,
customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM Docket
  left outer join customer on docket.custid = customer.CUSTID
  left outer join address on docket.addrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where docket.pudate = :ipfordate
     /* and docket.docketcovers != 1  ignore debtor pick up style jobs */
INTO 
:opdocketid, :opdocketno, :opjobdate, :opdobintypeid, :opcomments, :opjobtime, :opcustorderno, :optipref, :opbinno, :opdockettype, :opjobtype, :opcontact, :opdktcctype, :opdktnameoncard, :opcardno1, :opcardno2, :opcardno3, :opcardno4, :opdktexpmonth, :opdktexpyear, :opdkttipamount, :opdkttipsiteid, :opdktexgstprice, :opdktincgstprice, :opdktdodriverid, :opdktpudriverid, :opdktpaycomment, :opdktacref, :opdktdd, :opdktpubintypeid, :opdktnextdktid, :opdktprevdktid, :opdktpudate, :opdktdktcovers, :opdktccprocessed, :opdktcopubintypeid ,
:opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude ,
:opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
:opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
DO begin
   /* ignore PU jobs that have a following docket as the following docket must be a 
    * changeover therefore this PU job will be shown as part of the changeover
    */
   if (opdktdktcovers != 3 or opdktnextdktid = 0)
   then suspend;
end
END^


ALTER PROCEDURE MYGET_DOCKETSADDR (
    IPFORCUSTID INTEGER)
RETURNS (
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN

for SELECT 
address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude 
FROM Docket
  left outer join address on docket.addrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
where docket.custid = :ipforcustid
ORDER BY docket.jobdate desc
 ROWS 30
INTO 
:opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude 
DO suspend;

END^


ALTER PROCEDURE MYGET_DOCKETSCUST (
    IPFORCUSTID INTEGER)
RETURNS (
    OPDOCKETID INTEGER,
    OPDOCKETNO INTEGER,
    OPJOBDATE DATE,
    OPDOBINTYPEID INTEGER,
    OPCOMMENTS CHAR(200),
    OPJOBTIME CHAR(50),
    OPCUSTORDERNO CHAR(50),
    OPTIPREF CHAR(50),
    OPBINNO CHAR(50),
    OPDOCKETTYPE INTEGER,
    OPJOBTYPE INTEGER,
    OPCONTACT CHAR(50),
    OPDKTCCTYPE INTEGER,
    OPDKTNAMEONCARD CHAR(50),
    OPCARDNO1 CHAR(4),
    OPCARDNO2 CHAR(4),
    OPCARDNO3 CHAR(4),
    OPCARDNO4 CHAR(4),
    OPDKTEXPMONTH INTEGER,
    OPDKTEXPYEAR INTEGER,
    OPDKTTIPAMOUNT DECIMAL(6,2),
    OPDKTTIPSITEID INTEGER,
    OPDKTEXGSTPRICE DECIMAL(7,2),
    OPDKTINCGSTPRICE DECIMAL(7,2),
    OPDKTDODRIVERID INTEGER,
    OPDKTPUDRIVERID INTEGER,
    OPDKTPAYCOMMENT CHAR(30),
    OPDKTACREF CHAR(30),
    OPDKTDD CHAR(40),
    OPDKTPUBINTYPEID INTEGER,
    OPDKTNEXTDKTID INTEGER,
    OPDKTPREVDKTID INTEGER,
    OPDKTPUDATE DATE,
    OPDKTDKTCOVERS INTEGER,
    OPDKTMADEFROM INTEGER,
    OPDKTCCPROCESSED INTEGER,
    OPDKTCOPUBINTYPEID INTEGER,
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN

opdktmadefrom = 0; /* do date */
for SELECT 
docket.docketid, docket.docketno, docket.jobdate, docket.dobintypeid, docket.comments, docket.jobtime, docket.custorderno, docket.tipref, docket.binno, docket.dockettype, docket.jobtype, docket.contact, docket.cctype, docket.nameoncard, docket.cardno1, docket.cardno2, docket.cardno3, docket.cardno4, docket.expmonth, docket.expyear, docket.tipamount, docket.tipsiteid, docket.exgstprice, docket.incgstprice, docket.dodriverid, docket.pudriverid, docket.paymentcomment, docket.acref, docket.despatchdocketno, docket.pubintypeid, docket.nextdocketid, docket.prevdocketid, docket.pudate, docket.docketcovers, docket.ccprocessed, docket.copubintypeid ,
address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude 
FROM Docket
  left outer join address on docket.addrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
where docket.custid = :ipforcustid
  and docketcovers != 1 
/*
    and (docketcovers != 3 // cash docket, has drop and pu job on same docket 
        and docketcovers != 1 // debtor pick up job 
*/
ORDER BY docket.jobdate desc
 ROWS 100
INTO 
:opdocketid, :opdocketno, :opjobdate, :opdobintypeid, :opcomments, :opjobtime, :opcustorderno, :optipref, :opbinno, :opdockettype, :opjobtype, :opcontact, :opdktcctype, :opdktnameoncard, :opcardno1, :opcardno2, :opcardno3, :opcardno4, :opdktexpmonth, :opdktexpyear, :opdkttipamount, :opdkttipsiteid, :opdktexgstprice, :opdktincgstprice, :opdktdodriverid, :opdktpudriverid, :opdktpaycomment, :opdktacref, :opdktdd, :opdktpubintypeid, :opdktnextdktid, :opdktprevdktid, :opdktpudate, :opdktdktcovers, :opdktccprocessed, :opdktcopubintypeid ,
:opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude 
DO suspend;


opdktmadefrom = 1; /* pu date */
for SELECT 
docket.docketid, docket.docketno, docket.jobdate, docket.dobintypeid, docket.comments, docket.jobtime, docket.custorderno, docket.tipref, docket.binno, docket.dockettype, docket.jobtype, docket.contact, docket.cctype, docket.nameoncard, docket.cardno1, docket.cardno2, docket.cardno3, docket.cardno4, docket.expmonth, docket.expyear, docket.tipamount, docket.tipsiteid, docket.exgstprice, docket.incgstprice, docket.dodriverid, docket.pudriverid, docket.paymentcomment, docket.acref, docket.despatchdocketno, docket.pubintypeid, docket.nextdocketid, docket.prevdocketid, docket.pudate, docket.docketcovers, docket.ccprocessed, docket.copubintypeid ,
address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude 
FROM Docket
  left outer join address on docket.addrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
where docket.custid = :ipforcustid
     and (docketcovers = 3 /* cash docket, has drop and pu job on same docket */
        or docketcovers = 1) /* debtor pick up job */
ORDER BY docket.pudate desc
 ROWS 100
INTO 
:opdocketid, :opdocketno, :opjobdate, :opdobintypeid, :opcomments, :opjobtime, :opcustorderno, :optipref, :opbinno, :opdockettype, :opjobtype, :opcontact, :opdktcctype, :opdktnameoncard, :opcardno1, :opcardno2, :opcardno3, :opcardno4, :opdktexpmonth, :opdktexpyear, :opdkttipamount, :opdkttipsiteid, :opdktexgstprice, :opdktincgstprice, :opdktdodriverid, :opdktpudriverid, :opdktpaycomment, :opdktacref, :opdktdd, :opdktpubintypeid, :opdktnextdktid, :opdktprevdktid, :opdktpudate, :opdktdktcovers, :opdktccprocessed, :opdktcopubintypeid ,
:opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude 
DO begin
   /* ignore PU jobs that have a following docket as the following docket must be a 
    * changeover therefore this PU job will be shown as part of the changeover
    */
   if (opdktdktcovers != 3 or opdktnextdktid = 0)
   then suspend;
end
END^


ALTER PROCEDURE MYGET_INVOICE (
    IPINVNO INTEGER DEFAULT NULL)
RETURNS (
    OPINVINVNO INTEGER,
    OPINVINVBATCHNO INTEGER,
    OPINVINVDATE DATE,
    OPINVDUEDATE DATE,
    OPINVBILLADDRID INTEGER,
    OPINVEXGST FLOAT,
    OPINVGST FLOAT,
    OPINVTOTAL FLOAT,
    OPINVCOMMENTS CHAR(200),
    OPINVPAIDINFULL INTEGER,
    OPINVPAIDSOFAR DECIMAL(18,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT
  invno, invbatchid, invdate, duedate, billaddrid, invoice.comments, invoice.paidinfull, invoice.paidsofar  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM invoice
left outer join customer on invoice.custid = customer.custid
left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where invoice.invno = :ipinvno
INTO 
  :opinvinvno, :opinvinvbatchno, :opinvinvdate, :opinvduedate, :opinvbilladdrid, :opinvcomments, :opinvpaidinfull, :opinvpaidsofar  ,
  :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
do BEGIN
  select sum(invline.exgstvalue),
         sum(invline.gst),
         sum(invline.totalvalue)
         from INVLINE
         where invline.invno = :ipinvno
         into opinvexgst, opinvgst, opinvtotal;
  SUSPEND;
end
END^


ALTER PROCEDURE MYGET_INVOICES (
    IPINVBATCHNO INTEGER = null)
RETURNS (
    OPINVINVNO INTEGER,
    OPINVINVBATCHNO INTEGER,
    OPINVINVDATE DATE,
    OPINVDUEDATE DATE,
    OPINVBILLADDRID INTEGER,
    OPINVEXGST FLOAT,
    OPINVGST FLOAT,
    OPINVTOTAL FLOAT,
    OPINVCOMMENTS CHAR(200),
    OPINVPAIDINFULL INTEGER,
    OPINVPAIDSOFAR DECIMAL(18,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT
  invno, invbatchid, invdate, duedate, billaddrid, invoice.comments, invoice.paidinfull, invoice.paidsofar  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM invoice
left outer join customer on invoice.custid = customer.custid
left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where invoice.invbatchid = :ipinvbatchno
INTO 
  :opinvinvno, :opinvinvbatchno, :opinvinvdate, :opinvduedate, :opinvbilladdrid, :opinvcomments, :opinvpaidinfull, :opinvpaidsofar  ,
  :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
do BEGIN
  select sum(invline.exgstvalue),
         sum(invline.gst),
         sum(invline.totalvalue)
         from INVLINE
         where invline.invno = :opinvinvno
         into opinvexgst, opinvgst, opinvtotal;
  SUSPEND;
end
END^


ALTER PROCEDURE MYGET_JOB (
    IPJOBID INTEGER = 0)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPEMAILEDMESSAGE INTEGER)
AS
BEGIN
for SELECT 
  job.jobid, job.jobtype, job.bintypeid_out, job.bins_out, job.bintypeid_in, job.bins_in, job.driverid, job.jobtime, job.contact, job.comments, job.jobstatus, job.njobtime, job.priceareaid, job.custreference, job.asbestosbins, job.orderdayseqno, job.dtentered, job.dtlastamended, job.versionno, job.jobdate, job.paymethodid, job.JOBDETAILSDONE, job.invno, job.invlineno, job.invoiceable, job.INCEX, job.DESPATCHDOCKET,job.officenotes, job.dobinnos, job.pubinnos, job.vwjobseqno, job.fromsiteid, job.tositeid, job.epa, job.wtd, job.moveiddo, job.moveidpu, job.fulle, job.bintyperelocate, job.bins_relocate, job.invoicerelocate, job.binformatout, job.binformatin, job.binformatrel, job.paymreference, job.ispaid, job.materialid, job.userid, job.telephone, job.prioritylevel, job.rgweight, job.rgid, job.sitebins, job.orderplacedby, job.puweight, job.additionalcharges, job.whentoinvoice, job.extaxprice ,
  jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid ,
  jobpupaydetails.paydetid, jobpupaydetails.reference, jobpupaydetails.ispaid, jobpupaydetails.nameoncard, jobpupaydetails.expmonth, jobpupaydetails.expyear, jobpupaydetails.securitycode, jobpupaydetails.paymethodid, jobpupaydetails.paidagainst, jobpupaydetails.cardtypeid, jobpupaydetails.cardnumber, jobpupaydetails.receivedby, jobpupaydetails.entereddate, jobpupaydetails.jobid ,
  sorder.orderid, sorder.contact, sorder.complete, sorder.invtype, sorder.bybinno, sorder.versionno, SORDER.CUSTTYPE, sorder.REFERRALID, sorder.FIRSTJOBDATE, sorder.faxno, sorder.email, sorder.userid, sorder.customersiteid, sorder.cjobno  ,
  address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude, job.emailedmessage
FROM JOB
  left outer join sorder on job.orderid = sorder.orderid
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
  left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
  left outer join jobpaydetails as jobpupaydetails on job.pupaydetid = jobpupaydetails.paydetid
where job.jobid = :ipjobid
INTO
   :opjobjobid, :opjobjobtype, :opjobbintypeid_out, :opjobbins_out, :opjobbintypeid_in, :opjobbins_in, :opjobdriverid, :opjobjobtime, :opjobcontact, :opjobcomments, :opjobjobstatus, :opjobnjobtime, :opjobpriceareaid, :opjobcustref, :opjobasbestos, :opjoborderdayseqno, :opjobdtentered, :opjobdtlastamended, :opjobversionno, :opjobjobdate, :opjobpaymethodid, :opjobjobdetails, :opjobinvno, :opjobinvlineno, :opjobinvoiceable, :opjobincex, :opjobdespdock, :opjobofficenotes, :opdobinnos, :oppubinnos, :opvwjobseqno, :opfromsiteid, :optositeid, :opepa, :opwtd, :opmoveiddo, :opmoveidpu, :opfulle, :opbtrelocate, :opbins_relocate, :opinvoicerelocate, :opbinformatout, :opbinformatin, :opbinformatrel, :oppaymreference, :opispaid, :opjobmaterialid, :opjobuserid, :optelephone, :opprioritylevel, :oprgweight, :oprgid, :opsitebins, :oporderplacedby, :oppuweight, :opadhoccharges, :opjobwhentoinvoice, :opjobextaxprice  ,
    :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid ,
    :oppaypupaydetid, :oppaypureference, :oppaypuispaid, :oppaypunameoncard, :oppaypuexpmonth, :oppaypuexpyear, :oppaypusecuritycode, :oppaypupaymethodid, :oppaypupayagainst, :oppaypucardtypeid, :oppaypucardnumber, :oppaypureceivedby, :oppaypureceivedon, :oppaypujobid ,
    :opordorderid, :opordcontact, :opordcomplete, :opordinvtype, :opordbybinno, :opordversionno, :opordcusttype, :opordreferralid, :opordfirstjob, :opordfaxno, :opordemail, :oporduserid, :opordcustsiteid, :opjobno  ,
    :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude  ,
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude, :opemailedmessage
     do begin

          if (opwantsbreakdown = 1 and
             (opjobjobtype = 2 or opjobjobtype = 3))  /* C/O or pickup */
          then begin 
             if (EXISTS(select jobrmbreakdown.jobid from jobrmbreakdown
                      where jobrmbreakdown.jobid = :opjobjobid))
             then opbreakdown = 1;
             else opbreakdown = 0;
          end
          else opbreakdown = -1;

           SUSPEND;
     end
END^


ALTER PROCEDURE MYGET_JOBPAYDETAILSONDATE (
    IPFORDATE DATE = null)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT 
  job.jobid, job.jobtype, job.bintypeid_out, job.bins_out, job.bintypeid_in, job.bins_in, job.driverid, job.jobtime, job.contact, job.comments, job.jobstatus, job.njobtime, job.priceareaid, job.custreference, job.asbestosbins, job.orderdayseqno, job.dtentered, job.dtlastamended, job.versionno, job.jobdate, job.paymethodid, job.JOBDETAILSDONE, job.invno, job.invlineno, job.invoiceable, job.INCEX, job.DESPATCHDOCKET,job.officenotes, job.dobinnos, job.pubinnos, job.vwjobseqno, job.fromsiteid, job.tositeid, job.epa, job.wtd, job.moveiddo, job.moveidpu, job.fulle, job.bintyperelocate, job.bins_relocate, job.invoicerelocate, job.binformatout, job.binformatin, job.binformatrel, job.paymreference, job.ispaid, job.materialid, job.userid, job.telephone, job.prioritylevel, job.rgweight, job.rgid, job.sitebins, job.orderplacedby, job.puweight, job.additionalcharges, job.whentoinvoice, job.extaxprice  ,
  sorder.orderid, sorder.contact, sorder.complete, sorder.invtype, sorder.bybinno, sorder.versionno, SORDER.CUSTTYPE, sorder.REFERRALID, sorder.FIRSTJOBDATE, sorder.faxno, sorder.email, sorder.userid, sorder.customersiteid, sorder.cjobno  ,
  address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude  ,
  jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid ,
  jobpupaydetails.paydetid, jobpupaydetails.reference, jobpupaydetails.ispaid, jobpupaydetails.nameoncard, jobpupaydetails.expmonth, jobpupaydetails.expyear, jobpupaydetails.securitycode, jobpupaydetails.paymethodid, jobpupaydetails.paidagainst, jobpupaydetails.cardtypeid, jobpupaydetails.cardnumber, jobpupaydetails.receivedby, jobpupaydetails.entereddate, jobpupaydetails.jobid 
FROM JOBPAYDETAILS
  left outer join job on jobpaydetails.jobid = job.jobid
  left outer join sorder on job.orderid = sorder.orderid
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
  left outer join jobpaydetails as jobpupaydetails on job.pupaydetid = jobpupaydetails.paydetid
where jobpaydetails.entereddate = :ipfordate
INTO
   :opjobjobid, :opjobjobtype, :opjobbintypeid_out, :opjobbins_out, :opjobbintypeid_in, :opjobbins_in, :opjobdriverid, :opjobjobtime, :opjobcontact, :opjobcomments, :opjobjobstatus, :opjobnjobtime, :opjobpriceareaid, :opjobcustref, :opjobasbestos, :opjoborderdayseqno, :opjobdtentered, :opjobdtlastamended, :opjobversionno, :opjobjobdate, :opjobpaymethodid, :opjobjobdetails, :opjobinvno, :opjobinvlineno, :opjobinvoiceable, :opjobincex, :opjobdespdock, :opjobofficenotes, :opdobinnos, :oppubinnos, :opvwjobseqno, :opfromsiteid, :optositeid, :opepa, :opwtd, :opmoveiddo, :opmoveidpu, :opfulle, :opbtrelocate, :opbins_relocate, :opinvoicerelocate, :opbinformatout, :opbinformatin, :opbinformatrel, :oppaymreference, :opispaid, :opjobmaterialid, :opjobuserid, :optelephone, :opprioritylevel, :oprgweight, :oprgid, :opsitebins, :oporderplacedby, :oppuweight, :opadhoccharges, :opjobwhentoinvoice, :opjobextaxprice  ,
   :opordorderid, :opordcontact, :opordcomplete, :opordinvtype, :opordbybinno, :opordversionno, :opordcusttype, :opordreferralid, :opordfirstjob, :opordfaxno, :opordemail, :oporduserid, :opordcustsiteid, :opjobno  ,
   :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude  ,
   :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
   :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude  ,
   :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid ,
   :oppaypupaydetid, :oppaypureference, :oppaypuispaid, :oppaypunameoncard, :oppaypuexpmonth, :oppaypuexpyear, :oppaypusecuritycode, :oppaypupaymethodid, :oppaypupayagainst, :oppaypucardtypeid, :oppaypucardnumber, :oppaypureceivedby, :oppaypureceivedon, :oppaypujobid 
     do begin
       /* Note: - on this one I don't do the get rmbreakdown stuff as I am sure this
        * will only ever be used to get a job list for the payment method report so
        * the breakdown information is not needed so why bother doing another select
        */                
        SUSPEND;
   end
END^


ALTER PROCEDURE MYGET_JOBSFROMTO (
    IPSTARTDATE DATE = null,
    IPENDDATE DATE = null)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT 
  job.jobid, job.jobtype, job.bintypeid_out, job.bins_out, job.bintypeid_in, job.bins_in, job.driverid, job.jobtime, job.contact, job.comments, job.jobstatus, job.njobtime, job.priceareaid, job.custreference, job.asbestosbins, job.orderdayseqno, job.dtentered, job.dtlastamended, job.versionno, job.jobdate, job.paymethodid, job.JOBDETAILSDONE, job.invno, job.invlineno, job.invoiceable, job.INCEX, job.DESPATCHDOCKET,job.officenotes, job.dobinnos, job.pubinnos, job.vwjobseqno, job.fromsiteid, job.tositeid, job.epa, job.wtd, job.moveiddo, job.moveidpu, job.fulle, job.bintyperelocate, job.bins_relocate, job.invoicerelocate, job.binformatout, job.binformatin, job.binformatrel, job.paymreference, job.ispaid, job.materialid, job.userid, job.telephone, job.prioritylevel, job.rgweight, job.rgid, job.sitebins, job.orderplacedby, job.puweight, job.additionalcharges, job.whentoinvoice, job.extaxprice  ,
  sorder.orderid, sorder.contact, sorder.complete, sorder.invtype, sorder.bybinno, sorder.versionno, SORDER.CUSTTYPE, sorder.REFERRALID, sorder.FIRSTJOBDATE, sorder.faxno, sorder.email, sorder.userid, sorder.customersiteid, sorder.cjobno  ,
  address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude  ,
  /* {BillAddrFields} */
  jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid ,
  jobpupaydetails.paydetid, jobpupaydetails.reference, jobpupaydetails.ispaid, jobpupaydetails.nameoncard, jobpupaydetails.expmonth, jobpupaydetails.expyear, jobpupaydetails.securitycode, jobpupaydetails.paymethodid, jobpupaydetails.paidagainst, jobpupaydetails.cardtypeid, jobpupaydetails.cardnumber, jobpupaydetails.receivedby, jobpupaydetails.entereddate, jobpupaydetails.jobid 
FROM JOB
  left outer join sorder on job.orderid = sorder.orderid
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
  /* left outer join address as billaddr on sorder.billaddrid = billaddr.addrid */
  left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
  left outer join jobpaydetails as jobpupaydetails on job.pupaydetid = jobpupaydetails.paydetid
where job.jobdate >= :ipstartdate
   and job.jobdate <= :ipenddate
INTO
   :opjobjobid, :opjobjobtype, :opjobbintypeid_out, :opjobbins_out, :opjobbintypeid_in, :opjobbins_in, :opjobdriverid, :opjobjobtime, :opjobcontact, :opjobcomments, :opjobjobstatus, :opjobnjobtime, :opjobpriceareaid, :opjobcustref, :opjobasbestos, :opjoborderdayseqno, :opjobdtentered, :opjobdtlastamended, :opjobversionno, :opjobjobdate, :opjobpaymethodid, :opjobjobdetails, :opjobinvno, :opjobinvlineno, :opjobinvoiceable, :opjobincex, :opjobdespdock, :opjobofficenotes, :opdobinnos, :oppubinnos, :opvwjobseqno, :opfromsiteid, :optositeid, :opepa, :opwtd, :opmoveiddo, :opmoveidpu, :opfulle, :opbtrelocate, :opbins_relocate, :opinvoicerelocate, :opbinformatout, :opbinformatin, :opbinformatrel, :oppaymreference, :opispaid, :opjobmaterialid, :opjobuserid, :optelephone, :opprioritylevel, :oprgweight, :oprgid, :opsitebins, :oporderplacedby, :oppuweight, :opadhoccharges, :opjobwhentoinvoice, :opjobextaxprice  ,
    :opordorderid, :opordcontact, :opordcomplete, :opordinvtype, :opordbybinno, :opordversionno, :opordcusttype, :opordreferralid, :opordfirstjob, :opordfaxno, :opordemail, :oporduserid, :opordcustsiteid, :opjobno  ,
    :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude  ,
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude  ,
   /* {BillAddrOutFields} */ 
    :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid ,
    :oppaypupaydetid, :oppaypureference, :oppaypuispaid, :oppaypunameoncard, :oppaypuexpmonth, :oppaypuexpyear, :oppaypusecuritycode, :oppaypupaymethodid, :oppaypupayagainst, :oppaypucardtypeid, :oppaypucardnumber, :oppaypureceivedby, :oppaypureceivedon, :oppaypujobid 
     do begin

         if (opwantsbreakdown = 1 and
            (opjobjobtype = 2 or opjobjobtype = 3))  /* C/O or pickup */
        then begin 
           if (EXISTS(select jobrmbreakdown.jobid from jobrmbreakdown
                      where jobrmbreakdown.jobid = :opjobjobid))
           then opbreakdown = 1;
           else opbreakdown = 0;
        end
        else opbreakdown = -1;

        SUSPEND;
   end
END^


ALTER PROCEDURE MYGET_JOBSFROMTODD (
    IPFROMDD INTEGER,
    IPTODD INTEGER)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT 
  job.jobid, job.jobtype, job.bintypeid_out, job.bins_out, job.bintypeid_in, job.bins_in, job.driverid, job.jobtime, job.contact, job.comments, job.jobstatus, job.njobtime, job.priceareaid, job.custreference, job.asbestosbins, job.orderdayseqno, job.dtentered, job.dtlastamended, job.versionno, job.jobdate, job.paymethodid, job.JOBDETAILSDONE, job.invno, job.invlineno, job.invoiceable, job.INCEX, job.DESPATCHDOCKET,job.officenotes, job.dobinnos, job.pubinnos, job.vwjobseqno, job.fromsiteid, job.tositeid, job.epa, job.wtd, job.moveiddo, job.moveidpu, job.fulle, job.bintyperelocate, job.bins_relocate, job.invoicerelocate, job.binformatout, job.binformatin, job.binformatrel, job.paymreference, job.ispaid, job.materialid, job.userid, job.telephone, job.prioritylevel, job.rgweight, job.rgid, job.sitebins, job.orderplacedby, job.puweight, job.additionalcharges, job.whentoinvoice, job.extaxprice  ,
  sorder.orderid, sorder.contact, sorder.complete, sorder.invtype, sorder.bybinno, sorder.versionno, SORDER.CUSTTYPE, sorder.REFERRALID, sorder.FIRSTJOBDATE, sorder.faxno, sorder.email, sorder.userid, sorder.customersiteid, sorder.cjobno  ,
  address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude  ,
  jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid ,
  jobpupaydetails.paydetid, jobpupaydetails.reference, jobpupaydetails.ispaid, jobpupaydetails.nameoncard, jobpupaydetails.expmonth, jobpupaydetails.expyear, jobpupaydetails.securitycode, jobpupaydetails.paymethodid, jobpupaydetails.paidagainst, jobpupaydetails.cardtypeid, jobpupaydetails.cardnumber, jobpupaydetails.receivedby, jobpupaydetails.entereddate, jobpupaydetails.jobid 
FROM JOB2
  left outer join job on job2.jobid = job.jobid
  left outer join sorder on job.orderid = sorder.orderid
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
  left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
  left outer join jobpaydetails as jobpupaydetails on job.pupaydetid = jobpupaydetails.paydetid
where job2.idespatchdocketno >= :ipfromdd
   and job2.idespatchdocketno <= :iptodd
INTO
   :opjobjobid, :opjobjobtype, :opjobbintypeid_out, :opjobbins_out, :opjobbintypeid_in, :opjobbins_in, :opjobdriverid, :opjobjobtime, :opjobcontact, :opjobcomments, :opjobjobstatus, :opjobnjobtime, :opjobpriceareaid, :opjobcustref, :opjobasbestos, :opjoborderdayseqno, :opjobdtentered, :opjobdtlastamended, :opjobversionno, :opjobjobdate, :opjobpaymethodid, :opjobjobdetails, :opjobinvno, :opjobinvlineno, :opjobinvoiceable, :opjobincex, :opjobdespdock, :opjobofficenotes, :opdobinnos, :oppubinnos, :opvwjobseqno, :opfromsiteid, :optositeid, :opepa, :opwtd, :opmoveiddo, :opmoveidpu, :opfulle, :opbtrelocate, :opbins_relocate, :opinvoicerelocate, :opbinformatout, :opbinformatin, :opbinformatrel, :oppaymreference, :opispaid, :opjobmaterialid, :opjobuserid, :optelephone, :opprioritylevel, :oprgweight, :oprgid, :opsitebins, :oporderplacedby, :oppuweight, :opadhoccharges, :opjobwhentoinvoice, :opjobextaxprice  ,
    :opordorderid, :opordcontact, :opordcomplete, :opordinvtype, :opordbybinno, :opordversionno, :opordcusttype, :opordreferralid, :opordfirstjob, :opordfaxno, :opordemail, :oporduserid, :opordcustsiteid, :opjobno  ,
    :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude  ,
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude  ,
    :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid ,
    :oppaypupaydetid, :oppaypureference, :oppaypuispaid, :oppaypunameoncard, :oppaypuexpmonth, :oppaypuexpyear, :oppaypusecuritycode, :oppaypupaymethodid, :oppaypupayagainst, :oppaypucardtypeid, :oppaypucardnumber, :oppaypureceivedby, :oppaypureceivedon, :oppaypujobid 
     do begin

         if (opwantsbreakdown = 1 and
            (opjobjobtype = 2 or opjobjobtype = 3))  /* C/O or pickup */
        then begin 
           if (EXISTS(select jobrmbreakdown.jobid from jobrmbreakdown
                      where jobrmbreakdown.jobid = :opjobjobid))
           then opbreakdown = 1;
           else opbreakdown = 0;
        end
        else opbreakdown = -1;

        SUSPEND;
   end
END^


ALTER PROCEDURE MYGET_JOBSONDATE (
    IPDATE DATE)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(28),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPFEETOT DECIMAL(9,2),
    OPSAFETYCHECKTIME TIMESTAMP,
    OPEMAILEDMESSAGE INTEGER)
AS
BEGIN
for SELECT
  job.jobid, job.jobtype, job.bintypeid_out, job.bins_out, job.bintypeid_in, job.bins_in, job.driverid, job.jobtime, job.contact, job.comments, job.jobstatus, job.njobtime, job.priceareaid, job.custreference, job.asbestosbins, job.orderdayseqno, job.dtentered, job.dtlastamended, job.versionno, job.jobdate, job.paymethodid, job.JOBDETAILSDONE, job.invno, job.invlineno, job.invoiceable, job.INCEX, job.DESPATCHDOCKET,job.officenotes, job.dobinnos, job.pubinnos, job.vwjobseqno, job.fromsiteid, job.tositeid, job.epa, job.wtd, job.moveiddo, job.moveidpu, job.fulle, job.bintyperelocate, job.bins_relocate, job.invoicerelocate, job.binformatout, job.binformatin, job.binformatrel, job.paymreference, job.ispaid, job.materialid, job.userid, job.telephone, job.prioritylevel, job.rgweight, job.rgid, job.sitebins, job.orderplacedby, job.puweight, job.additionalcharges, job.whentoinvoice, job.extaxprice  ,
   sorder.orderid, sorder.contact, sorder.complete, sorder.invtype, sorder.bybinno, sorder.versionno, SORDER.CUSTTYPE, sorder.REFERRALID, sorder.FIRSTJOBDATE, sorder.faxno, sorder.email, sorder.userid, sorder.customersiteid, sorder.cjobno  ,
  address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude  ,
  jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid ,
  jobpupaydetails.paydetid, jobpupaydetails.reference, jobpupaydetails.ispaid, jobpupaydetails.nameoncard, jobpupaydetails.expmonth, jobpupaydetails.expyear, jobpupaydetails.securitycode, jobpupaydetails.paymethodid, jobpupaydetails.paidagainst, jobpupaydetails.cardtypeid, jobpupaydetails.cardnumber, jobpupaydetails.receivedby, jobpupaydetails.entereddate, jobpupaydetails.jobid, job.safetychecktime, job.emailedmessage
FROM JOB
  left outer join sorder on job.orderid = sorder.orderid
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
  /* left outer join address as billaddr on sorder.billaddrid = billaddr.addrid */
  left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
  left outer join jobpaydetails as jobpupaydetails on job.pupaydetid = jobpupaydetails.paydetid
where job.jobdate = :ipdate
INTO
   :opjobjobid, :opjobjobtype, :opjobbintypeid_out, :opjobbins_out, :opjobbintypeid_in, :opjobbins_in, :opjobdriverid, :opjobjobtime, :opjobcontact, :opjobcomments, :opjobjobstatus, :opjobnjobtime, :opjobpriceareaid, :opjobcustref, :opjobasbestos, :opjoborderdayseqno, :opjobdtentered, :opjobdtlastamended, :opjobversionno, :opjobjobdate, :opjobpaymethodid, :opjobjobdetails, :opjobinvno, :opjobinvlineno, :opjobinvoiceable, :opjobincex, :opjobdespdock, :opjobofficenotes, :opdobinnos, :oppubinnos, :opvwjobseqno, :opfromsiteid, :optositeid, :opepa, :opwtd, :opmoveiddo, :opmoveidpu, :opfulle, :opbtrelocate, :opbins_relocate, :opinvoicerelocate, :opbinformatout, :opbinformatin, :opbinformatrel, :oppaymreference, :opispaid, :opjobmaterialid, :opjobuserid, :optelephone, :opprioritylevel, :oprgweight, :oprgid, :opsitebins, :oporderplacedby, :oppuweight, :opadhoccharges, :opjobwhentoinvoice, :opjobextaxprice  ,
    :opordorderid, :opordcontact, :opordcomplete, :opordinvtype, :opordbybinno, :opordversionno, :opordcusttype, :opordreferralid, :opordfirstjob, :opordfaxno, :opordemail, :oporduserid, :opordcustsiteid, :opjobno  ,
    :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude  ,
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude  ,
   :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid ,
   :oppaypupaydetid, :oppaypureference, :oppaypuispaid, :oppaypunameoncard, :oppaypuexpmonth, :oppaypuexpyear, :oppaypusecuritycode, :oppaypupaymethodid, :oppaypupayagainst, :oppaypucardtypeid, :oppaypucardnumber, :oppaypureceivedby, :oppaypureceivedon, :oppaypujobid, :opsafetychecktime, opemailedmessage
     do begin

      if (opwantsbreakdown = 1 and
          (opjobjobtype = 2 or opjobjobtype = 3))  /* C/O or pickup */
     then begin
         if (EXISTS(select jobrmbreakdown.jobid from jobrmbreakdown
                      where jobrmbreakdown.jobid = :opjobjobid))
         then opbreakdown = 1;
         else opbreakdown = 0;
     end
     else opbreakdown = -1;

    select sum(jobfee.amount) from jobfee where jobfee.jobid = :opjobjobid
       into :opfeetot;

     SUSPEND;
   end
END^


ALTER PROCEDURE MYGET_JOBSONDATEFORDRIVER (
    IPDATE DATE,
    IPDRIVERID INTEGER)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPFEETOT DECIMAL(9,2),
    OPSAFETYCHECKTIME TIMESTAMP)
AS
BEGIN
for SELECT
  job.jobid, job.jobtype, job.bintypeid_out, job.bins_out,
job.bintypeid_in, job.bins_in, job.driverid, job.jobtime, job.contact,
job.comments, job.jobstatus, job.njobtime, job.priceareaid,
job.custreference, job.asbestosbins, job.orderdayseqno, job.dtentered,
job.dtlastamended, job.versionno, job.jobdate, job.paymethodid,
job.JOBDETAILSDONE, job.invno, job.invlineno, job.invoiceable,
job.INCEX, job.DESPATCHDOCKET,job.officenotes, job.dobinnos,
job.pubinnos, job.vwjobseqno, job.fromsiteid, job.tositeid, job.epa,
job.wtd, job.moveiddo, job.moveidpu, job.fulle, job.bintyperelocate,
job.bins_relocate, job.invoicerelocate, job.binformatout,
job.binformatin, job.binformatrel, job.paymreference, job.ispaid,
job.materialid, job.userid, job.telephone, job.prioritylevel,
job.rgweight, job.rgid, job.sitebins, job.orderplacedby, job.puweight,
job.additionalcharges, job.whentoinvoice, job.extaxprice  ,
   sorder.orderid, sorder.contact, sorder.complete, sorder.invtype,
sorder.bybinno, sorder.versionno, SORDER.CUSTTYPE, sorder.REFERRALID,
sorder.FIRSTJOBDATE, sorder.faxno, sorder.email, sorder.userid,
sorder.customersiteid, sorder.cjobno  ,
  address.addrid, address.streetnumber, address.address1,
address.address2, address.town, address.state, address.postcode, 0, 0,
address.gpslatitude, address.gpslongitude  ,
  customer.custid, customer.name, customer.telephone, customer.mobile,
customer.contact, customer.email, customer.fax, customer.abn,
customer.termsid, customer.onhold, customer.isactive,
customer.comments, customer.custtype, customer.externalcode,
customer.versionno, customer.invperiod, customer.defpriceareaid,
customer.lastpriceareaid, customer.invoicepersite,
customer.defreferralid, customer.salesman, customer.cardtypeid,
customer.cardnumber, customer.nameoncard, customer.expmonth,
customer.expyear, customer.securitycode, customer.wantsbreakdown,
customer.salesmanid, customer.customermodules, customer.docsreceived,
customer.directoryname, customer.creditlimit,
customer.salesmanstartdate, customer.whentoinvoice,
customer.iscustomer, customer.issupplier, customer.supplierflags,
customer.rctiagreement, customer.gstregisteredsince,
customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1,
custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode,
custaddr.gpslatitude, custaddr.gpslongitude  ,
  jobpaydetails.paydetid, jobpaydetails.reference,
jobpaydetails.ispaid, jobpaydetails.nameoncard,
jobpaydetails.expmonth, jobpaydetails.expyear,
jobpaydetails.securitycode, jobpaydetails.paymethodid,
jobpaydetails.paidagainst, jobpaydetails.cardtypeid,
jobpaydetails.cardnumber, jobpaydetails.receivedby,
jobpaydetails.entereddate, jobpaydetails.jobid ,
  jobpupaydetails.paydetid, jobpupaydetails.reference,
jobpupaydetails.ispaid, jobpupaydetails.nameoncard,
jobpupaydetails.expmonth, jobpupaydetails.expyear,
jobpupaydetails.securitycode, jobpupaydetails.paymethodid,
jobpupaydetails.paidagainst, jobpupaydetails.cardtypeid,
jobpupaydetails.cardnumber, jobpupaydetails.receivedby,
jobpupaydetails.entereddate, jobpupaydetails.jobid,
job.safetychecktime
FROM JOB
  left outer join sorder on job.orderid = sorder.orderid
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
  left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
  left outer join jobpaydetails as jobpupaydetails on job.pupaydetid =
jobpupaydetails.paydetid
where job.jobdate = :ipdate
  and job.driverid = :ipdriverid
INTO
   :opjobjobid, :opjobjobtype, :opjobbintypeid_out, :opjobbins_out,
:opjobbintypeid_in, :opjobbins_in, :opjobdriverid, :opjobjobtime,
:opjobcontact, :opjobcomments, :opjobjobstatus, :opjobnjobtime,
:opjobpriceareaid, :opjobcustref, :opjobasbestos, :opjoborderdayseqno,
:opjobdtentered, :opjobdtlastamended, :opjobversionno, :opjobjobdate,
:opjobpaymethodid, :opjobjobdetails, :opjobinvno, :opjobinvlineno,
:opjobinvoiceable, :opjobincex, :opjobdespdock, :opjobofficenotes,
:opdobinnos, :oppubinnos, :opvwjobseqno, :opfromsiteid, :optositeid,
:opepa, :opwtd, :opmoveiddo, :opmoveidpu, :opfulle, :opbtrelocate,
:opbins_relocate, :opinvoicerelocate, :opbinformatout, :opbinformatin,
:opbinformatrel, :oppaymreference, :opispaid, :opjobmaterialid,
:opjobuserid, :optelephone, :opprioritylevel, :oprgweight, :oprgid,
:opsitebins, :oporderplacedby, :oppuweight, :opadhoccharges,
:opjobwhentoinvoice, :opjobextaxprice  ,
    :opordorderid, :opordcontact, :opordcomplete, :opordinvtype,
:opordbybinno, :opordversionno, :opordcusttype, :opordreferralid,
:opordfirstjob, :opordfaxno, :opordemail, :oporduserid,
:opordcustsiteid, :opjobno  ,
    :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown,
:opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude,
:opgpslongitude  ,
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile,
:opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid,
:opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype,
:opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea,
:opcstlastparea, :opinvoicepersite, :opcstdefreferralid,
:opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard,
:opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown,
:opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname,
:opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice,
:opcustiscustomer, :opcustissupplier, :opcustsupplierflags,
:opcustrctiagreement, :opcustgstregisteredsince,
:opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1,
:opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode,
:opcustgpslatitude, :opcustgpslongitude  ,
   :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard,
:oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid,
:oppaypayagainst, :oppaycardtypeid, :oppaycardnumber,
:oppayreceivedby, :oppayreceivedon, :oppayjobid ,
   :oppaypupaydetid, :oppaypureference, :oppaypuispaid,
:oppaypunameoncard, :oppaypuexpmonth, :oppaypuexpyear,
:oppaypusecuritycode, :oppaypupaymethodid, :oppaypupayagainst,
:oppaypucardtypeid, :oppaypucardnumber, :oppaypureceivedby,
:oppaypureceivedon, :oppaypujobid, :opsafetychecktime
     do begin

      if (opwantsbreakdown = 1 and
          (opjobjobtype = 2 or opjobjobtype = 3))  /* C/O or pickup */
     then begin
         if (EXISTS(select jobrmbreakdown.jobid from jobrmbreakdown
                      where jobrmbreakdown.jobid = :opjobjobid))
         then opbreakdown = 1;
         else opbreakdown = 0;
     end
     else opbreakdown = -1;

    select sum(jobfee.amount) from jobfee where jobfee.jobid = :opjobjobid
       into :opfeetot;

     SUSPEND;
   end
END^


ALTER PROCEDURE MYGET_OPENORDERANDJOBS
RETURNS (
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER)
AS
BEGIN
for SELECT 
sorder.orderid, sorder.contact, sorder.complete, sorder.invtype, sorder.bybinno, sorder.versionno, SORDER.CUSTTYPE, sorder.REFERRALID, sorder.FIRSTJOBDATE, sorder.faxno, sorder.email, sorder.userid, sorder.customersiteid, sorder.cjobno ,
address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude ,
customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
/* {BillAddrFields} */
FROM SORDER
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid 
  /* left outer join address as billaddr on sorder.billaddrid = billaddr.addrid */
where complete = 0
INTO 
:opordorderid, :opordcontact, :opordcomplete, :opordinvtype, :opordbybinno, :opordversionno, :opordcusttype, :opordreferralid, :opordfirstjob, :opordfaxno, :opordemail, :oporduserid, :opordcustsiteid, :opjobno ,
:opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude ,
:opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
:opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
/* {BillAddrOutFields} */
DO begin
  for select
   job.jobid, job.jobtype, job.bintypeid_out, job.bins_out, job.bintypeid_in, job.bins_in, job.driverid, job.jobtime, job.contact, job.comments, job.jobstatus, job.njobtime, job.priceareaid, job.custreference, job.asbestosbins, job.orderdayseqno, job.dtentered, job.dtlastamended, job.versionno, job.jobdate, job.paymethodid, job.JOBDETAILSDONE, job.invno, job.invlineno, job.invoiceable, job.INCEX, job.DESPATCHDOCKET,job.officenotes, job.dobinnos, job.pubinnos, job.vwjobseqno, job.fromsiteid, job.tositeid, job.epa, job.wtd, job.moveiddo, job.moveidpu, job.fulle, job.bintyperelocate, job.bins_relocate, job.invoicerelocate, job.binformatout, job.binformatin, job.binformatrel, job.paymreference, job.ispaid, job.materialid, job.userid, job.telephone, job.prioritylevel, job.rgweight, job.rgid, job.sitebins, job.orderplacedby, job.puweight, job.additionalcharges, job.whentoinvoice, job.extaxprice ,
   jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid ,
   jobpupaydetails.paydetid, jobpupaydetails.reference, jobpupaydetails.ispaid, jobpupaydetails.nameoncard, jobpupaydetails.expmonth, jobpupaydetails.expyear, jobpupaydetails.securitycode, jobpupaydetails.paymethodid, jobpupaydetails.paidagainst, jobpupaydetails.cardtypeid, jobpupaydetails.cardnumber, jobpupaydetails.receivedby, jobpupaydetails.entereddate, jobpupaydetails.jobid 
    from job
    left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
    left outer join jobpaydetails as jobpupaydetails on job.pupaydetid =              jobpupaydetails.paydetid
    where job.orderid = :opordorderid
  into
   :opjobjobid, :opjobjobtype, :opjobbintypeid_out, :opjobbins_out, :opjobbintypeid_in, :opjobbins_in, :opjobdriverid, :opjobjobtime, :opjobcontact, :opjobcomments, :opjobjobstatus, :opjobnjobtime, :opjobpriceareaid, :opjobcustref, :opjobasbestos, :opjoborderdayseqno, :opjobdtentered, :opjobdtlastamended, :opjobversionno, :opjobjobdate, :opjobpaymethodid, :opjobjobdetails, :opjobinvno, :opjobinvlineno, :opjobinvoiceable, :opjobincex, :opjobdespdock, :opjobofficenotes, :opdobinnos, :oppubinnos, :opvwjobseqno, :opfromsiteid, :optositeid, :opepa, :opwtd, :opmoveiddo, :opmoveidpu, :opfulle, :opbtrelocate, :opbins_relocate, :opinvoicerelocate, :opbinformatout, :opbinformatin, :opbinformatrel, :oppaymreference, :opispaid, :opjobmaterialid, :opjobuserid, :optelephone, :opprioritylevel, :oprgweight, :oprgid, :opsitebins, :oporderplacedby, :oppuweight, :opadhoccharges, :opjobwhentoinvoice, :opjobextaxprice ,
  :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid ,
  :oppaypupaydetid, :oppaypureference, :oppaypuispaid, :oppaypunameoncard, :oppaypuexpmonth, :oppaypuexpyear, :oppaypusecuritycode, :oppaypupaymethodid, :oppaypupayagainst, :oppaypucardtypeid, :oppaypucardnumber, :oppaypureceivedby, :oppaypureceivedon, :oppaypujobid 
  do  begin

      if (opwantsbreakdown = 1 and
          (opjobjobtype = 2 or opjobjobtype = 3))  /* C/O or pickup */
     then begin 
         if (EXISTS(select jobrmbreakdown.jobid from jobrmbreakdown
                      where jobrmbreakdown.jobid = :opjobjobid))
         then opbreakdown = 1;
         else opbreakdown = 0;
     end
     else opbreakdown = -1;

     SUSPEND;
  end
end  
END^


ALTER PROCEDURE MYGET_ORDERANDJOBS (
    IPORDERID INTEGER = null)
RETURNS (
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPSAFETYCHECKTIME TIMESTAMP)
AS
BEGIN
for SELECT 
sorder.orderid, sorder.contact, sorder.complete, sorder.invtype, sorder.bybinno, sorder.versionno, SORDER.CUSTTYPE, sorder.REFERRALID, sorder.FIRSTJOBDATE, sorder.faxno, sorder.email, sorder.userid, sorder.customersiteid, sorder.cjobno ,
address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude ,
customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
/* {BillAddrFields} */
FROM SORDER
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid 
 /* left outer join address as billaddr on sorder.billaddrid = billaddr.addrid */
where sorder.orderid = :iporderid
INTO 
:opordorderid, :opordcontact, :opordcomplete, :opordinvtype, :opordbybinno, :opordversionno, :opordcusttype, :opordreferralid, :opordfirstjob, :opordfaxno, :opordemail, :oporduserid, :opordcustsiteid, :opjobno ,
:opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude ,
:opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
:opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
/* {BillAddrOutFields} */
DO begin
  for select
   job.jobid, job.jobtype, job.bintypeid_out, job.bins_out, job.bintypeid_in, job.bins_in, job.driverid, job.jobtime, job.contact, job.comments, job.jobstatus, job.njobtime, job.priceareaid, job.custreference, job.asbestosbins, job.orderdayseqno, job.dtentered, job.dtlastamended, job.versionno, job.jobdate, job.paymethodid, job.JOBDETAILSDONE, job.invno, job.invlineno, job.invoiceable, job.INCEX, job.DESPATCHDOCKET,job.officenotes, job.dobinnos, job.pubinnos, job.vwjobseqno, job.fromsiteid, job.tositeid, job.epa, job.wtd, job.moveiddo, job.moveidpu, job.fulle, job.bintyperelocate, job.bins_relocate, job.invoicerelocate, job.binformatout, job.binformatin, job.binformatrel, job.paymreference, job.ispaid, job.materialid, job.userid, job.telephone, job.prioritylevel, job.rgweight, job.rgid, job.sitebins, job.orderplacedby, job.puweight, job.additionalcharges, job.whentoinvoice, job.extaxprice ,
   jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid ,
   jobpupaydetails.paydetid, jobpupaydetails.reference, jobpupaydetails.ispaid, jobpupaydetails.nameoncard, jobpupaydetails.expmonth, jobpupaydetails.expyear, jobpupaydetails.securitycode, jobpupaydetails.paymethodid, jobpupaydetails.paidagainst, jobpupaydetails.cardtypeid, jobpupaydetails.cardnumber, jobpupaydetails.receivedby, jobpupaydetails.entereddate, jobpupaydetails.jobid , job.safetychecktime
    from job
   left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
   left outer join jobpaydetails as jobpupaydetails on job.pupaydetid = jobpupaydetails.paydetid
    where job.orderid = :opordorderid
  into
   :opjobjobid, :opjobjobtype, :opjobbintypeid_out, :opjobbins_out, :opjobbintypeid_in, :opjobbins_in, :opjobdriverid, :opjobjobtime, :opjobcontact, :opjobcomments, :opjobjobstatus, :opjobnjobtime, :opjobpriceareaid, :opjobcustref, :opjobasbestos, :opjoborderdayseqno, :opjobdtentered, :opjobdtlastamended, :opjobversionno, :opjobjobdate, :opjobpaymethodid, :opjobjobdetails, :opjobinvno, :opjobinvlineno, :opjobinvoiceable, :opjobincex, :opjobdespdock, :opjobofficenotes, :opdobinnos, :oppubinnos, :opvwjobseqno, :opfromsiteid, :optositeid, :opepa, :opwtd, :opmoveiddo, :opmoveidpu, :opfulle, :opbtrelocate, :opbins_relocate, :opinvoicerelocate, :opbinformatout, :opbinformatin, :opbinformatrel, :oppaymreference, :opispaid, :opjobmaterialid, :opjobuserid, :optelephone, :opprioritylevel, :oprgweight, :oprgid, :opsitebins, :oporderplacedby, :oppuweight, :opadhoccharges, :opjobwhentoinvoice, :opjobextaxprice ,
   :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid ,
   :oppaypupaydetid, :oppaypureference, :oppaypuispaid, :oppaypunameoncard, :oppaypuexpmonth, :oppaypuexpyear, :oppaypusecuritycode, :oppaypupaymethodid, :oppaypupayagainst, :oppaypucardtypeid, :oppaypucardnumber, :oppaypureceivedby, :oppaypureceivedon, :oppaypujobid , :opsafetychecktime
  do begin

        if (opwantsbreakdown = 1 and
          (opjobjobtype = 2 or opjobjobtype = 3))  /* C/O or pickup */
       then begin 
         if (EXISTS(select jobrmbreakdown.jobid from jobrmbreakdown
                      where jobrmbreakdown.jobid = :opjobjobid))
         then opbreakdown = 1;
         else opbreakdown = 0;
      end
      else opbreakdown = -1;

       SUSPEND;

  end
end  
END^


ALTER PROCEDURE MYGET_ORDERJOBS (
    IPORDERID INTEGER DEFAULT NULL)
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER)
AS
BEGIN
for select
   job.jobid, job.jobtype, job.bintypeid_out, job.bins_out, job.bintypeid_in, job.bins_in, job.driverid, job.jobtime, job.contact, job.comments, job.jobstatus, job.njobtime, job.priceareaid, job.custreference, job.asbestosbins, job.orderdayseqno, job.dtentered, job.dtlastamended, job.versionno, job.jobdate, job.paymethodid, job.JOBDETAILSDONE, job.invno, job.invlineno, job.invoiceable, job.INCEX, job.DESPATCHDOCKET,job.officenotes, job.dobinnos, job.pubinnos, job.vwjobseqno, job.fromsiteid, job.tositeid, job.epa, job.wtd, job.moveiddo, job.moveidpu, job.fulle, job.bintyperelocate, job.bins_relocate, job.invoicerelocate, job.binformatout, job.binformatin, job.binformatrel, job.paymreference, job.ispaid, job.materialid, job.userid, job.telephone, job.prioritylevel, job.rgweight, job.rgid, job.sitebins, job.orderplacedby, job.puweight, job.additionalcharges, job.whentoinvoice, job.extaxprice ,
   jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid ,
   jobpupaydetails.paydetid, jobpupaydetails.reference, jobpupaydetails.ispaid, jobpupaydetails.nameoncard, jobpupaydetails.expmonth, jobpupaydetails.expyear, jobpupaydetails.securitycode, jobpupaydetails.paymethodid, jobpupaydetails.paidagainst, jobpupaydetails.cardtypeid, jobpupaydetails.cardnumber, jobpupaydetails.receivedby, jobpupaydetails.entereddate, jobpupaydetails.jobid 
    from job
       left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
       left outer join jobpaydetails as jobpupaydetails on job.pupaydetid = jobpupaydetails.paydetid
    where job.orderid = :iporderid
  into
   :opjobjobid, :opjobjobtype, :opjobbintypeid_out, :opjobbins_out, :opjobbintypeid_in, :opjobbins_in, :opjobdriverid, :opjobjobtime, :opjobcontact, :opjobcomments, :opjobjobstatus, :opjobnjobtime, :opjobpriceareaid, :opjobcustref, :opjobasbestos, :opjoborderdayseqno, :opjobdtentered, :opjobdtlastamended, :opjobversionno, :opjobjobdate, :opjobpaymethodid, :opjobjobdetails, :opjobinvno, :opjobinvlineno, :opjobinvoiceable, :opjobincex, :opjobdespdock, :opjobofficenotes, :opdobinnos, :oppubinnos, :opvwjobseqno, :opfromsiteid, :optositeid, :opepa, :opwtd, :opmoveiddo, :opmoveidpu, :opfulle, :opbtrelocate, :opbins_relocate, :opinvoicerelocate, :opbinformatout, :opbinformatin, :opbinformatrel, :oppaymreference, :opispaid, :opjobmaterialid, :opjobuserid, :optelephone, :opprioritylevel, :oprgweight, :oprgid, :opsitebins, :oporderplacedby, :oppuweight, :opadhoccharges, :opjobwhentoinvoice, :opjobextaxprice ,
   :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid ,
   :oppaypupaydetid, :oppaypureference, :oppaypuispaid, :oppaypunameoncard, :oppaypuexpmonth, :oppaypuexpyear, :oppaypusecuritycode, :oppaypupaymethodid, :oppaypupayagainst, :oppaypucardtypeid, :oppaypucardnumber, :oppaypureceivedby, :oppaypureceivedon, :oppaypujobid 
  do  begin

     if  (opjobjobtype = 2 or opjobjobtype = 3)  /* C/O or pickup */
     then begin 
         if (EXISTS(select jobrmbreakdown.jobid from jobrmbreakdown
                      where jobrmbreakdown.jobid = :opjobjobid))
         then opbreakdown = 1;
         else opbreakdown = 0;
     end
     else opbreakdown = -1;
 
      SUSPEND;
  end
END^


ALTER PROCEDURE MYGET_ORDERSONWKNO (
    IPWKNO INTEGER DEFAULT NULL)
RETURNS (
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER)
AS
BEGIN
for select 
sorder.orderid, sorder.contact, sorder.complete, sorder.invtype, sorder.bybinno, sorder.versionno, SORDER.CUSTTYPE, sorder.REFERRALID, sorder.FIRSTJOBDATE, sorder.faxno, sorder.email, sorder.userid, sorder.customersiteid, sorder.cjobno ,
address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude ,
customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
/* {BillAddrFields} */
FROM orderweeks
  left outer join SORDER on orderweeks.orderid = sorder.orderid
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid 
  /* left outer join address as billaddr on sorder.billaddrid = billaddr.addrid */
where orderweeks.weekno = :ipwkno
INTO 
:opordorderid, :opordcontact, :opordcomplete, :opordinvtype, :opordbybinno, :opordversionno, :opordcusttype, :opordreferralid, :opordfirstjob, :opordfaxno, :opordemail, :oporduserid, :opordcustsiteid, :opjobno ,
:opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude ,
:opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
:opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
/* {BillAddrOutFields} */
DO begin
  for select
   job.jobid, job.jobtype, job.bintypeid_out, job.bins_out, job.bintypeid_in, job.bins_in, job.driverid, job.jobtime, job.contact, job.comments, job.jobstatus, job.njobtime, job.priceareaid, job.custreference, job.asbestosbins, job.orderdayseqno, job.dtentered, job.dtlastamended, job.versionno, job.jobdate, job.paymethodid, job.JOBDETAILSDONE, job.invno, job.invlineno, job.invoiceable, job.INCEX, job.DESPATCHDOCKET,job.officenotes, job.dobinnos, job.pubinnos, job.vwjobseqno, job.fromsiteid, job.tositeid, job.epa, job.wtd, job.moveiddo, job.moveidpu, job.fulle, job.bintyperelocate, job.bins_relocate, job.invoicerelocate, job.binformatout, job.binformatin, job.binformatrel, job.paymreference, job.ispaid, job.materialid, job.userid, job.telephone, job.prioritylevel, job.rgweight, job.rgid, job.sitebins, job.orderplacedby, job.puweight, job.additionalcharges, job.whentoinvoice, job.extaxprice ,
   jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid ,
   jobpupaydetails.paydetid, jobpupaydetails.reference, jobpupaydetails.ispaid, jobpupaydetails.nameoncard, jobpupaydetails.expmonth, jobpupaydetails.expyear, jobpupaydetails.securitycode, jobpupaydetails.paymethodid, jobpupaydetails.paidagainst, jobpupaydetails.cardtypeid, jobpupaydetails.cardnumber, jobpupaydetails.receivedby, jobpupaydetails.entereddate, jobpupaydetails.jobid 
    from job
   left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
   left outer join jobpaydetails as jobpupaydetails on job.pupaydetid = jobpupaydetails.paydetid
    where job.orderid = :opordorderid
  into
   :opjobjobid, :opjobjobtype, :opjobbintypeid_out, :opjobbins_out, :opjobbintypeid_in, :opjobbins_in, :opjobdriverid, :opjobjobtime, :opjobcontact, :opjobcomments, :opjobjobstatus, :opjobnjobtime, :opjobpriceareaid, :opjobcustref, :opjobasbestos, :opjoborderdayseqno, :opjobdtentered, :opjobdtlastamended, :opjobversionno, :opjobjobdate, :opjobpaymethodid, :opjobjobdetails, :opjobinvno, :opjobinvlineno, :opjobinvoiceable, :opjobincex, :opjobdespdock, :opjobofficenotes, :opdobinnos, :oppubinnos, :opvwjobseqno, :opfromsiteid, :optositeid, :opepa, :opwtd, :opmoveiddo, :opmoveidpu, :opfulle, :opbtrelocate, :opbins_relocate, :opinvoicerelocate, :opbinformatout, :opbinformatin, :opbinformatrel, :oppaymreference, :opispaid, :opjobmaterialid, :opjobuserid, :optelephone, :opprioritylevel, :oprgweight, :oprgid, :opsitebins, :oporderplacedby, :oppuweight, :opadhoccharges, :opjobwhentoinvoice, :opjobextaxprice ,
   :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid ,
   :oppaypupaydetid, :oppaypureference, :oppaypuispaid, :oppaypunameoncard, :oppaypuexpmonth, :oppaypuexpyear, :oppaypusecuritycode, :oppaypupaymethodid, :oppaypupayagainst, :oppaypucardtypeid, :oppaypucardnumber, :oppaypureceivedby, :oppaypureceivedon, :oppaypujobid 
  do begin

     if (opwantsbreakdown = 1 and
          (opjobjobtype = 2 or opjobjobtype = 3))  /* C/O or pickup */
     then begin 
         if (EXISTS(select jobrmbreakdown.jobid from jobrmbreakdown
                      where jobrmbreakdown.jobid = :opjobjobid))
         then opbreakdown = 1;
         else opbreakdown = 0;
     end
     else opbreakdown = -1;

      SUSPEND;
  end
end  
END^


ALTER PROCEDURE MYGET_PAYDETAILS (
    IPPAYDETID INTEGER DEFAULT NULL)
RETURNS (
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER)
AS
BEGIN
for SELECT 
  jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid 
FROM JOBPAYDETAILS
where jobpaydetails.paydetid = :ippaydetid
INTO
    :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid 
do 
        SUSPEND;
END^


ALTER PROCEDURE MYGET_PINVOICE (
    IPPINVID INTEGER DEFAULT NULL)
RETURNS (
    OPPINVID INTEGER,
    OPINVINVNO INTEGER,
    OPINVPINVBATCHNO INTEGER,
    OPINVINVDATE DATE,
    OPINVDUEDATE DATE,
    OPINVEXGST FLOAT,
    OPINVGST FLOAT,
    OPINVTOTAL FLOAT,
    OPINVCOMMENTS CHAR(200),
    OPINVPAIDINFULL INTEGER,
    OPINVPAIDSOFAR DECIMAL(18,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT
  pinvoice.pinvid, pinvoice.invno, pinvoice.pinvbatchid, pinvoice.invdate, pinvoice.duedate, pinvoice.comments, pinvoice.paidinfull, pinvoice.paidsofar  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM pinvoice
left outer join customer on pinvoice.custid = customer.custid
left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where pinvoice.pinvid = :ippinvid
INTO 
  :oppinvid, :opinvinvno, :opinvpinvbatchno, :opinvinvdate, :opinvduedate, :opinvcomments, :opinvpaidinfull, :opinvpaidsofar  ,
  :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
do BEGIN
  select sum(pinvline.exgstvalue),
         sum(pinvline.gst),
         sum(pinvline.totalvalue)
         from PINVLINE
         where pinvline.pinvid = :ippinvid
         into opinvexgst, opinvgst, opinvtotal;
  SUSPEND;
end
END^


ALTER PROCEDURE MYGET_RGORDER (
    IPRGID INTEGER DEFAULT NULL)
RETURNS (
    OPRGSOID INTEGER,
    OPRGSOORDERNO INTEGER,
    OPRGSOTONS DECIMAL(8,2),
    OPRGSODELIVERYTYPE SMALLINT,
    OPRGSOINCPRICE DECIMAL(8,2),
    OPRGSODRIVERNOTES CHAR(200),
    OPRGSOCUSTREF CHAR(20),
    OPRGSOCONTACTNAME CHAR(30),
    OPRGSOCONTACTPHONE CHAR(30),
    OPRGSODELIVERYDATE TIMESTAMP,
    OPRGSODELIVERYCTIME CHAR(10),
    OPRGSODELIVERYNTIME TIMESTAMP,
    OPRGRGID INTEGER,
    OPRGDESCRIPTION CHAR(40),
    OPRGDELPRICE DECIMAL(8,2),
    OPRGPUPRICE DECIMAL(8,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for select
   rgsalesorder.RGSOID, rgsalesorder.ORDERNO, rgsalesorder.TONS, rgsalesorder.DELIVERYTYPE, rgsalesorder.INCPRICE, rgsalesorder.DRIVERNOTES, rgsalesorder.CUSTOMERREFERENCE, rgsalesorder.CONTACTNAME, rgsalesorder.CONTACTPHONE, rgsalesorder.DELIVERYDATE, rgsalesorder.DELIVERYCTIME, rgsalesorder.DELIVERYNTIME, recycledgoods.rgid, recycledgoods.description, recycledgoods.deliveredincprice, recycledgoods.pickupincprice ,
   customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
   address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude 
    from rgsalesorder
       left outer join recycledgoods on rgsalesorder.rgid = recycledgoods.rgid
       left outer join customer on rgsalesorder.custid = customer.custid
       left outer join address on rgsalesorder.addrid = address.addrid
       left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
    where rgsalesorder.rgid = :iprgid
  into
   :oprgsoid, :oprgsoorderno, :oprgsotons, :oprgsodeliverytype, :oprgsoincprice, :oprgsodrivernotes, :oprgsocustref, :oprgsocontactname, :oprgsocontactphone, :oprgsodeliverydate, :oprgsodeliveryctime, :oprgsodeliveryntime, :oprgrgid, :oprgdescription, :oprgdelprice, :oprgpuprice ,
   :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
   :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude 
  do  SUSPEND;
END^


ALTER PROCEDURE MYGET_RGORDERBYINV (
    IPINVNO INTEGER DEFAULT NULL,
    IPINVLINENO INTEGER DEFAULT NULL)
RETURNS (
    OPRGSOID INTEGER,
    OPCUSTID INTEGER,
    OPDELIVERYDATE DATE,
    OPCONTACTNAME CHAR(30),
    OPCUSTREF CHAR(20),
    OPWEIGHT DECIMAL(15,2),
    OPPRICE DECIMAL(15,2),
    OPRGID INTEGER,
    OPRGOFFICENOTES CHAR(200),
    OPORDERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPPHONE CHAR(30),
    OPFAX CHAR(30),
    OPEMAIL CHAR(50),
    OPMYOBJOBNO CHAR(50),
    OPGROSSWEIGHT DECIMAL(8,2),
    OPTAREWEIGHT DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(8,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
begin
  for select rgsalesorder.rgsoid,
             rgsalesorder.custid,
             rgsalesorder.deliverydate,
             rgsalesorder.contactname,
             rgsalesorder.customerreference,
             rgsalesorder.tons,
             rgsalesorder.incprice,
             rgsalesorder.rgid,
             rgsalesorder.officenotes,
             rgsalesorder.orderid,
             rgsalesorder.contactphone,
             rgsalesorder.fax,
             rgsalesorder.email,
             rgsalesorder.myobjobno,
             rgsalesorder.grossweight,
             rgsalesorder.tareweight,
             rgsalesorder.surcharge,
             rgsalesorder.cashrounding,
           customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
           custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude ,
           address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude 
      from rgsalesorder
      left outer join customer on rgsalesorder.custid = customer.custid    
      left outer join address as custaddr on customer.custaddrid = custaddr.addrid
      left outer join address on rgsalesorder.addrid = address.addrid
      left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
      where rgsalesorder.orderid = :ipinvno
        and rgsalesorder.orderno = :ipinvlineno
       into :oprgsoid,
            :opcustid,
            :opdeliverydate,
            :opcontactname,
            :opcustref,
            :opweight,
            :opprice,
            :oprgid,
            :oprgofficenotes,
            :oporderid,
            :opphone,
            :opfax,
            :opemail,
            :opmyobjobno,
            :opgrossweight,
            :optareweight,
            :opsurcharge,
            :opcashrounding,
  :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude ,
  :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude 
  do begin
      select sum(job.rgweight)
              from job
              where job.orderid = :oporderid
                and job.jobstatus = 3 /* done */
               into :optonsdelivered;
       if (optonsdelivered is null)
       then optonsdelivered = 0;

       select sum(job.rgweight)
              from job
              where job.orderid = :oporderid
                and job.jobstatus != 3 /* not done */
               into :optonsscheduled;
       if (optonsscheduled is null)
       then optonsscheduled = 0;

       suspend;
   end
END^


ALTER PROCEDURE MYGET_RGORDERFORDATE (
    IPFORDATE DATE DEFAULT NULL,
    IPDELIVERYTYPE INTEGER DEFAULT NULL)
RETURNS (
    OPRGSOID INTEGER,
    OPCUSTID INTEGER,
    OPDELIVERYDATE DATE,
    OPCONTACTNAME CHAR(30),
    OPCUSTREF CHAR(20),
    OPWEIGHT DECIMAL(15,2),
    OPPRICE DECIMAL(15,2),
    OPRGID INTEGER,
    OPRGOFFICENOTES CHAR(200),
    OPORDERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPPHONE CHAR(30),
    OPFAX CHAR(30),
    OPEMAIL CHAR(50),
    OPMYOBJOBNO CHAR(50),
    OPGROSSWEIGHT DECIMAL(8,2),
    OPTAREWEIGHT DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(8,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER)
AS
begin
  for select rgsalesorder.rgsoid,
             rgsalesorder.custid,
             rgsalesorder.deliverydate,
             rgsalesorder.contactname,
             rgsalesorder.customerreference,
             rgsalesorder.tons,
             rgsalesorder.incprice,
             rgsalesorder.rgid,
             rgsalesorder.officenotes,
             rgsalesorder.orderid,
             rgsalesorder.contactphone,
             rgsalesorder.fax,
             rgsalesorder.email,
             rgsalesorder.myobjobno,
             rgsalesorder.grossweight,
             rgsalesorder.tareweight,
             rgsalesorder.surcharge,
             rgsalesorder.cashrounding,
           customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
           custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude ,
           address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude ,
           jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid 
      from rgsalesorder
      left outer join customer on rgsalesorder.custid = customer.custid    
      left outer join address as custaddr on customer.custaddrid = custaddr.addrid
      left outer join address on rgsalesorder.addrid = address.addrid
      left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
      left outer join jobpaydetails on jobpaydetails.paydetid = rgsalesorder.paydetid
      where rgsalesorder.deliverydate = :ipfordate
        and rgsalesorder.deliverytype = :ipdeliverytype
       into :oprgsoid,
            :opcustid,
            :opdeliverydate,
            :opcontactname,
            :opcustref,
            :opweight,
            :opprice,
            :oprgid,
            :oprgofficenotes,
            :oporderid,
            :opphone,
            :opfax,
            :opemail,
            :opmyobjobno,
            :opgrossweight,
            :optareweight,
            :opsurcharge,
            :opcashrounding,
  :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude ,
  :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude ,
  :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid 
  do begin
      select sum(job.rgweight)
              from job
              where job.orderid = :oporderid
                and job.jobstatus = 3 /* done */
               into :optonsdelivered;
       if (optonsdelivered is null)
       then optonsdelivered = 0;

       select sum(job.rgweight)
              from job
              where job.orderid = :oporderid
                and job.jobstatus != 3 /* not done */
               into :optonsscheduled;
       if (optonsscheduled is null)
       then optonsscheduled = 0;

       suspend;
   end
END^


ALTER PROCEDURE MYGET_RGPICKUPS (
    IPDELTYPE INTEGER)
RETURNS (
    OPRGSOID INTEGER,
    OPCUSTID INTEGER,
    OPDELIVERYDATE DATE,
    OPCONTACTNAME CHAR(30),
    OPCUSTREF CHAR(20),
    OPWEIGHT DECIMAL(15,2),
    OPPRICE DECIMAL(15,2),
    OPRGID INTEGER,
    OPRGOFFICENOTES CHAR(200),
    OPORDERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPPHONE CHAR(30),
    OPFAX CHAR(30),
    OPEMAIL CHAR(50),
    OPMYOBJOBNO CHAR(50),
    OPGROSSWEIGHT DECIMAL(8,2),
    OPTAREWEIGHT DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(8,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER)
AS
begin
  for select rgsalesorder.rgsoid,
             rgsalesorder.custid,
             rgsalesorder.deliverydate,
             rgsalesorder.contactname,
             rgsalesorder.customerreference,
             rgsalesorder.tons,
             rgsalesorder.incprice,
             rgsalesorder.rgid,
             rgsalesorder.officenotes,
             rgsalesorder.orderid,
             rgsalesorder.contactphone,
             rgsalesorder.fax,
             rgsalesorder.email,
             rgsalesorder.myobjobno,
             rgsalesorder.grossweight,
             rgsalesorder.tareweight,
             rgsalesorder.surcharge,
             rgsalesorder.cashrounding,
           customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
           custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude ,
           address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude ,
           jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid 
      from rgsalesorder
      left outer join customer on rgsalesorder.custid = customer.custid    
      left outer join address as custaddr on customer.custaddrid = custaddr.addrid
      left outer join address on rgsalesorder.addrid = address.addrid
      left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
      left outer join jobpaydetails on jobpaydetails.paydetid = rgsalesorder.paydetid
      where rgsalesorder.complete = 0
        and rgsalesorder.deliverytype = :ipdeltype
       into :oprgsoid,
            :opcustid,
            :opdeliverydate,
            :opcontactname,
            :opcustref,
            :opweight,
            :opprice,
            :oprgid,
            :oprgofficenotes,
            :oporderid,
            :opphone,
            :opfax,
            :opemail,
            :opmyobjobno,
            :opgrossweight,
            :optareweight,
            :opsurcharge,
            :opcashrounding,
  :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude ,
  :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude ,
  :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid 
  do begin
      select sum(job.rgweight)
              from job
              where job.orderid = :oporderid
                and job.jobstatus = 3 /* done */
               into :optonsdelivered;
       if (optonsdelivered is null)
       then optonsdelivered = 0;

       select sum(job.rgweight)
              from job
              where job.orderid = :oporderid
                and job.jobstatus != 3 /* not done */
               into :optonsscheduled;
       if (optonsscheduled is null)
       then optonsscheduled = 0;

      suspend;
  end
END^


ALTER PROCEDURE MYGET_SEARCHFOR (
    IPCUSTREF CHAR(100),
    IPDESPATCH CHAR(30),
    IPINVNO INTEGER,
    IPCOMMENTS CHAR(30),
    IPADDRESS CHAR(30),
    IPCONTACT CHAR(30),
    IPFROMDATE DATE,
    IPEPA CHAR(30),
    IPWTD CHAR(30),
    IPBINNO CHAR(8),
    IPPHONE CHAR(10),
    IPCUSTID INTEGER,
    IPMYOBJOBNO CHAR(20))
RETURNS (
    OPJOBJOBID INTEGER,
    OPJOBJOBTYPE INTEGER,
    OPJOBBINTYPEID_OUT INTEGER,
    OPJOBBINS_OUT INTEGER,
    OPJOBBINTYPEID_IN INTEGER,
    OPJOBBINS_IN INTEGER,
    OPJOBDRIVERID INTEGER,
    OPJOBJOBTIME CHAR(10),
    OPJOBCONTACT CHAR(30),
    OPJOBCOMMENTS CHAR(200),
    OPJOBJOBSTATUS INTEGER,
    OPJOBNJOBTIME TIMESTAMP,
    OPJOBPRICEAREAID INTEGER,
    OPJOBCUSTREF CHAR(100),
    OPJOBASBESTOS INTEGER,
    OPJOBORDERDAYSEQNO INTEGER,
    OPJOBDTENTERED TIMESTAMP,
    OPJOBDTLASTAMENDED TIMESTAMP,
    OPJOBVERSIONNO INTEGER,
    OPJOBJOBDATE DATE,
    OPJOBPAYMETHODID INTEGER,
    OPJOBJOBDETAILS SMALLINT,
    OPJOBINVNO INTEGER,
    OPJOBINVLINENO INTEGER,
    OPJOBINVOICEABLE SMALLINT,
    OPJOBINCEX INTEGER,
    OPJOBDESPDOCK CHAR(12),
    OPJOBOFFICENOTES CHAR(200),
    OPDOBINNOS CHAR(60),
    OPPUBINNOS CHAR(60),
    OPVWJOBSEQNO INTEGER,
    OPFROMSITEID INTEGER,
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPMOVEIDDO INTEGER,
    OPMOVEIDPU INTEGER,
    OPFULLE SMALLINT,
    OPBTRELOCATE INTEGER,
    OPBINS_RELOCATE INTEGER,
    OPINVOICERELOCATE INTEGER,
    OPBINFORMATOUT INTEGER,
    OPBINFORMATIN INTEGER,
    OPBINFORMATREL INTEGER,
    OPPAYMREFERENCE CHAR(20),
    OPISPAID SMALLINT,
    OPJOBMATERIALID INTEGER,
    OPJOBUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL INTEGER,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS SMALLINT,
    OPBREAKDOWN SMALLINT,
    OPORDERPLACEDBY CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPADHOCCHARGES DECIMAL(7,3),
    OPJOBWHENTOINVOICE INTEGER,
    OPJOBEXTAXPRICE DECIMAL(18,6),
    OPPAYPAYDETID INTEGER,
    OPPAYREFERENCE CHAR(25),
    OPPAYISPAID SMALLINT,
    OPPAYNAMEONCARD CHAR(40),
    OPPAYEXPMONTH SMALLINT,
    OPPAYEXPYEAR SMALLINT,
    OPPAYSECURITYCODE CHAR(6),
    OPPAYPAYMETHODID INTEGER,
    OPPAYPAYAGAINST SMALLINT,
    OPPAYCARDTYPEID INTEGER,
    OPPAYCARDNUMBER CHAR(60),
    OPPAYRECEIVEDBY CHAR(40),
    OPPAYRECEIVEDON DATE,
    OPPAYJOBID INTEGER,
    OPPAYPUPAYDETID INTEGER,
    OPPAYPUREFERENCE CHAR(25),
    OPPAYPUISPAID SMALLINT,
    OPPAYPUNAMEONCARD CHAR(40),
    OPPAYPUEXPMONTH SMALLINT,
    OPPAYPUEXPYEAR SMALLINT,
    OPPAYPUSECURITYCODE CHAR(6),
    OPPAYPUPAYMETHODID INTEGER,
    OPPAYPUPAYAGAINST SMALLINT,
    OPPAYPUCARDTYPEID INTEGER,
    OPPAYPUCARDNUMBER CHAR(60),
    OPPAYPURECEIVEDBY CHAR(40),
    OPPAYPURECEIVEDON DATE,
    OPPAYPUJOBID INTEGER,
    OPORDORDERID INTEGER,
    OPORDCONTACT CHAR(30),
    OPORDCOMPLETE INTEGER,
    OPORDINVTYPE INTEGER,
    OPORDBYBINNO INTEGER,
    OPORDVERSIONNO INTEGER,
    OPORDCUSTTYPE INTEGER,
    OPORDREFERRALID INTEGER,
    OPORDFIRSTJOB DATE,
    OPORDFAXNO CHAR(30),
    OPORDEMAIL CHAR(50),
    OPORDUSERID INTEGER,
    OPORDCUSTSITEID INTEGER,
    OPJOBNO CHAR(20),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
DECLARE VARIABLE RETIT INTEGER;
DECLARE VARIABLE LCUSTREF VARCHAR(30);
DECLARE VARIABLE LDESPATCH VARCHAR(30);
DECLARE VARIABLE LCOMMENTS VARCHAR(30);
DECLARE VARIABLE LCONTACT VARCHAR(30);
DECLARE VARIABLE LADDRESS VARCHAR(30);
DECLARE VARIABLE LEPA VARCHAR(30);
DECLARE VARIABLE LWTD VARCHAR(30);
DECLARE VARIABLE LBINNO VARCHAR(8);
DECLARE VARIABLE LPHONE VARCHAR(10);
DECLARE VARIABLE LPUINVNO INTEGER;
DECLARE VARIABLE LMYOBJOBNO VARCHAR(20);
BEGIN
lcustref = trim(ipcustref);
ldespatch = trim(ipdespatch);
lcomments = trim(ipcomments);
lcontact = trim(ipcontact);
laddress = trim(ipaddress);
lepa = trim(ipepa);
lwtd = trim(ipwtd);
lbinno = trim(ipbinno);
lphone = trim(ipphone);
lmyobjobno = trim(ipmyobjobno);
for SELECT 
  job.jobid, job.jobtype, job.bintypeid_out, job.bins_out, job.bintypeid_in, job.bins_in, job.driverid, job.jobtime, job.contact, job.comments, job.jobstatus, job.njobtime, job.priceareaid, job.custreference, job.asbestosbins, job.orderdayseqno, job.dtentered, job.dtlastamended, job.versionno, job.jobdate, job.paymethodid, job.JOBDETAILSDONE, job.invno, job.invlineno, job.invoiceable, job.INCEX, job.DESPATCHDOCKET,job.officenotes, job.dobinnos, job.pubinnos, job.vwjobseqno, job.fromsiteid, job.tositeid, job.epa, job.wtd, job.moveiddo, job.moveidpu, job.fulle, job.bintyperelocate, job.bins_relocate, job.invoicerelocate, job.binformatout, job.binformatin, job.binformatrel, job.paymreference, job.ispaid, job.materialid, job.userid, job.telephone, job.prioritylevel, job.rgweight, job.rgid, job.sitebins, job.orderplacedby, job.puweight, job.additionalcharges, job.whentoinvoice, job.extaxprice  ,
  jobpaydetails.paydetid, jobpaydetails.reference, jobpaydetails.ispaid, jobpaydetails.nameoncard, jobpaydetails.expmonth, jobpaydetails.expyear, jobpaydetails.securitycode, jobpaydetails.paymethodid, jobpaydetails.paidagainst, jobpaydetails.cardtypeid, jobpaydetails.cardnumber, jobpaydetails.receivedby, jobpaydetails.entereddate, jobpaydetails.jobid ,
  jobpupaydetails.paydetid, jobpupaydetails.reference, jobpupaydetails.ispaid, jobpupaydetails.nameoncard, jobpupaydetails.expmonth, jobpupaydetails.expyear, jobpupaydetails.securitycode, jobpupaydetails.paymethodid, jobpupaydetails.paidagainst, jobpupaydetails.cardtypeid, jobpupaydetails.cardnumber, jobpupaydetails.receivedby, jobpupaydetails.entereddate, jobpupaydetails.jobid ,
  sorder.orderid, sorder.contact, sorder.complete, sorder.invtype, sorder.bybinno, sorder.versionno, SORDER.CUSTTYPE, sorder.REFERRALID, sorder.FIRSTJOBDATE, sorder.faxno, sorder.email, sorder.userid, sorder.customersiteid, sorder.cjobno  ,
  address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude  ,
  /* {BillAddrFields} */
  job2.puinvno
FROM JOB
  left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
  left outer join jobpaydetails as jobpupaydetails on job.pupaydetid = jobpupaydetails.paydetid
  left outer join sorder on job.orderid = sorder.orderid
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
  /* left outer join address as billaddr on sorder.billaddrid = billaddr.addrid */
 left outer join job2 on job.jobid = job2.jobid
where job.jobdate >= :ipfromdate
INTO
    :opjobjobid, :opjobjobtype, :opjobbintypeid_out, :opjobbins_out, :opjobbintypeid_in, :opjobbins_in, :opjobdriverid, :opjobjobtime, :opjobcontact, :opjobcomments, :opjobjobstatus, :opjobnjobtime, :opjobpriceareaid, :opjobcustref, :opjobasbestos, :opjoborderdayseqno, :opjobdtentered, :opjobdtlastamended, :opjobversionno, :opjobjobdate, :opjobpaymethodid, :opjobjobdetails, :opjobinvno, :opjobinvlineno, :opjobinvoiceable, :opjobincex, :opjobdespdock, :opjobofficenotes, :opdobinnos, :oppubinnos, :opvwjobseqno, :opfromsiteid, :optositeid, :opepa, :opwtd, :opmoveiddo, :opmoveidpu, :opfulle, :opbtrelocate, :opbins_relocate, :opinvoicerelocate, :opbinformatout, :opbinformatin, :opbinformatrel, :oppaymreference, :opispaid, :opjobmaterialid, :opjobuserid, :optelephone, :opprioritylevel, :oprgweight, :oprgid, :opsitebins, :oporderplacedby, :oppuweight, :opadhoccharges, :opjobwhentoinvoice, :opjobextaxprice  ,
    :oppaypaydetid, :oppayreference, :oppayispaid, :oppaynameoncard, :oppayexpmonth, :oppayexpyear, :oppaysecuritycode, :oppaypaymethodid, :oppaypayagainst, :oppaycardtypeid, :oppaycardnumber, :oppayreceivedby, :oppayreceivedon, :oppayjobid ,
    :oppaypupaydetid, :oppaypureference, :oppaypuispaid, :oppaypunameoncard, :oppaypuexpmonth, :oppaypuexpyear, :oppaypusecuritycode, :oppaypupaymethodid, :oppaypupayagainst, :oppaypucardtypeid, :oppaypucardnumber, :oppaypureceivedby, :oppaypureceivedon, :oppaypujobid ,
    :opordorderid, :opordcontact, :opordcomplete, :opordinvtype, :opordbybinno, :opordversionno, :opordcusttype, :opordreferralid, :opordfirstjob, :opordfaxno, :opordemail, :oporduserid, :opordcustsiteid, :opjobno  ,
    :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude  ,
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude , 
   /*  {BillAddrOutFields} */
    :LPUINVNO
     do begin
  retit = 0;  /* default to not return it */
   if  (ipcustref != '' and opjobcustref containing lcustref) then retit = 1;

  if (retit = 0 and ipcustid != 0 and opcstcustid = ipcustid)
  then retit = 1;

  if (retit = 0 and ldespatch != '' and opjobdespdock containing ldespatch)
  then  retit = 1;

  if (retit = 0 and ipinvno != 0 and
      (opjobinvno = ipinvno or  lpuinvno = ipinvno)) then retit = 1;  

  if (retit = 0 and lcomments != '')
  then begin
    if (opjobcomments containing lcomments or
       opjobofficenotes containing lcomments)
   then retit = 1;
  end

  if (retit = 0 and laddress != '') then begin
    if (opstreetnumber containing laddress or
      opaddress1 containing laddress or
      opaddress2 containing laddress or
      optown containing laddress or
      opstate containing laddress or
      oppostcode containing laddress
     ) then retit = 1;
  end

  if (retit = 0 and lcontact != '' and opjobcontact containing lcontact)
  then retit = 1;

  if (retit = 0 and lepa != '' and opepa = lepa)
  then retit = 1;

  if (retit = 0 and lwtd != '' and opwtd = lwtd)
  then retit = 1;

  if (retit = 0 and lbinno != '' and 
    (opdobinnos containing lbinno or
     oppubinnos containing lbinno))
  then retit = 1;

  if (retit = 0 and lphone != '' and
      optelephone containing lphone)
  then retit = 1;

  if (retit = 0 and lmyobjobno != '' and
      opjobno = ipmyobjobno)
  then retit = 1;

  if (retit = 1)
  then begin

    if (opwantsbreakdown = 1 and
          (opjobjobtype = 2 or opjobjobtype = 3))  /* C/O or pickup */
     then begin 
         if (EXISTS(select jobrmbreakdown.jobid from jobrmbreakdown
                      where jobrmbreakdown.jobid = :opjobjobid))
         then opbreakdown = 1;
         else opbreakdown = 0;
     end
     else opbreakdown = -1;

     SUSPEND;
  end

 end
END^


ALTER PROCEDURE MYGET_SWPREVORDERS (
    IPCUSTID INTEGER,
    IPDEPOTNO CHAR(12))
RETURNS (
    OPORDERID INTEGER,
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
declare variable ldepotno char(12);
begin
  for select sorder.orderid,
                  address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state, address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude  
         from sorder
         left outer join address on address.addrid = sorder.deladdrid
         left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
         where sorder.complete = 0
           and sorder.custid = :ipcustid
          plan (sorder index (idx_sorder), 
                  address index (RDB$PRIMARY1), 
                  suburbs index (idx_substatepc))
           rows 50  /* some kind of limit */
          into :oporderid, :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude, :opgpslatitude, :opgpslongitude 
  do begin
    for select sworder.depotno
        from sworder
        where sworder.custid = :ipcustid
          and sworder.depotno = :ipdepotno
         rows 1  /* even if only 1 exists we will include this order */
         into :ldepotno
     do suspend;
  end
END^


ALTER PROCEDURE MYGET_TIP (
    IPTIPID INTEGER)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT 
  TIP.ID, TIP.DDATE, TIP.TIMEIN, TIP.TIMEOUT, TIP.CUSTID, TIP.REGO, TIP.BYCUBIC, TIP.CUBICMETRES, TIP.GROSSWEIGHT, TIP.TAREWEIGHT, TIP.PRICE, TIP.PAYMENTID, TIP.INVNO, TIP.INVLINENO, TIP.MATERIALID, TIP.VERSIONNO, TIP.TIPSITEID, TIP.COMMENTS, TIP.PAYREFERENCE, TIP.GROSSWEIGHT2, TIP.CAMEFROM, TIP.DUMPEDIN, TIP.TIPDDNO, TIP.OKAYEDTOINVOICE, TIP.tareweight2, TIP.trailerrego, TIP.MYOBJOBNO, TIP.CUSTOMERREFERENCE, TIP.BINJOBID, tip.epaentrypurposeid, tip.epasubwastestreamid, tip.epavehicletypecode, tip.epawastestreamid, tip.epawastetypeid, tip.epaapprovalnumber, tip.flags, tip.transactionnumber, tip.fixedvalueexgst, tip.fixedvaluegst, tip.surcharge, tip.cashrounding  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM TIP
  left outer join customer on tip.custid = customer.CUSTID
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where tip.id = :iptipid
INTO
   :OPTIPID, :OPTIPDDATE, :OPTIPTIMEIN, :OPTIPTIMEOUT, :OPTIPCUSTID, :OPTIPREGO, :OPTIPBYCUBIC, :OPTIPCUBICMETRES, :OPTIPGROSSWEIGHT, :OPTIPTAREWEIGHT, :OPTIPPRICE, :OPTIPPAYMENTID, :OPTIPINVNO, :OPTIPINVLINENO, :OPTIPMATERIALID, :OPTIPVERSIONNO, :OPTIPTIPSITEID, :OPTIPCOMMENTS, :OPTIPPAYREF, :OPTIPGROSSWEIGHT2, :OPTIPCAMEFROM, :OPTIPDUMPEDIN, :OPTIPTIPDDNO, :OPTIPOKAYEDTOINVOICE, :OPTIPTAREWEIGHT2, :OPTIPTRAILERREGO, :OPTIPMYOBJOBNO, :OPTIPCUSTREF, :OPTIPBINJOBID, :opepaentrypurposeid, :opepasubwastestreamid, :opepavehicletypecode, :opepawastestreamid, :opepawastetypeid, :opepaapprovalnumber, :opflags, :optransactionnumber, :opfixedvalueexgst, :opfixedvaluegst, :opsurcharge, :opcashrounding  ,
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
     do begin
         select sum(tipfee.incamount)
                    from tipfee
                    where tipfee.tipid = :optipid
                    into :optipfeetotal;
         if (optipfeetotal is null)
         then optipfeetotal = 0;
         SUSPEND;
    end
END^


ALTER PROCEDURE MYGET_TIPBYINV (
    IPINVNO INTEGER,
    IPINVLINENO INTEGER)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2),
    OPPAYMETHODID INTEGER,
    OPISPAID VARCHAR(255),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT 
  TIP.ID, TIP.DDATE, TIP.TIMEIN, TIP.TIMEOUT, TIP.CUSTID, TIP.REGO, TIP.BYCUBIC, TIP.CUBICMETRES, TIP.GROSSWEIGHT, TIP.TAREWEIGHT, TIP.PRICE, TIP.PAYMENTID, TIP.INVNO, TIP.INVLINENO, TIP.MATERIALID, TIP.VERSIONNO, TIP.TIPSITEID, TIP.COMMENTS, TIP.PAYREFERENCE, TIP.GROSSWEIGHT2, TIP.CAMEFROM, TIP.DUMPEDIN, TIP.TIPDDNO, TIP.OKAYEDTOINVOICE, TIP.tareweight2, TIP.trailerrego, TIP.MYOBJOBNO, TIP.CUSTOMERREFERENCE, TIP.BINJOBID, tip.epaentrypurposeid, tip.epasubwastestreamid, tip.epavehicletypecode, tip.epawastestreamid, tip.epawastetypeid, tip.epaapprovalnumber, tip.flags, tip.transactionnumber, tip.fixedvalueexgst, tip.fixedvaluegst, tip.surcharge, tip.cashrounding  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude ,
  paymentdetails.paymentmethodid, paymentdetails.ispaid
FROM TIP
  left outer join customer on tip.custid = customer.CUSTID
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
  left outer join paymentdetails on (paymentdetails.systementity = 'Tip' OR paymentdetails.systementity = 'TipTable')
                                 and paymentdetails.systementityid = tip.id
where tip.invno = :ipinvno
    and tip.invlineno = :ipinvlineno
INTO
   :OPTIPID, :OPTIPDDATE, :OPTIPTIMEIN, :OPTIPTIMEOUT, :OPTIPCUSTID, :OPTIPREGO, :OPTIPBYCUBIC, :OPTIPCUBICMETRES, :OPTIPGROSSWEIGHT, :OPTIPTAREWEIGHT, :OPTIPPRICE, :OPTIPPAYMENTID, :OPTIPINVNO, :OPTIPINVLINENO, :OPTIPMATERIALID, :OPTIPVERSIONNO, :OPTIPTIPSITEID, :OPTIPCOMMENTS, :OPTIPPAYREF, :OPTIPGROSSWEIGHT2, :OPTIPCAMEFROM, :OPTIPDUMPEDIN, :OPTIPTIPDDNO, :OPTIPOKAYEDTOINVOICE, :OPTIPTAREWEIGHT2, :OPTIPTRAILERREGO, :OPTIPMYOBJOBNO, :OPTIPCUSTREF, :OPTIPBINJOBID, :opepaentrypurposeid, :opepasubwastestreamid, :opepavehicletypecode, :opepawastestreamid, :opepawastetypeid, :opepaapprovalnumber, :opflags, :optransactionnumber, :opfixedvalueexgst, :opfixedvaluegst, :opsurcharge, :opcashrounding  ,
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude ,
   :oppaymethodid, :opispaid
     do begin
          select sum(tipfee.incamount)
                    from tipfee
                    where tipfee.tipid = :optipid
                    into :optipfeetotal;
          if (optipfeetotal is null)
          then optipfeetotal = 0;
          SUSPEND;
   end
END^


ALTER PROCEDURE MYGET_TIPS (
    IPDDATE DATE,
    IPTIPSITEID INTEGER)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2),
    OPPAYMETHODID INTEGER,
    OPISPAID VARCHAR(255),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT 
  TIP.ID, TIP.DDATE, TIP.TIMEIN, TIP.TIMEOUT, TIP.CUSTID, TIP.REGO, TIP.BYCUBIC, TIP.CUBICMETRES, TIP.GROSSWEIGHT, TIP.TAREWEIGHT, TIP.PRICE, TIP.PAYMENTID, TIP.INVNO, TIP.INVLINENO, TIP.MATERIALID, TIP.VERSIONNO, TIP.TIPSITEID, TIP.COMMENTS, TIP.PAYREFERENCE, TIP.GROSSWEIGHT2, TIP.CAMEFROM, TIP.DUMPEDIN, TIP.TIPDDNO, TIP.OKAYEDTOINVOICE, TIP.tareweight2, TIP.trailerrego, TIP.MYOBJOBNO, TIP.CUSTOMERREFERENCE, TIP.BINJOBID, tip.epaentrypurposeid, tip.epasubwastestreamid, tip.epavehicletypecode, tip.epawastestreamid, tip.epawastetypeid, tip.epaapprovalnumber, tip.flags, tip.transactionnumber, tip.fixedvalueexgst, tip.fixedvaluegst, tip.surcharge, tip.cashrounding  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude  ,
  paymentdetails.paymentmethodid, paymentdetails.ispaid
FROM TIP
  left outer join customer on tip.custid = customer.CUSTID
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
  left outer join paymentdetails on (paymentdetails.systementity = 'Tip' OR paymentdetails.systementity = 'TipTable')
                                 and paymentdetails.systementityid = tip.id
where tip.ddate = :ipddate
    and tip.tipsiteid = :iptipsiteid
INTO
    :OPTIPID, :OPTIPDDATE, :OPTIPTIMEIN, :OPTIPTIMEOUT, :OPTIPCUSTID, :OPTIPREGO, :OPTIPBYCUBIC, :OPTIPCUBICMETRES, :OPTIPGROSSWEIGHT, :OPTIPTAREWEIGHT, :OPTIPPRICE, :OPTIPPAYMENTID, :OPTIPINVNO, :OPTIPINVLINENO, :OPTIPMATERIALID, :OPTIPVERSIONNO, :OPTIPTIPSITEID, :OPTIPCOMMENTS, :OPTIPPAYREF, :OPTIPGROSSWEIGHT2, :OPTIPCAMEFROM, :OPTIPDUMPEDIN, :OPTIPTIPDDNO, :OPTIPOKAYEDTOINVOICE, :OPTIPTAREWEIGHT2, :OPTIPTRAILERREGO, :OPTIPMYOBJOBNO, :OPTIPCUSTREF, :OPTIPBINJOBID, :opepaentrypurposeid, :opepasubwastestreamid, :opepavehicletypecode, :opepawastestreamid, :opepawastetypeid, :opepaapprovalnumber, :opflags, :optransactionnumber, :opfixedvalueexgst, :opfixedvaluegst, :opsurcharge, :opcashrounding  ,
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude  ,
    :oppaymethodid, :opispaid
     do begin
          select sum(tipfee.incamount)
                    from tipfee
                    where tipfee.tipid = :optipid
                    into :optipfeetotal;
          if (optipfeetotal is null)
          then optipfeetotal = 0;
          SUSPEND;
   end
END^


ALTER PROCEDURE MYGET_TIPSFROMTO (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2))
AS
BEGIN
for SELECT 
  TIP.ID, TIP.DDATE, TIP.TIMEIN, TIP.TIMEOUT, TIP.CUSTID, TIP.REGO, TIP.BYCUBIC, TIP.CUBICMETRES, TIP.GROSSWEIGHT, TIP.TAREWEIGHT, TIP.PRICE, TIP.PAYMENTID, TIP.INVNO, TIP.INVLINENO, TIP.MATERIALID, TIP.VERSIONNO, TIP.TIPSITEID, TIP.COMMENTS, TIP.PAYREFERENCE, TIP.GROSSWEIGHT2, TIP.CAMEFROM, TIP.DUMPEDIN, TIP.TIPDDNO, TIP.OKAYEDTOINVOICE, TIP.tareweight2, TIP.trailerrego, TIP.MYOBJOBNO, TIP.CUSTOMERREFERENCE, TIP.BINJOBID, tip.epaentrypurposeid, tip.epasubwastestreamid, tip.epavehicletypecode, tip.epawastestreamid, tip.epawastetypeid, tip.epaapprovalnumber, tip.flags, tip.transactionnumber, tip.fixedvalueexgst, tip.fixedvaluegst, tip.surcharge, tip.cashrounding 
FROM TIP
where tip.ddate >= :ipfromdate
    and tip.ddate <= :iptodate
INTO
   :OPTIPID, :OPTIPDDATE, :OPTIPTIMEIN, :OPTIPTIMEOUT, :OPTIPCUSTID, :OPTIPREGO, :OPTIPBYCUBIC, :OPTIPCUBICMETRES, :OPTIPGROSSWEIGHT, :OPTIPTAREWEIGHT, :OPTIPPRICE, :OPTIPPAYMENTID, :OPTIPINVNO, :OPTIPINVLINENO, :OPTIPMATERIALID, :OPTIPVERSIONNO, :OPTIPTIPSITEID, :OPTIPCOMMENTS, :OPTIPPAYREF, :OPTIPGROSSWEIGHT2, :OPTIPCAMEFROM, :OPTIPDUMPEDIN, :OPTIPTIPDDNO, :OPTIPOKAYEDTOINVOICE, :OPTIPTAREWEIGHT2, :OPTIPTRAILERREGO, :OPTIPMYOBJOBNO, :OPTIPCUSTREF, :OPTIPBINJOBID, :opepaentrypurposeid, :opepasubwastestreamid, :opepavehicletypecode, :opepawastestreamid, :opepawastetypeid, :opepaapprovalnumber, :opflags, :optransactionnumber, :opfixedvalueexgst, :opfixedvaluegst, :opsurcharge, :opcashrounding 
     do begin
          select sum(tipfee.incamount)
                    from tipfee
                    where tipfee.tipid = :optipid
                    into :optipfeetotal;
          if (optipfeetotal is null)
          then optipfeetotal = 0;
          SUSPEND;
   end
END^


ALTER PROCEDURE MYGET_TIPSNOTINVOICED (
    IPTIPSITEID INTEGER,
    IPINVPERIOD INTEGER)
RETURNS (
    OPTIPID INTEGER,
    OPTIPDDATE DATE,
    OPTIPTIMEIN TIMESTAMP,
    OPTIPTIMEOUT TIMESTAMP,
    OPTIPCUSTID INTEGER,
    OPTIPREGO CHAR(20),
    OPTIPBYCUBIC SMALLINT,
    OPTIPCUBICMETRES DECIMAL(6,1),
    OPTIPGROSSWEIGHT DECIMAL(12,2),
    OPTIPTAREWEIGHT DECIMAL(12,2),
    OPTIPPRICE DECIMAL(12,2),
    OPTIPPAYMENTID INTEGER,
    OPTIPINVNO INTEGER,
    OPTIPINVLINENO INTEGER,
    OPTIPMATERIALID INTEGER,
    OPTIPVERSIONNO INTEGER,
    OPTIPTIPSITEID INTEGER,
    OPTIPCOMMENTS CHAR(200),
    OPTIPPAYREF CHAR(20),
    OPTIPFEETOTAL DECIMAL(12,2),
    OPTIPGROSSWEIGHT2 DECIMAL(12,2),
    OPTIPCAMEFROM CHAR(30),
    OPTIPDUMPEDIN CHAR(30),
    OPTIPTIPDDNO INTEGER,
    OPTIPOKAYEDTOINVOICE SMALLINT,
    OPTIPTAREWEIGHT2 DECIMAL(12,2),
    OPTIPTRAILERREGO CHAR(20),
    OPTIPMYOBJOBNO CHAR(30),
    OPTIPCUSTREF CHAR(30),
    OPTIPBINJOBID INTEGER,
    OPEPAENTRYPURPOSEID INTEGER,
    OPEPASUBWASTESTREAMID INTEGER,
    OPEPAVEHICLETYPECODE CHAR(20),
    OPEPAWASTESTREAMID INTEGER,
    OPEPAWASTETYPEID INTEGER,
    OPEPAAPPROVALNUMBER CHAR(30),
    OPFLAGS INTEGER,
    OPTRANSACTIONNUMBER INTEGER,
    OPFIXEDVALUEEXGST DECIMAL(18,2),
    OPFIXEDVALUEGST DECIMAL(8,2),
    OPSURCHARGE DECIMAL(6,2),
    OPCASHROUNDING DECIMAL(5,2),
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
for SELECT 
  TIP.ID, TIP.DDATE, TIP.TIMEIN, TIP.TIMEOUT, TIP.CUSTID, TIP.REGO, TIP.BYCUBIC, TIP.CUBICMETRES, TIP.GROSSWEIGHT, TIP.TAREWEIGHT, TIP.PRICE, TIP.PAYMENTID, TIP.INVNO, TIP.INVLINENO, TIP.MATERIALID, TIP.VERSIONNO, TIP.TIPSITEID, TIP.COMMENTS, TIP.PAYREFERENCE, TIP.GROSSWEIGHT2, TIP.CAMEFROM, TIP.DUMPEDIN, TIP.TIPDDNO, TIP.OKAYEDTOINVOICE, TIP.tareweight2, TIP.trailerrego, TIP.MYOBJOBNO, TIP.CUSTOMERREFERENCE, TIP.BINJOBID, tip.epaentrypurposeid, tip.epasubwastestreamid, tip.epavehicletypecode, tip.epawastestreamid, tip.epawastetypeid, tip.epaapprovalnumber, tip.flags, tip.transactionnumber, tip.fixedvalueexgst, tip.fixedvaluegst, tip.surcharge, tip.cashrounding  ,
  customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact, customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive, customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod, customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid, customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth, customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid, customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit, customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier, customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
  custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town, custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude 
FROM TIP
  left outer join customer on tip.custid = customer.CUSTID
  left outer join address as custaddr on customer.custaddrid = custaddr.addrid
where tip.invno = 0
  and tip.tipsiteid = :iptipsiteid
  and customer.invperiod = :ipinvperiod
INTO
   :OPTIPID, :OPTIPDDATE, :OPTIPTIMEIN, :OPTIPTIMEOUT, :OPTIPCUSTID, :OPTIPREGO, :OPTIPBYCUBIC, :OPTIPCUBICMETRES, :OPTIPGROSSWEIGHT, :OPTIPTAREWEIGHT, :OPTIPPRICE, :OPTIPPAYMENTID, :OPTIPINVNO, :OPTIPINVLINENO, :OPTIPMATERIALID, :OPTIPVERSIONNO, :OPTIPTIPSITEID, :OPTIPCOMMENTS, :OPTIPPAYREF, :OPTIPGROSSWEIGHT2, :OPTIPCAMEFROM, :OPTIPDUMPEDIN, :OPTIPTIPDDNO, :OPTIPOKAYEDTOINVOICE, :OPTIPTAREWEIGHT2, :OPTIPTRAILERREGO, :OPTIPMYOBJOBNO, :OPTIPCUSTREF, :OPTIPBINJOBID, :opepaentrypurposeid, :opepasubwastestreamid, :opepavehicletypecode, :opepawastestreamid, :opepawastetypeid, :opepaapprovalnumber, :opflags, :optransactionnumber, :opfixedvalueexgst, :opfixedvaluegst, :opsurcharge, :opcashrounding  ,
    :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn, :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno, :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman, :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown, :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate, :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement, :opcustgstregisteredsince, :opcustscrappricelistid,
    :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode, :opcustgpslatitude, :opcustgpslongitude 
     do begin
          select sum(tipfee.incamount)
                    from tipfee
                    where tipfee.tipid = :optipid
                    into :optipfeetotal;
          if (optipfeetotal is null)
          then optipfeetotal = 0;
          SUSPEND;
   end
END^


ALTER PROCEDURE POS (
    SUBSTR VARCHAR(100),
    STR VARCHAR(100))
RETURNS (
    POS INTEGER)
AS
declare variable substr2 varchar(201); /* 1 + SubStr-lenght + Str-length */
declare variable tmp varchar(100);
BEGIN
  /* this is from http://www.volny.cz/iprenosil/interbase/ip_ib_code_string.htm hash _code_strpos */

  IF (SubStr IS NULL OR Str IS NULL)
  THEN BEGIN Pos = NULL; EXIT; END

  SubStr2 = SubStr || '%';
  Tmp = '';
  Pos = 1;
  WHILE (Str NOT LIKE SubStr2 AND Str NOT LIKE Tmp) DO BEGIN
    SubStr2 = '_' || SubStr2;
    Tmp = Tmp || '_';
    Pos = Pos + 1;
  END

  IF (Str LIKE Tmp) THEN Pos = 0;
end^


ALTER PROCEDURE SPADD_DRIVER (
    IPSHORTNAME CHAR(8) DEFAULT NULL,
    IPFULLNAME CHAR(25) DEFAULT NULL,
    IPSTARTDATE DATE DEFAULT NULL,
    IPFINISHDATE DATE DEFAULT NULL)
RETURNS (
    NEWDRIVERID SMALLINT)
AS
BEGIN
  /* Procedure body */
  newdriverid = GEN_ID(DRIVER_DRIVERID_GEN, 1);
  insert into driver
         (driverid, shortname, fullname, startdate, finishdate)
         values (:newdriverid, :ipshortname, :ipfullname, :ipstartdate, :ipfinishdate);
  SUSPEND;
END^


ALTER PROCEDURE SPCALC_SITESOH
AS
DECLARE VARIABLE LDATE DATE;
DECLARE VARIABLE LBINTYPEID INTEGER;
DECLARE VARIABLE LSITEID INTEGER;
DECLARE VARIABLE LBINSFULL INTEGER;
DECLARE VARIABLE LBINSEMPTY INTEGER;
DECLARE VARIABLE LBINSOUTFULL INTEGER;
DECLARE VARIABLE LBINSOUTEMPTY INTEGER;
DECLARE VARIABLE LBINSINFULL INTEGER;
DECLARE VARIABLE LBINSINEMPTY INTEGER;
BEGIN
  /* fill the sitesoh table - this means finding the last
   * stocktake and going from that date forward +/- all the
   * done jobs to arrive at the current SOH position
   */
  
  /* the system stops any stocktake in the future so finding the
   * last stocktake entry should be the latest
   */
  select first 1 STOCKTAKE_BINTYPE_DATES.SDATE
         from STOCKTAKE_BINTYPE_DATES
         order by STOCKTAKE_BINTYPE_DATES.SDATE desc
         into :ldate;
  for select STOCKTAKE_BINTYPE_LINES.bintypeid,
             STOCKTAKE_BINTYPE_LINES.siteid,
             STOCKTAKE_BINTYPE_LINES.BINSAVAILABLEFULL,
             STOCKTAKE_BINTYPE_LINES.BINSAVAILABLEEMPTY
      from STOCKTAKE_BINTYPE_LINES
      where STOCKTAKE_BINTYPE_LINES.SDATE = :ldate
        and STOCKTAKE_BINTYPE_LINES.SITEID != 0 /* get a site lines only */
      into :lbintypeid, :lsiteid, :lbinsfull, :lbinsempty
      do begin
        /* get bins going out */
        lbinsoutfull = 0;
        lbinsoutempty = 0;
        select sum(binmv.outfull),
               sum(binmv.outempty)
               from binmv
               where binmv.FROMSITEID = :lsiteid
                 and binmv.bintypeid = :lbintypeid
                 and binmv.MOVEDATE > :ldate
                into  :lbinsoutfull, :lbinsoutempty;
        if (lbinsoutfull is null)
        then lbinsoutfull = 0;
        if (lbinsoutempty is null)
        then lbinsoutempty = 0;
        /* get bins coming in */
        lbinsinfull = 0;
        lbinsinempty = 0;
        select sum(binmv.infull),
               sum(binmv.inempty)
               from binmv
               where binmv.toSITEID = :lsiteid
                 and binmv.bintypeid = :lbintypeid
                 and binmv.MOVEDATE > :ldate
                into :lbinsinfull, :lbinsinempty;
        if (lbinsinfull is null)
        then lbinsinfull = 0;
        if (lbinsinempty is null)
        then lbinsinempty = 0;
        update sitesoh
           set binsfull = :lbinsfull - :lbinsoutfull + :lbinsinfull,
               binsempty = :lbinsempty - :lbinsoutempty + :lbinsinempty
               where sitesoh.SITEID = :lsiteid
                 and SITESOH.BINTYPEID = :lbintypeid;
        if (row_count = 0)
        then insert into sitesoh
          (siteid, bintypeid, binsfull, binsempty)
          values (:lsiteid, :lbintypeid,
                 :lbinsfull - :lbinsoutfull + :lbinsinfull,
                 :lbinsempty - :lbinsoutempty + :lbinsinempty
                 );
   end
        
END^


ALTER PROCEDURE SPDEL_BINMV (
    IPBINMVID INTEGER DEFAULT NULL)
AS
DECLARE VARIABLE LBINTYPEID INTEGER;
DECLARE VARIABLE LFROMSITEID INTEGER;
DECLARE VARIABLE LOUTEMPTY INTEGER;
DECLARE VARIABLE LOUTFULL INTEGER;
DECLARE VARIABLE LTOSITEID INTEGER;
DECLARE VARIABLE LINEMPTY INTEGER;
DECLARE VARIABLE LINFULL INTEGER;
DECLARE VARIABLE LMVDATE DATE;
DECLARE VARIABLE LDATE DATE;
BEGIN
  select   BINMV.MOVEDATE,
           binmv.BINTYPEID,
           binmv.FROMSITEID,
           binmv.OUTEMPTY,
           binmv.OUTFULL,
           binmv.TOSITEID,
           binmv.INEMPTY,
           binmv.INFULL
           from BINMV
           where binmv.BINMVID = :ipbinmvid
           into
           :lmvdate,
           :lbintypeid,
           :lfromsiteid,
           :loutempty,
           :loutfull,
           :ltositeid,
           :linempty,
           :linfull;
  select first 1 STOCKTAKE_BINTYPE_DATES.SDATE
         from STOCKTAKE_BINTYPE_DATES
         order by STOCKTAKE_BINTYPE_DATES.SDATE desc
         into :ldate;
  if (lmvdate > ldate)
  then begin
    if (lfromsiteid != 0)
    then execute procedure adjustsitesoh
            (lbintypeid,
             lfromsiteid,
             loutfull,
             loutempty);
    if (ltositeid != 0)
    then execute procedure adjustsitesoh
            (lbintypeid,
             ltositeid,
             0 - linfull,
             0 - linempty);
  end

  delete from binmv
   where binmv.BINMVID = :ipbinmvid;
END^


ALTER PROCEDURE SPDEL_BOOKINVNO (
    IPINVNO INTEGER)
AS
begin
  delete from bookinvno
        where bookinvno.invno = :ipinvno;
end^


ALTER PROCEDURE SPDEL_CLEARJOBFEES (
    IPJOBID INTEGER DEFAULT NULL)
AS
BEGIN
  delete from jobfee
    where jobfee.JOBID = :ipjobid;
END^


ALTER PROCEDURE SPDEL_CONTRACTDRIVERPRICE (
    IPDRIVERID INTEGER)
AS
begin
  delete from contractdriverprice
        where contractdriverprice.driverid = :ipdriverid;
end^


ALTER PROCEDURE SPDEL_COUNCILPDFS (
    IPCOUNCILID INTEGER)
AS
BEGIN
  delete from councilpdfs
         where councilpdfs.councilid = :ipcouncilid;
END^


ALTER PROCEDURE SPDEL_COUNCILSUBURBS (
    IPCOUNCILID INTEGER)
AS
BEGIN
  delete from councilsuburbs
         where councilsuburbs.councilid = :ipcouncilid;
END^


ALTER PROCEDURE SPDEL_CREDITNOTE (
    IPCREDITNOTEID INTEGER)
AS
begin
  delete from creditline where creditline.creditnoteid = :ipcreditnoteid;
  delete from creditnote where creditnote.creditbnoteid = :ipcreditnoteid;
end^


ALTER PROCEDURE SPDEL_CUSTOMER (
    IPCUSTID INTEGER)
AS
begin
  delete from customersite where customersite.custid = :ipcustid;
  delete from prices where prices.custid = :ipcustid;
  delete from custrgprices where custrgprices.custid = :ipcustid;
  delete from customer where customer.custid = :ipcustid;
end^


ALTER PROCEDURE SPDEL_CUSTSITEPRICES (
    IPCUSTSITEID INTEGER)
AS
BEGIN
  delete from csiteprice
         where csiteprice.customersiteid = :ipcustsiteid;
END^


ALTER PROCEDURE SPDEL_DRIVERRECLINES (
    IPBATCHID INTEGER DEFAULT NULL)
AS
BEGIN
  delete from DRIVERRECLINE
         where DRIVERRECLINE.BATCHID = :ipbatchid;
END^


ALTER PROCEDURE SPDEL_HOLIDAY (
    IPDAYOFF DATE)
AS
begin
  delete from holidays
        where holidays.closedon = :ipdayoff;
end^


ALTER PROCEDURE SPDEL_INVBATCH (
    IPINVBATCHID INTEGER)
AS
declare variable linvno integer;
begin
  for select invoice.invno
       from invoice
       where invoice.invbatchid = :ipinvbatchid
       into :linvno
   do begin
     execute procedure spdel_invoice (linvno);
   end

   delete from invoicebatch
        where invoicebatch.invbatchno = :ipinvbatchid;
end^


ALTER PROCEDURE SPDEL_INVLINE (
    IPINVNO INTEGER,
    IPINVLINENO INTEGER)
AS
declare variable LLINETYPE integer;
begin

   select invline.linetype
       from invline
       where invline.invno = :ipinvno
          and invline.invlineno = :ipinvlineno
       into :llinetype;

   delete from invline
        where invline.invno = :ipinvno
          and invline.invlineno = :ipinvlineno;

   if (llinetype = 1) then begin
     update JOBFEE
             set jobfee.invno = null,
                 jobfee.INVLINE = null
             where jobfee.invno = :ipinvno
               and jobfee.invline = :ipinvlineno;
   end
   else if (llinetype = 0 or  /* normal invoice at delivery jobs */
            llinetype = 10 or /* Invoice at PU invoice lines */
            llinetype = 11 or /* LCT Jobs */
            llinetype = 13) then begin
    update job 
             set job.INVNO = 0,
                 job.INVLINENO = 0
             where job.invoiceable = 1
               and job.invno = :ipinvno
               and job.invlineno = :ipinvlineno;
    /* special situation here - for invoice_delivery_at_drop_and_PU_weight_at_PU
     * type jobs the last pick up job has it's invoiceable still set to 0 so to
     * handle this I now do an extra clean up just for invoiceable = 0 just for
     * those special jobs
     */
    update job 
             set job.INVNO = 0,
                 job.INVLINENO = 0
             where job.invoiceable = 0
               and job.invno = :ipinvno
               and job.invlineno = :ipinvlineno;
    update invcomment
            set invcomment.invno = 0,
                invcomment.invlineno = 0
            where invcomment.invno = :ipinvno
              and invcomment.invlineno = :ipinvlineno;
     /* if this came from a builder (ie invoice after the pick up is done)
      * then we have to make sure we clean up the job2 record as well
      */
      update job2
             set job2.PUINVNO = 0,
                 job2.PUINVLINENO = 0,
                 job2.puinvoiceable = 1  /* back to 'to be invoiced' state */
             where job2.puinvno = :ipinvno
               and job2.puinvlineno = :ipinvlineno;
   end
   else if (llinetype = 2) then begin
    update tip
             set tip.INVNO = 0,
                 tip.INVLINENO = 0
             where tip.invno = :ipinvno
               and tip.invlineno = :ipinvlineno;
   end
   else if (llinetype = 3) then begin
     update TIPFEE
             set tipfee.invno = 0,
                 tipfee.INVLINENO = 0
             where tipfee.invno = :ipinvno
               and tipfee.invlineno = :ipinvlineno;
   end

   /* linetype is site bin invoices so for these we need to remove the sitebininvoices entry
    * otherwise the job covered by this line will not get picked up to be invoiced in the next
    * run
    */
   else if (llinetype = 4) then begin
     delete from sitebininvoices
             where sitebininvoices.invno = :ipinvno
               and sitebininvoices.invlineno = :ipinvlineno;
   end

      /* puweight or 'transport and weight' */
   else if (llinetype = 6 or llinetype = 8) then begin
    update job2
             set job2.PUINVNO = 0,
                 job2.PUINVLINENO = 0,
                 job2.puinvoiceable = 1,  /* to be invoiced state */
                 job2.invoicedpuweight = 0,
                 job2.invoicedprice = 0
             where job2.puinvno = :ipinvno
               and job2.puinvlineno = :ipinvlineno;
     update job 
             set job.INVNO = 0,
                 job.INVLINENO = 0
             where job.invoiceable = 1
               and job.invno = :ipinvno
               and job.invlineno = :ipinvlineno;
     /* transport and weight jobs put the invlineno as a negative number... */
     update job 
             set job.INVNO = 0,
                 job.INVLINENO = 0
             where job.invoiceable = 1
               and job.invno = :ipinvno
               and job.invlineno = 0 - :ipinvlineno;
     update invcomment
            set invcomment.invno = 0,
                invcomment.invlineno = 0
            where invcomment.invno = :ipinvno
              and invcomment.invlineno = :ipinvlineno;
   end
   else if (llinetype = 7) then begin
    update adhoccharge
             set adhoccharge.invno = 0,
                 adhoccharge.invlineno = 0,
                 adhoccharge.invoiceable = 1  /* to be invoiced state */
             where adhoccharge.invno = :ipinvno
               and adhoccharge.invlineno = :ipinvlineno;
   end
   else if (llinetype = 9) then begin
     update rgsalesorder
            set rgsalesorder.orderid = 0,
                rgsalesorder.orderno = 0,
                rgsalesorder.complete = 0
            where rgsalesorder.orderid = :ipinvno
              and rgsalesorder.orderno = :ipinvlineno
              and rgsalesorder.deliverytype = 1;  /* pick up RG orders only */
   end

   else if (llinetype = 14)
   then begin
     update fl_contractjob set fl_contractjob.invoicenumber = 0,
                               fl_contractjob.invoicelinenumber = 0
                        where fl_contractjob.invoicenumber = :ipinvno
                          and fl_contractjob.invoicelinenumber = :ipinvlineno;
   end
   else if (llinetype = 15)
   then begin
     update weeklyhire set weeklyhire.invoicenumber = 0,
                           weeklyhire.invoicelinenumber = 0
                     where weeklyhire.invoicenumber = :ipinvno
                       and weeklyhire.invoicelinenumber = :ipinvlineno;
   end
   else if (llinetype = 16)
   then begin
     update fl_contractjob set fl_contractjob.invoicenumberexcessweight = 0,
                               fl_contractjob.invoicelinenumberexcessweight = 0
                        where fl_contractjob.invoicenumberexcessweight = :ipinvno
                          and fl_contractjob.invoicelinenumberexcessweight = :ipinvlineno;
   end
   else if (llinetype = 17)
   then begin
     update fl_contractdetail set fl_contractdetail.deliveryinvoicenumber = 0,
                                  fl_contractdetail.deliveryinvoicelinenumber = 0
                        where fl_contractdetail.deliveryinvoicenumber = :ipinvno
                          and fl_contractdetail.deliveryinvoicelinenumber = :ipinvlineno;
   end
end^


ALTER PROCEDURE SPDEL_INVOICE (
    IPINVNO INTEGER)
AS
declare variable llineno integer;
begin
  for select invline.invlineno
       from invline
       where invline.invno = :ipinvno
       into :llineno
   do begin
     execute procedure spdel_invline (ipinvno, llineno);
   end

   delete from invoice
        where invoice.invno = :ipinvno;
end^


ALTER PROCEDURE SPDEL_JOB (
    IPJOBID INTEGER = null)
AS
declare variable lmviddo integer;
declare variable lmvidpu integer;
BEGIN

  select job.MOVEIDDO, job.MOVEIDPU
         from job
         where job.JOBID = :ipjobid
         into :lmviddo, :lmvidpu;
         if (lmviddo is null) then lmviddo = 0;
         if (lmvidpu is null) then lmvidpu = 0;
         
  delete from job where job.jobid = :ipjobid;
  /* this next one coule be a trigger I know */
  delete from jobfee where jobfee.jobid = :ipjobid;
  
  /* added 19/02/2010 */
  delete from job2 where job2.jobid = :ipjobid;

  DELETE from jobbins where jobbins.JOBID = :ipjobid;
  
  if (lmviddo != 0) then
      execute procedure spdel_binmv(lmviddo);

    if (lmvidpu != 0) then
      execute procedure spdel_binmv(lmvidpu);
      
  /* I don't call the upd_event proc from here as normally
   * straight after calling this the save_job() will be
   * called which will update the flag or the spdel_order
   * will be called which will update the flag
   */
end^


ALTER PROCEDURE SPDEL_JOBBINS (
    IPJOBID INTEGER DEFAULT NULL)
AS
BEGIN
  DELETE from jobbins where JOBBINS.JOBID = :ipjobid;
END^


ALTER PROCEDURE SPDEL_JOBRMBREAKDOWN (
    IPJOBID INTEGER)
AS
begin
  delete from jobrmbreakdown
         where jobrmbreakdown.jobid = :ipjobid;
end^


ALTER PROCEDURE SPDEL_JOBSWCODE (
    IPJOBSWCODEID INTEGER)
AS
begin
  delete from jobswcode where jobswcode.jobswcodeid = :ipjobswcodeid;
end^


ALTER PROCEDURE SPDEL_ORDER (
    IPORDERID INTEGER DEFAULT NULL)
AS
DECLARE VARIABLE LJOBID INTEGER;
BEGIN
  for select job.JOBID from job
         where job.ORDERID = :iporderid
         into :ljobid
         do execute procedure SPDEL_JOB (LJOBID);
         
  delete from ORDERWEEKS
        where orderweeks.orderid = :iporderid;
        
  delete from SORDER
         where sorder.ORDERID = :iporderid;
         
  execute procedure UPD_EVENT ('lastjob');
END^


ALTER PROCEDURE SPDEL_PINVLINE (
    IPPINVID INTEGER,
    IPINVLINENO INTEGER)
AS
declare variable llinetype integer;
declare variable lslid integer;
begin

   select pinvline.linetype
       from pinvline
       where pinvline.pinvid = :ippinvid
          and pinvline.invlineno = :ipinvlineno
       into :llinetype;

   delete from pinvline
        where pinvline.pinvid = :ippinvid
          and pinvline.invlineno = :ipinvlineno;

   if (llinetype = 0) then begin
     /* need to find the scrapload line linked to this pinvoice line and remove it */
     for select scraploadnh.scraploadid
                from scraploadnh
                where scraploadnh.purchaseinvid = :ippinvid
                into :lslid
     do begin
       update scraploadlinenh
             set scraploadlinenh.invlineno = 0
             where scraploadlinenh.scrapload_id = :lslid
               and scraploadlinenh.invlineno = :ipinvlineno;
     end
   end
   else if (llinetype = 2) then begin
     for select scraploadnh.scraploadid
                from scraploadnh
                where scraploadnh.purchaseinvid = :ippinvid
                into :lslid
     do begin
       update deductionlinenh
              set deductionlinenh.invlineno = 0
              where deductionlinenh.scrapload_id = :lslid
                and deductionlinenh.invlineno = :ipinvlineno;
     end
   end
   else if (llinetype = 3) then begin
     for select scraploadlinelevynh.slllid
                from scraploadnh
                 left outer join scraploadlinenh on scraploadlinenh.scrapload_id = scraploadnh.scraploadid
                 left outer join scraploadlinelevynh on scraploadlinelevynh.scraploadline_id = scraploadlinenh.scraploadlineid 
                where scraploadnh.purchaseinvid = :ippinvid
                  and scraploadlinelevynh.invlineno = :ipinvlineno
                into :lslid
     do begin
       update scraploadlinelevynh set scraploadlinelevynh.invlineno = 0
            where scraploadlinelevynh.slllid = :lslid;
     end
   end
end^


ALTER PROCEDURE SPDEL_PINVOICE (
    IPPINVID INTEGER)
AS
declare variable llineno integer;
begin
  for select pinvline.invlineno
       from pinvline
       where pinvline.pinvid = :ippinvid
       into :llineno
   do begin
     execute procedure spdel_pinvline (ippinvid, llineno);
   end

   update scraploadnh set scraploadnh.invno = 0, scraploadnh.purchaseinvid = 0
          where scraploadnh.purchaseinvid = :ippinvid;
   delete from pinvoice
        where pinvoice.pinvid = :ippinvid;
end^


ALTER PROCEDURE SPDEL_RGORDER (
    IPRGSOID INTEGER)
AS
begin
  delete from rgsalesorder where rgsalesorder.rgsoid = :iprgsoid;
end^


ALTER PROCEDURE SPDEL_SITEFOREMAN (
    IPCUSTSITEID INTEGER,
    IPFOREMANID INTEGER)
AS
begin
  delete from siteforeman
        where siteforeman.customersiteid = :ipcustsiteid
          and siteforeman.foremanid = :ipforemanid;
end^


ALTER PROCEDURE SPDEL_SMSTEMPLATE (
    IPID INTEGER DEFAULT NULL)
AS
BEGIN
  delete from SMSTEMPLATE
         where SMSTEMPLATE.id = :ipid;
END^


ALTER PROCEDURE SPDEL_STAKE_BINLINES (
    IPDATE DATE DEFAULT NULL)
AS
BEGIN
  delete from STOCKTAKE_BINTYPE_LINES
    where STOCKTAKE_BINTYPE_LINES.SDATE = :ipdate;
END^


ALTER PROCEDURE SPDEL_TIP (
    IPTIPID INTEGER)
AS
begin
  delete from tip
        where tip.id = :iptipid;
end^


ALTER PROCEDURE SPDEL_TIPFEES (
    IPTIPID INTEGER DEFAULT NULL)
AS
BEGIN
  DELETE from tipfee where tipfee.tipid = :iptipid;
END^


ALTER PROCEDURE SPGET_ADDRCOORDS (
    IPADDRID INTEGER)
RETURNS (
    OPPAGENUMBER INTEGER,
    OPMAPREF CHAR(5))
AS
begin
  for select streets.pagenumber, streets.mapreference
         from address
         left outer join streets on streets.streetid = address.streetid
         where address.addrid = :ipaddrid
         into :oppagenumber,
              :opmapref
  do suspend;
end^


ALTER PROCEDURE SPGET_ADHOCCHARGES (
    IPADHOCCHARGEID INTEGER,
    IPINVOICEABLE INTEGER,
    IPJOBID INTEGER,
    IPINVNO INTEGER,
    IPINVLINENO INTEGER,
    IPPAIDDATE DATE)
RETURNS (
    OPADHOCCHARGEID INTEGER,
    OPCUSTID INTEGER,
    OPCUSTNAME CHAR(50),
    OPCUSTINVPERIOD INTEGER,
    OPJOBID INTEGER,
    OPFEEID INTEGER,
    OPDESCRIPTION CHAR(50),
    OPAMOUNT DECIMAL(8,2),
    OPINCEX INTEGER,
    OPINVNO INTEGER,
    OPINVLINENO INTEGER,
    OPINVOICEABLE INTEGER,
    OPPAYMENTRECEIVED DATE,
    OPPAYMETHODID INTEGER,
    OPCOMMENT VARCHAR(100))
AS
begin
  if (ipadhocchargeid > 0) then
    for select adhoccharge.adhocchargeid,
                adhoccharge.custid,
                customer.name,
                customer.invperiod,
                adhoccharge.jobid,
                adhoccharge.feeid,
                adhoccharge.description,
                adhoccharge.amount,
                adhoccharge.incex,
                adhoccharge.invno,
                adhoccharge.invlineno,
                adhoccharge.invoiceable,
                adhoccharge.paymentreceived,
                adhoccharge.paymethodid,
                adhoccharge.comment
        from adhoccharge
         left outer join customer on adhoccharge.custid = customer.custid
        where adhoccharge.adhocchargeid = :ipadhocchargeid
        into :opadhocchargeid,
             :opcustid,
             :opcustname,
             :opcustinvperiod,
             :opjobid,
             :opfeeid,
             :opdescription,
             :opamount,
             :opincex,
             :opinvno,
             :opinvlineno,
             :opinvoiceable,
             :oppaymentreceived,
             :oppaymethodid,
             :opcomment
    do suspend;
  else if (ipinvoiceable = 1) then /* 1 just means get the charges to be invoiced,
                          it doesn't match an invoiceable state */
    for select adhoccharge.adhocchargeid,
                adhoccharge.custid,
                customer.name,
                customer.invperiod,
                adhoccharge.jobid,
                adhoccharge.feeid,
                adhoccharge.description,
                adhoccharge.amount,
                adhoccharge.incex,
                adhoccharge.invno,
                adhoccharge.invlineno,
                adhoccharge.invoiceable,
                adhoccharge.paymentreceived,
                adhoccharge.paymethodid,
                adhoccharge.comment
        from adhoccharge
         left outer join customer on adhoccharge.custid = customer.custid
        where adhoccharge.invno = 0
          and adhoccharge.invoiceable = 1  /* the ToBeInvoiced state */
        into :opadhocchargeid,
             :opcustid,
             :opcustname,
             :opcustinvperiod,
             :opjobid,
             :opfeeid,
             :opdescription,
             :opamount,
             :opincex,
             :opinvno,
             :opinvlineno,
             :opinvoiceable,
             :oppaymentreceived,
             :oppaymethodid,
             :opcomment
    do suspend;
  else if (ipjobid > 0) then
    for select adhoccharge.adhocchargeid,
                adhoccharge.custid,
                customer.name,
                customer.invperiod,
                adhoccharge.jobid,
                adhoccharge.feeid,
                adhoccharge.description,
                adhoccharge.amount,
                adhoccharge.incex,
                adhoccharge.invno,
                adhoccharge.invlineno,
                adhoccharge.invoiceable,
                adhoccharge.paymentreceived,
                adhoccharge.paymethodid,
                adhoccharge.comment
        from adhoccharge
         left outer join customer on adhoccharge.custid = customer.custid
        where adhoccharge.jobid = :ipjobid
        into :opadhocchargeid,
             :opcustid,
             :opcustname,
             :opcustinvperiod,
             :opjobid,
             :opfeeid,
             :opdescription,
             :opamount,
             :opincex,
             :opinvno,
             :opinvlineno,
             :opinvoiceable,
             :oppaymentreceived,
             :oppaymethodid,
             :opcomment
    do suspend;

  else if (ipinvno > 0) then
    for select adhoccharge.adhocchargeid,
                adhoccharge.custid,
                customer.name,
                customer.invperiod,
                adhoccharge.jobid,
                adhoccharge.feeid,
                adhoccharge.description,
                adhoccharge.amount,
                adhoccharge.incex,
                adhoccharge.invno,
                adhoccharge.invlineno,
                adhoccharge.invoiceable,
                adhoccharge.paymentreceived,
                adhoccharge.paymethodid,
                adhoccharge.comment
        from adhoccharge
         left outer join customer on adhoccharge.custid = customer.custid
        where adhoccharge.invno = :ipinvno
          and adhoccharge.invlineno = :ipinvlineno
        into :opadhocchargeid,
             :opcustid,
             :opcustname,
             :opcustinvperiod,
             :opjobid,
             :opfeeid,
             :opdescription,
             :opamount,
             :opincex,
             :opinvno,
             :opinvlineno,
             :opinvoiceable,
             :oppaymentreceived,
             :oppaymethodid,
             :opcomment
    do suspend;

  else /* if (ippaiddate <> ?) then */
    for select adhoccharge.adhocchargeid,
                adhoccharge.custid,
                customer.name,
                customer.invperiod,
                adhoccharge.jobid,
                adhoccharge.feeid,
                adhoccharge.description,
                adhoccharge.amount,
                adhoccharge.incex,
                adhoccharge.invno,
                adhoccharge.invlineno,
                adhoccharge.invoiceable,
                adhoccharge.paymentreceived,
                adhoccharge.paymethodid,
                adhoccharge.comment
        from adhoccharge
         left outer join customer on adhoccharge.custid = customer.custid
        where adhoccharge.paymentreceived = :ippaiddate
        into :opadhocchargeid,
             :opcustid,
             :opcustname,
             :opcustinvperiod,
             :opjobid,
             :opfeeid,
             :opdescription,
             :opamount,
             :opincex,
             :opinvno,
             :opinvlineno,
             :opinvoiceable,
             :oppaymentreceived,
             :oppaymethodid,
             :opcomment
    do suspend;
end^


ALTER PROCEDURE SPGET_AUDITLOG (
    IPFROM TIMESTAMP,
    IPTO TIMESTAMP)
RETURNS (
    OPAMENDTIME TIMESTAMP,
    OPDETAILS CHAR(500),
    OPUSERID INTEGER,
    OPOBJECTID INTEGER,
    OPOPERATION VARCHAR(30),
    OPENTITYID VARCHAR(30))
AS
BEGIN
  for select AMENDTIME, CHANGEDETAILS, USERID, OBJECTID, OPERATION, ENTITYID
         from JOBAMEND
         where JOBAMEND.AMENDTIME >= :IPFROM
           and JOBAMEND.AMENDTIME <= :IPTO
         order by JOBAMEND.AMENDTIME desc
         into :OPAMENDTIME,
              :OPDETAILS,
              :OPUSERID,
              :OPOBJECTID,
              :OPOPERATION,
              :OPENTITYID
  do suspend;
END^


ALTER PROCEDURE SPGET_AVAIL_POS_FOR_CUST_ADDR (
    IP_CUSTID INTEGER,
    IP_ADDRID INTEGER)
RETURNS (
    OP_PO VARCHAR(100))
AS
begin
  for 
  select pop.PO_NUMBER from PO_NUMBER_POOL pop
    where pop.custid = :IP_CUSTID and pop.addrid = :IP_ADDRID 
    and pop.PO_NUMBER NOT in (select j.CUSTREFERENCE from job j 
                join sorder o on j.ORDERID = o.ORDERID
                    where j.CUSTID is not null and j.CUSTID = :IP_CUSTID
                                and o.DELADDRID = :IP_ADDRID and CHAR_LENGTH(TRIM(j.CUSTREFERENCE)) > 0)
    into :OP_PO
   do suspend;
end^


ALTER PROCEDURE SPGET_AVAILCREDIT (
    IPCUSTID INTEGER,
    IPGSTPERCENT DECIMAL(15,2))
RETURNS (
    OPCREDITLIMIT DECIMAL(18,2),
    OPOPENINVOICES DECIMAL(18,2),
    OPOPENJOBS DECIMAL(18,2),
    OPOPENRGPUS DECIMAL(18,2),
    OPOPENTIPS DECIMAL(18,2))
AS
declare variable lgstpercent decimal(18,2);
declare variable lpaidsofar decimal(18,2);
declare variable lprice decimal(18,2);
declare variable lrgwt decimal(18,2);
declare variable ljfamount decimal(18,2);
declare variable linvno integer;
declare variable ljobid integer;
declare variable ljobtype integer;
declare variable lbincount integer;
declare variable lrelbincount integer;
declare variable ljfincex smallint;
declare variable linvtotal decimal(18,2);
declare variable lfixedval decimal(15,2);
begin
  ipgstpercent = 1 + (ipgstpercent / 100);

  select creditlimit from customer
    where customer.custid = :ipcustid
    into :opcreditlimit;
  if (opcreditlimit is null)
  then opcreditlimit = 0;

  /* now get the value of all open invoices */
  opopeninvoices = 0;
  for select invoice.invno, invoice.paidsofar
    from invoice
    where invoice.custid = :ipcustid
      and invoice.paidinfull = 0
     into :linvno, :lpaidsofar
  do begin
    if (lpaidsofar is null)
    then lpaidsofar = 0;
    select sum(invline.totalvalue)
           from INVLINE
           where invline.invno = :linvno
           into :linvtotal;
    if (linvtotal is not null)
    then opopeninvoices = opopeninvoices + :linvtotal
            - lpaidsofar;
  end

  /* now the value of any uninvoiced jobs */
  opopenjobs = 0;
  opopenrgpus = 0;
  for select job.jobid, job.extaxprice, job.jobtype, job.bins_out, job.bins_relocate, job.rgweight
     from job
    where job.invoiceable = 1
      and job.invno = 0
      and job.custid = :ipcustid
    into :ljobid, :lprice, :ljobtype, :lbincount, :lrelbincount, :lrgwt
  do begin
    if (ljobtype = 6)
    then opopenrgpus = opopenrgpus + (lprice * lrgwt * ipgstpercent);
    else if (ljobtype = 5)
    then opopenjobs = opopenjobs + (lprice * lrelbincount * ipgstpercent);
    else opopenjobs = opopenjobs + (lprice * lbincount * ipgstpercent);
            
    for select jobfee.incex, jobfee.amount
        from jobfee
        where jobfee.jobid = :ljobid
        into :ljfincex, :ljfamount
    do begin
      if (ljfincex = 0)
      then opopenjobs = opopenjobs + (ljfamount * ipgstpercent);
      else opopenjobs = opopenjobs + ljfamount;
    end
  end

  /* any uninvoiced recycled goods pick up */
  for select rgsalesorder.tons,
             rgsalesorder.incprice
      from rgsalesorder
      where rgsalesorder.custid = :ipcustid
        and rgsalesorder.complete = 0
        and rgsalesorder.deliverytype = 1  /* pick ups */
       into :lprice, :lrgwt
  do opopenrgpus = opopenrgpus + (lprice * lrgwt);

  /* and finally any uninvoiced tips */
  opopentips = 0;
  for select tip.id, tip.price, tip.bycubic, tip.cubicmetres, tip.grossweight,
        tip.tareweight, (tip.fixedvalueexgst + tip.fixedvaluegst)
        from tip
        where tip.invno = 0
          and tip.custid = :ipcustid
         into :ljobid, :lprice, :ljfincex, :ljfamount, :lrgwt, :lpaidsofar, :lfixedval
  do begin
    if (lfixedval is not null and lfixedval > 0)
    then opopentips = opopentips + lfixedval;
    else if (ljfincex = 1)
    then opopentips = opopentips + (ljfamount * lprice);
    else opopentips = opopentips + ((lrgwt - lpaidsofar) * lprice);

    /* now add in the fees */
    for select sum(tipfee.incamount)
                    from tipfee
                    where tipfee.tipid = :ljobid
                    into :ljfamount
    do begin
      if (ljfamount is null)
      then ljfamount = 0;
      opopentips = opopentips + ljfamount;
    end
  end

end^


ALTER PROCEDURE SPGET_BCPRICES (
    IPBINCOMPANYID INTEGER)
RETURNS (
    OPBINCOMPANYID INTEGER,
    OPBINTYPEID INTEGER,
    OPBINFORMATID INTEGER,
    OPPRICE DECIMAL(7,2),
    OPINCEX INTEGER)
AS
begin
  for select bcprices.bincompanyid,
            bcprices.bintypeid,
            bcprices.binformatid,
            bcprices.price,
            bcprices.incex
        from bcprices
        where bcprices.bincompanyid = :ipbincompanyid
        into :opbincompanyid,
             :opbintypeid,
             :opbinformatid,
             :opprice,
             :opincex
       do suspend;
end^


ALTER PROCEDURE SPGET_BINFORMAT (
    IPBINFORMATID INTEGER DEFAULT NULL)
RETURNS (
    OPBINFORMATID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPDEFAULTFORMAT SMALLINT,
    OPVERSIONNO INTEGER)
AS
BEGIN
SELECT binformat.binformatid,
           binformat.description,
           BINFORMAT.DEFAULTFORMAT
FROM binformat
where binformat.binformatid = :ipbinformatid
INTO :opbinformatid, :opdescription,
    :opdefaultformat;
SUSPEND;
END^


ALTER PROCEDURE SPGET_BINFORMATS
RETURNS (
    OPBINFORMATID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPDEFAULTFORMAT SMALLINT,
    OPVERSIONNO INTEGER)
AS
BEGIN
for SELECT binformat.binformatid,
           binformat.description,
           BINFORMAT.DEFAULTFORMAT,
           BINFORMAT.VERSIONNO
FROM binformat
INTO :opbinformatid, :opdescription,
    :opdefaultformat, :opversionno
do SUSPEND;
END^


ALTER PROCEDURE SPGET_BINMVS (
    IPMVDATE DATE DEFAULT NULL,
    IPTODATE DATE DEFAULT NULL)
RETURNS (
    OPMOVEID INTEGER,
    OPMVDATE DATE,
    OPBINTYPEID INTEGER,
    OPFROMSITEID INTEGER,
    OPOUTEMPTY INTEGER,
    OPOUTFULL INTEGER,
    OPTOSITEID INTEGER,
    OPINEMPTY INTEGER,
    OPINFULL INTEGER)
AS
BEGIN
  for select binmv.BINMVID,
         BINMV.MOVEDATE,
         BINMV.BINTYPEID,
         binmv.FROMSITEID,
         BINMV.OUTEMPTY,
         BINMV.OUTFULL,
         BINMV.TOSITEID,
         BINMV.INEMPTY,
         BINMV.INFULL
         from BINMV
         where binmv.MOVEDATE >= :ipmvdate
           and binmv.MOVEDATE <= :iptodate
                    /* we only want manually entered movements so */
           and binmv.jobid = 0 /* ignore movements from real jobs */
         into :opmoveid,
         :opmvdate,
         :opbintypeid,
         :opfromsiteid,
         :opoutempty,
         :opoutfull,
         :optositeid,
         :opinempty,
         :opinfull
  do SUSPEND;
  
END^


ALTER PROCEDURE SPGET_BINNOUSE (
    IPBINNO CHAR(8) DEFAULT NULL)
RETURNS (
    OPDIRECTION SMALLINT,
    OPJOBID INTEGER,
    OPJOBDATE DATE,
    OPDRIVERID INTEGER,
    OPJOBTYPE INTEGER,
    OPCUSTID INTEGER,
    OPCUSTNAME CHAR(50))
AS
BEGIN
  for select JOBBINS.DIRECTION, JOBBINS.JOBID,
         job.JOBDATE, job.DRIVERID, job.JOBTYPE,
         sorder.custid,
         customer.NAME
         from jobbins
         left outer join job ON JOBBINS.JOBID = job.jobid
         left outer join sorder on job.ORDERID = sorder.ORDERID
         left outer join customer on sorder.CUSTID = customer.custid
         where jobbins.CBINNO = :ipbinno
         into :opdirection,
              :opjobid,
              :opjobdate,
              :opdriverid,
              :opjobtype,
              :opcustid,
              :opcustname
            do suspend;
END^


ALTER PROCEDURE SPGET_BINSUSED (
    IPBINTYPEID INTEGER = null,
    IPSTARTDATE DATE = null,
    IPENDDATE DATE = null,
    IPINCLUDEBOOKEDIN INTEGER = null)
RETURNS (
    OPBINSIN INTEGER,
    OPBINSOUT INTEGER,
    OPDATE DATE)
AS
declare variable ldate date;
declare variable lbincount integer;
BEGIN
LDATE = ipstartdate;
  while (LDATE <= ipenddate) DO BEGIN
    opbinsout = 0;
    opbinsin = 0;
    for select job.BINS_OUT
      from job
      where job.BINTYPEID_OUT = :ipbintypeid
        and job.JOBDATE = :LDATE
        and (:ipincludebookedin = 1 or job.jobstatus != 1)
        and job.jobstatus != 6 /* cancelled */
      into :LBINCOUNT
      do opbinsout = opbinsout + LBINCOUNT;
    for select job.BINS_IN
      from job
      where job.BINTYPEID_IN = :ipbintypeid
        and job.JOBDATE = :LDATE
        and (:ipincludebookedin = 1 or job.jobstatus != 1)
        and job.jobstatus != 6 /* cancelled */
      into :LBINCOUNT
    do opbinsin = opbinsin + LBINCOUNT;
    opdate = ldate;
    SUSPEND;
    LDATE = LDATE + 1; /* dateadd(1 day for ldate); */
  end
END^


ALTER PROCEDURE SPGET_BINTYPE (
    IPBINTYPEID INTEGER)
RETURNS (
    OPBINTYPEID INTEGER,
    OPBINTYPE CHAR(3),
    OPDESCRIPTION CHAR(15),
    OPFULLDESC CHAR(30),
    OPPRICE DECIMAL(18,2),
    OPACCOUNTNO CHAR(25),
    OPINCEX INTEGER,
    OPITEMCODE CHAR(12),
    OPSORTORDER INTEGER,
    OPCUBICMETRES DECIMAL(6,1),
    OPVERSIONNO INTEGER,
    OPASBESTOSITEM CHAR(25),
    OPCOMPANY CHAR(10),
    OPVALIDFORMATS CHAR(200),
    OPSITEBINITEMCODE CHAR(24),
    OPSITEBINACCOUNTNO CHAR(24),
    OPADVERTISEDCUBICMETRES INTEGER,
    OPCOMMENTS1 CHAR(50),
    OPCOMMENTS2 CHAR(50),
    OPFLAGS INTEGER,
    OPPINCOLOUR VARCHAR(50))
AS
BEGIN
for SELECT bintype.bintypeid, bintype.bintype,
      description, fulldescription,
         prices.PRICE, accountno,
         prices.INCEX,
         itemcode, sortorder, dcubicmetres,
        versionno, asbestositemcode,
        company, validformats,
        sitebinsitemcode, sitebinsaccountno,
        cubicmetres, /* this is now the advertised cubic metres (x 10) */
        comment1,
        comment2,
        bintype.flags,
        bintype.pincolour
FROM bintype
left outer join PRICES on PRICES.CUSTID = -1
                       AND prices.PRICEAREAID = -1
                       and prices.BINTYPEID = BINTYPE.BINTYPEID
where bintype.bintypeid = :ipbintypeid
INTO :opbintypeid, :opbintype, :opdescription,
    :opfulldesc, :opprice, :opaccountno,
     :opincex, :opitemcode, :opsortorder, :opcubicmetres,
      :opversionno, :opasbestositem, :opcompany,
      :opvalidformats,
      :opsitebinitemcode,
      :opsitebinaccountno,
      :opadvertisedcubicmetres,
      :opcomments1,
      :opcomments2,
      :opflags,
      :oppincolour
do SUSPEND;
end^


ALTER PROCEDURE SPGET_BINTYPES
RETURNS (
    OPBINTYPEID INTEGER,
    OPBINTYPE CHAR(8),
    OPDESCRIPTION CHAR(20),
    OPFULLDESC CHAR(30),
    OPPRICE DECIMAL(18,2),
    OPACCOUNTNO CHAR(25),
    OPINCEX INTEGER,
    OPITEMCODE CHAR(12),
    OPSORTORDER INTEGER,
    OPCUBICMETRES DECIMAL(6,1),
    OPVERSIONNO INTEGER,
    OPASBESTOSITEM CHAR(25),
    OPCOMPANY CHAR(10),
    OPVALIDFORMATS CHAR(200),
    OPSITEBINITEMCODE CHAR(24),
    OPSITEBINACCOUNTNO CHAR(24),
    OPADVERTISEDCUBICMETRES INTEGER,
    OPCOMMENTS1 CHAR(50),
    OPCOMMENTS2 CHAR(50),
    OPFLAGS INTEGER,
    OPPINCOLOUR VARCHAR(50))
AS
BEGIN
for
SELECT bintype.bintypeid, bintype.bintype,
      description, fulldescription,
        prices.PRICE, accountno, prices.incex, itemcode,
         sortorder, dcubicmetres,
        versionno, asbestositemcode,
        company, validformats,
        sitebinsitemcode,
        sitebinsaccountno,
        cubicmetres, /* this is now the advertised cubic metres */
        comment1,
        comment2,
        bintype.flags,
        bintype.pincolour
FROM bintype
left outer join PRICES on PRICES.CUSTID = -1
                       AND prices.PRICEAREAID = -1
                       and prices.BINTYPEID = BINTYPE.BINTYPEID
order by sortorder
INTO :opbintypeid, :opbintype, :opdescription, :opfulldesc,
      :opprice,
     :opaccountno,
     :opincex, :opitemcode, :opsortorder, :opcubicmetres,
      :opversionno, :opasbestositem, :opcompany,
      :opvalidformats,
      :opsitebinitemcode,
      :opsitebinaccountno,
      :opadvertisedcubicmetres,
      :opcomments1,
      :opcomments2,
      :opflags,
      :oppincolour
do SUSPEND;

end^


ALTER PROCEDURE SPGET_BOOKINVNOS
RETURNS (
    OPINVNO INTEGER)
AS
begin
  for select first 200
      invno
      from bookinvno
      order by bookinvno.invno descending
      into :opinvno
      do suspend;
end^


ALTER PROCEDURE SPGET_CALLCOUNTS (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPDDATE DATE,
    OPUSERID INTEGER,
    OPNEWORDERS INTEGER,
    OPCHANGEOVERS INTEGER,
    OPPICKUPS INTEGER,
    OPMISSEDORDERS INTEGER,
    OPGENERALENQUIRIES INTEGER)
AS
begin
   for select callcounts.ddate,
    callcounts.userid,
    callcounts.neworders,
    callcounts.changeovers,
    callcounts.pickups,
    callcounts.missedorders,
    callcounts.generalenquiries
    from callcounts
    where callcounts.ddate >= :ipfromdate
      and callcounts.ddate <= :iptodate
    into :opddate,
         :opuserid,
         :opneworders,
         :opchangeovers,
         :oppickups,
         :opmissedorders,
         :opgeneralenquiries
   do suspend;
end^


ALTER PROCEDURE SPGET_CANDELETECUST (
    IPCUSTID INTEGER)
RETURNS (
    OPCANDELETE INTEGER)
AS
declare variable idexists integer;
begin
  idexists = 0;
  opcandelete = 0;
  SELECT 1 FROM rdb$database WHERE EXISTS(SELECT * FROM sorder WHERE sorder.custid = :ipcustid) INTO :idexists;
  if (idexists = 0) then begin
      SELECT 1 FROM rdb$database WHERE EXISTS(SELECT * FROM crmcontacts WHERE crmcontacts.custid = :ipcustid) INTO :idexists;
      if (idexists = 0) then begin
          SELECT 1 FROM rdb$database WHERE EXISTS(SELECT * FROM docket WHERE docket.custid = :ipcustid) INTO :idexists;
          if (idexists = 0) then begin
              SELECT 1 FROM rdb$database WHERE EXISTS(SELECT * FROM rgsalesorder where rgsalesorder.custid = :ipcustid) INTO :idexists;
              if (idexists = 0) then begin
                  SELECT 1 FROM rdb$database WHERE EXISTS(SELECT * FROM tip where tip.custid = :ipcustid) INTO :idexists;
                  if (idexists = 0) then begin
                      SELECT 1 FROM rdb$database WHERE EXISTS(SELECT * FROM tip where tip.custid = :ipcustid) INTO :idexists;
                      if (idexists = 0) then begin
                         opcandelete = 1;
                      end
                  end
              end
          end
      end
  end

  suspend;
end^


ALTER PROCEDURE SPGET_CARDTYPES
RETURNS (
    OPCARDTYPEID INTEGER,
    OPCARDNAME CHAR(8),
    OPSURCHARGE DECIMAL(5,2))
AS
begin
  for select cardtype.cardtypeid, cardtype.cardname, cardtype.surcharge
        from cardtype
        into :opcardtypeid, :opcardname, :opsurcharge
  do suspend;
end^


ALTER PROCEDURE SPGET_CDRPT (
    IPDRIVERID INTEGER,
    IPFROMDATE DATE = null,
    IPTODATE DATE = null)
RETURNS (
    OPDRIVERID INTEGER,
    OPBINTYPEIDOUT INTEGER,
    OPBINSOUT INTEGER,
    OPBINTYPEIDIN INTEGER,
    OPBINSIN INTEGER,
    OPBINTYPEREL INTEGER,
    OPBINSREL INTEGER,
    OPJOBTYPE INTEGER,
    OPJOBDATE DATE)
AS
BEGIN
  /* this gets the figures for the contract driver report */
  for select job.DRIVERID,
             job.bintypeid_out,
             job.bins_out,
             job.bintypeid_in,
             job.bins_in,
             job.bintyperelocate,
             job.bins_relocate,
             job.JOBTYPE,
             job.jobdate
          from JOB
          where job.jobdate >= :ipfromdate
            and job.jobdate <= :iptodate
            and job.JOBSTATUS = 3 /* done */
            and job.driverid = :ipdriverid
          into :opdriverid, 
                :opbintypeidout,
                :opbinsout,
                :opbintypeidin,
                :opbinsin,
                :opbintyperel,
                :opbinsrel,
                :opjobtype,
                :opjobdate
   do suspend;
  /*
  LRPTID = GEN_ID(TTSUMMGEN, 1);
  for select job.DRIVERID,
             job.bintypeid_out,
             job.bins_out,
             job.bintypeid_in,
             job.bins_in,
             job.JOBTYPE
          from JOB
          where job.jobdate >= :ipfromdate
            and job.jobdate <= :iptodate
            and job.JOBSTATUS = 3 // done //
          into 
               :ldriverid,
               :lbintypeidout,
               :lbincountout,
               :lbintypeidin,
               :lbincountin,
               :ljobtype
          do begin
           if (ldriverid is distinct from null) then begin
            if (lbincountout > 0) then begin
              select contractdriverprice.incprice
                    from contractdriverprice
                    where contractdriverprice.driverid = :ldriverid
                      and contractdriverprice.jobtype = :ljobtype
                      and contractdriverprice.bintypeid = :lbintypeidout
                     into :lincprice;
              lvalue = lincprice;
              if (lbincountout > 1) then begin
                select
                    
              update TTSUMMARY set numdelivered = numdelivered + :lbincountout
                             where TTSUMMARY.RPTID = :lrptid
                               and TTSUMMARY.ID = :ldriverid
                               and TTSUMMARY.CHARID = cast(:ljobtype as char)
                               and ttsummary.cubicmetres = :lbintypeidout;
              if (row_count = 0) then
                insert into TTSUMMARY (rptid, id, charid,
                             cubicmetres,
                             numdelivered,
                             numpickups)
                            values (:lrptid,
                                    :ldriverid,
                                    cast(:ljobtype as char),
                                    :lbintypeidout,
                                    :lbincountout,
                                    :ljobtype); // also save int version //
             end
            end
          end

  for select TTSUMMARY.id,  // the driver //
             TTSUMMARY.numpickups,   // the job type //
             TTSUMMARY.cubicmetres,   // the bintypeid //
             TTSUMMARY.numdelivered   // the bin count //
             from TTSUMMARY
             where TTSUMMARY.RPTID = :lrptid
             into :opdriverid,
                  :opjobtype,
                  :opbintypeid,
                  :opnumdeliveries
             do SUSPEND;
             
  // finally clear up our entries in the 'temp-table' //
  delete from TTSUMMARY
    where TTSUMMARY.RPTID = :lrptid;
  */
end^


ALTER PROCEDURE SPGET_CHANGEDETAILS (
    IPENTITYID INTEGER,
    IPOBJECTID INTEGER)
RETURNS (
    OPAMDTIME TIMESTAMP,
    OPDETAILS CHAR(500),
    OPUSERID INTEGER)
AS
BEGIN
  for select amendtime, changedetails, userid
         from jobamend
         where jobamend.entityid = :ipentityid
           and jobamend.objectid = :ipobjectid
         order by jobamend.AMENDTIME desc
         into :opamdtime,
              :opdetails,
              :opuserid
  do suspend;
END^


ALTER PROCEDURE SPGET_CONTRACTDRIVERPRICES (
    IPDRIVERID INTEGER)
RETURNS (
    OPDRIVERID INTEGER,
    OPJOBTYPE INTEGER,
    OPBINTYPEID INTEGER,
    OPINCPRICE DECIMAL(15,2))
AS
begin
  for select contractdriverprice.driverid,
    contractdriverprice.jobtype,
    contractdriverprice.bintypeid,
    contractdriverprice.incprice
    from contractdriverprice
    where contractdriverprice.driverid = :ipdriverid
    into :opdriverid,
         :opjobtype,
         :opbintypeid,
         :opincprice
 do suspend;
end^


ALTER PROCEDURE SPGET_COUNCIL (
    IPCOUNCILID INTEGER)
RETURNS (
    OPCOUNCILID INTEGER,
    OPNAME CHAR(40),
    OPCOMMENT CHAR(200))
AS
BEGIN
  for select councils.councilid,
      councils.name,
      councils.comment
      from councils
      where councils.councilid = :ipcouncilid
      into
      opcouncilid,
      opname,
      opcomment
  do suspend;
END^


ALTER PROCEDURE SPGET_COUNCILPDFS (
    IPCOUNCILID INTEGER)
RETURNS (
    OPFILENAME CHAR(256),
    OPDESCRIPTION CHAR(50))
AS
BEGIN
  for select councilpdfs.filename,
             councilpdfs.DESCRIPTION
      from councilpdfs
      where councilpdfs.councilid = :ipcouncilid
      into :opfilename,
           :opdescription
      do suspend;
END^


ALTER PROCEDURE SPGET_COUNCILS
RETURNS (
    OPCOUNCILID INTEGER,
    OPNAME CHAR(40),
    OPCOMMENT CHAR(200))
AS
BEGIN
  for select councils.councilid,
      councils.name,
      councils.comment
      from councils
      into
      opcouncilid,
      opname,
      opcomment
  do suspend;
END^


ALTER PROCEDURE SPGET_COUNCILSFORSUB (
    IPSUBURB CHAR(40),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10))
RETURNS (
    OPCOUNCILID INTEGER,
    OPNAME CHAR(40),
    OPCOMMENT CHAR(200))
AS
BEGIN
  /* this will be pretty slow because of the lower() things and no indexes - if too slow then
   * I need second fields holding lower case versions of the fields...
   */
  for select councils.councilid,
      councils.name,
      councils.comment
      from councilsuburbs
      left outer join councils on councilsuburbs.COUNCILID = councils.councilid
      where lower(councilsuburbs.SUBURBNAME) = lower(:ipsuburb)
        and councilsuburbs.POSTCODE = :ippostcode
        and lower(councilsuburbs.state) = lower(:ipstate)
      into
      opcouncilid,
      opname,
      opcomment
  do suspend;
END^


ALTER PROCEDURE SPGET_COUNCILSUBURBS (
    IPCOUNCILID INTEGER)
RETURNS (
    OPSUBURBNAME CHAR(40),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10))
AS
BEGIN
  for select councilsuburbs.SUBURBNAME,
             councilsuburbs.POSTCODE,
             councilsuburbs.STATE
      from councilsuburbs
      where councilsuburbs.councilid = :ipcouncilid
      into :opsuburbname,
           :oppostcode,
           :opstate
      do suspend;
END^


ALTER PROCEDURE SPGET_CREDITLINES (
    IPCREDITNOTEID INTEGER)
RETURNS (
    OPCREDITLINEID INTEGER,
    OPCREDITNOTEID INTEGER,
    OPLINETYPE INTEGER,
    OPOBJECTID INTEGER,
    OPOBJECTID2 INTEGER,
    OPEXAMOUNT DECIMAL(15,2),
    OPENTEREDASINC INTEGER,
    OPINVLINENO INTEGER,
    OPJOBDATE DATE,
    OPOBJECTID3 INTEGER,
    OPFLAGS INTEGER,
    OPDESCRIPTION VARCHAR(200))
AS
begin
  for select creditline.creditlineid, creditline.creditnoteid, creditline.linetype,
             creditline.objectid, creditline.objectid2, creditline.examount,
             creditline.enteredasinc, creditline.invlineno,
             creditline.jobdate, creditline.objectid3, creditline.flags,
             creditline.description
         from creditline
         where creditline.creditnoteid = :ipcreditnoteid
         into :opcreditlineid,
              :opcreditnoteid,
              :oplinetype,
              :opobjectid,
              :opobjectid2,
              :opexamount,
              :openteredasinc,
              :opinvlineno,
              :opjobdate,
              :opobjectid3,
              :opflags,
              :opdescription
   do suspend;
end^


ALTER PROCEDURE SPGET_CREDITLINESFROMTO (
    IPLINETYPE INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPCREDITLINEID INTEGER,
    OPCREDITNOTEID INTEGER,
    OPLINETYPE INTEGER,
    OPOBJECTID INTEGER,
    OPOBJECTID2 INTEGER,
    OPEXAMOUNT DECIMAL(15,2),
    OPENTEREDASINC INTEGER,
    OPINVLINENO INTEGER,
    OPJOBDATE DATE,
    OPOBJECTID3 INTEGER,
    OPFLAGS INTEGER,
    OPDESCRIPTION VARCHAR(200))
AS
begin
  for select creditline.creditlineid, creditline.creditnoteid, creditline.linetype,
             creditline.objectid, creditline.objectid2, creditline.examount,
             creditline.enteredasinc, creditline.invlineno,
             creditline.jobdate, creditline.objectid3, creditline.flags,
             creditline.description
         from creditline
         /* left outer join creditline on creditline.creditnoteid = creditnote.creditbnoteid */
         where creditline.jobdate >= :ipfromdate
           and creditline.jobdate <= :iptodate
           and creditline.linetype = :iplinetype
         into :opcreditlineid,
              :opcreditnoteid,
              :oplinetype,
              :opobjectid,
              :opobjectid2,
              :opexamount,
              :openteredasinc,
              :opinvlineno,  
              :opjobdate,
              :opobjectid3,
              :opflags,
              :opdescription
   do suspend;
end^


ALTER PROCEDURE SPGET_CREDITNOTE (
    IPCNID INTEGER)
RETURNS (
    OPCREDITNOTEID INTEGER,
    OPCREDITNOTENO INTEGER,
    OPCUSTID INTEGER,
    OPUSERID INTEGER,
    OPTIMECREATED TIMESTAMP,
    OPCREDITDATE DATE,
    OPFLAGS INTEGER,
    OPCOMMENTS CHAR(500),
    OPAMOUNT DECIMAL(15,2),
    OPINVBATCHNO INTEGER,
    OPINVNO CHAR(10))
AS
begin
  for select creditnote.creditbnoteid, creditnote.creditnoteno, creditnote.custid,
             creditnote.userid, creditnote.timecreated, creditnote.creditdate,
             creditnote.flags, creditnote.comments, creditnote.invbatchno,
             creditnote.invno
         from creditnote
         where creditnote.creditbnoteid = :ipcnid
         into :opcreditnoteid,
              :opcreditnoteno,
              :opcustid,
              :opuserid,
              :optimecreated,
              :opcreditdate,
              :opflags,
              :opcomments,
              :opinvbatchno,
              :opinvno
   do begin
     opamount = 0;
     select sum(creditline.examount)
            from creditline
            where creditline.creditnoteid = :opcreditnoteid
            into :opamount;
     if (opamount is null)
     then opamount = 0;
     suspend;
   end
end^


ALTER PROCEDURE SPGET_CREDITNOTES (
    IPCUSTID INTEGER)
RETURNS (
    OPCREDITNOTEID INTEGER,
    OPCREDITNOTENO INTEGER,
    OPCUSTID INTEGER,
    OPUSERID INTEGER,
    OPTIMECREATED TIMESTAMP,
    OPCREDITDATE DATE,
    OPFLAGS INTEGER,
    OPCOMMENTS CHAR(500),
    OPAMOUNT DECIMAL(15,2),
    OPINVBATCHNO INTEGER,
    OPINVNO CHAR(10))
AS
begin
  for select creditnote.creditbnoteid, creditnote.creditnoteno, creditnote.custid,
             creditnote.userid, creditnote.timecreated, creditnote.creditdate,
             creditnote.flags, creditnote.comments, creditnote.invbatchno,
             creditnote.invno
         from creditnote
         where creditnote.custid = :ipcustid
         order by creditnote.creditbnoteid descending
         rows 100
         into :opcreditnoteid,
              :opcreditnoteno,
              :opcustid,
              :opuserid,
              :optimecreated,
              :opcreditdate,
              :opflags,
              :opcomments,
              :opinvbatchno,
              :opinvno
   do begin
     opamount = 0;
     select sum(creditline.examount)
            from creditline
            where creditline.creditnoteid = :opcreditnoteid
            into :opamount;
     if (opamount is null)
     then opamount = 0;
     suspend;
   end
end^


ALTER PROCEDURE SPGET_CREDITNOTESFORBATCH (
    IPBATCHID INTEGER)
RETURNS (
    OPCREDITNOTEID INTEGER,
    OPCREDITNOTENO INTEGER,
    OPCUSTID INTEGER,
    OPUSERID INTEGER,
    OPTIMECREATED TIMESTAMP,
    OPCREDITDATE DATE,
    OPFLAGS INTEGER,
    OPCOMMENTS CHAR(500),
    OPAMOUNT DECIMAL(15,2),
    OPINVBATCHNO INTEGER,
    OPINVNO CHAR(10))
AS
begin
  for select creditnote.creditbnoteid, creditnote.creditnoteno, creditnote.custid,
             creditnote.userid, creditnote.timecreated, creditnote.creditdate,
             creditnote.flags, creditnote.comments, creditnote.invbatchno,
             creditnote.invno
         from creditnote
         where creditnote.invbatchno = :ipbatchid
         into :opcreditnoteid,
              :opcreditnoteno,
              :opcustid,
              :opuserid,
              :optimecreated,
              :opcreditdate,
              :opflags,
              :opcomments,
              :opinvbatchno,
              :opinvno
   do begin
     opamount = 0;
     select sum(creditline.examount)
            from creditline
            where creditline.creditnoteid = :opcreditnoteid
            into :opamount;
     if (opamount is null)
     then opamount = 0;
     suspend;
   end
end^


ALTER PROCEDURE SPGET_CREDITNOTESFORINVNO (
    IPINVNO CHAR(10))
RETURNS (
    OPCREDITNOTEID INTEGER,
    OPCREDITNOTENO INTEGER,
    OPCUSTID INTEGER,
    OPUSERID INTEGER,
    OPTIMECREATED TIMESTAMP,
    OPCREDITDATE DATE,
    OPFLAGS INTEGER,
    OPCOMMENTS CHAR(500),
    OPAMOUNT DECIMAL(15,2),
    OPINVBATCHNO INTEGER,
    OPINVNO CHAR(10))
AS
begin
  for select creditnote.creditbnoteid, creditnote.creditnoteno, creditnote.custid,
             creditnote.userid, creditnote.timecreated, creditnote.creditdate,
             creditnote.flags, creditnote.comments, creditnote.invbatchno,
             creditnote.invno
         from creditnote
         where creditnote.invno = :ipinvno
         into :opcreditnoteid,
              :opcreditnoteno,
              :opcustid,
              :opuserid,
              :optimecreated,
              :opcreditdate,
              :opflags,
              :opcomments,
              :opinvbatchno,
              :opinvno
   do begin
     opamount = 0;
     select sum(creditline.examount)
            from creditline
            where creditline.creditnoteid = :opcreditnoteid
            into :opamount;
     if (opamount is null)
     then opamount = 0;
     suspend;
   end
end^


ALTER PROCEDURE SPGET_CREDITNOTESFROMTO (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPCREDITNOTEID INTEGER,
    OPCREDITNOTENO INTEGER,
    OPCUSTID INTEGER,
    OPUSERID INTEGER,
    OPTIMECREATED TIMESTAMP,
    OPCREDITDATE DATE,
    OPFLAGS INTEGER,
    OPCOMMENTS CHAR(500),
    OPAMOUNT DECIMAL(15,2),
    OPINVBATCHNO INTEGER,
    OPINVNO CHAR(10))
AS
begin
  for select creditnote.creditbnoteid, creditnote.creditnoteno, creditnote.custid,
             creditnote.userid, creditnote.timecreated, creditnote.creditdate,
             creditnote.flags, creditnote.comments, creditnote.invbatchno,
             creditnote.invno
         from creditnote
         where creditnote.creditdate >= :ipfromdate
           and creditnote.creditdate <= :iptodate
         into :opcreditnoteid,
              :opcreditnoteno,
              :opcustid,
              :opuserid,
              :optimecreated,
              :opcreditdate,
              :opflags,
              :opcomments,
              :opinvbatchno,
              :opinvno
   do begin
     opamount = 0;
     select sum(creditline.examount)
            from creditline
            where creditline.creditnoteid = :opcreditnoteid
            into :opamount;
     if (opamount is null)
     then opamount = 0;
     suspend;
   end
end^


ALTER PROCEDURE SPGET_CRMCOMMSMETHOD
RETURNS (
    OPCOMMSMETHODID INTEGER,
    OPDESCRIPTION CHAR(30))
AS
begin
  for select crmcommsmethod.commsmethodid,
             crmcommsmethod.description
       from crmcommsmethod
       into :opcommsmethodid,
            :opdescription
  do suspend;
end^


ALTER PROCEDURE SPGET_CURRENTBINLEVELS
RETURNS (
    OPBINTYPEID INTEGER,
    OPSITEID INTEGER,
    OPBINCOUNT INTEGER)
AS
declare variable laststocktakedate date;
declare variable ltypeidout integer;
declare variable lbinsout integer;
declare variable lfromsiteid integer;
declare variable ltypeidin integer;
declare variable lbinsin integer;
declare variable ltositeid integer;
declare variable lrptid integer;
begin
  /* find the last stocktake date */
  execute procedure spget_stakefindcurrent (current_date) returning_values :laststocktakedate;

  lrptid = GEN_ID(TTSUMMGEN, 1);

  for select job.bintypeid_out, job.bins_out, job.fromsiteid,
             job.bintypeid_in,  job.bins_in,  job.tositeid
         from job
         where job.jobdate > :laststocktakedate
           and job.jobstatus = 3 /* only Done jobs */
           and (job.jobtype = 1 or job.jobtype = 2 or job.jobtype = 3)
          into :ltypeidout, :lbinsout, :lfromsiteid,
               :ltypeidin,  :lbinsin,  :ltositeid
          do begin
            /* summarise these details into ttsummary */
            if (lbinsout is not null and lbinsout > 0) then begin
              if (lfromsiteid is null)
              then lfromsiteid = -1;
              /* lower the stock count because this bin is going out */
              update ttsummary set ttsummary.numdelivered = ttsummary.numdelivered - :lbinsout
                     where ttsummary.rptid = :lrptid
                       and ttsummary.id = :ltypeidout
                       and ttsummary.numrelocations = :lfromsiteid;
              if (row_count = 0)
              then insert into ttsummary (rptid, id, numrelocations, numdelivered)
                                  values (:lrptid, :ltypeidout, :lfromsiteid, 0 - :lbinsout);
            end

            if (lbinsin is not null and lbinsin > 0) then begin 
              if (ltositeid is null)
              then ltositeid = -1;
              /* increase the stock level because this bin is coming back in */
              update ttsummary set ttsummary.numdelivered = ttsummary.numdelivered + :lbinsin
                     where ttsummary.rptid = :lrptid
                       and ttsummary.id = :ltypeidin
                       and ttsummary.numrelocations = :ltositeid;
              if (row_count = 0)
              then insert into ttsummary (rptid, id, numrelocations, numdelivered)
                                  values (:lrptid, :ltypeidin, :ltositeid, :lbinsin);
            end
          end

  for select ttsummary.id, ttsummary.numrelocations, ttsummary.numdelivered
            from ttsummary
            where ttsummary.rptid = :lrptid
            into :opbintypeid, :opsiteid, :opbincount
  do suspend;

  delete from ttsummary where ttsummary.rptid = :lrptid;
end^


ALTER PROCEDURE SPGET_CUSTGROUPS (
    IPCUSTID INTEGER,
    IPGROUPID INTEGER)
RETURNS (
    OPCUSTID INTEGER,
    OPGROUPID INTEGER,
    OPINFO INTEGER)
AS
begin
 if (ipcustid > 0) then
  for select custgroup.custid, custgroup.groupid, custgroup.info
       from custgroup
       where custgroup.custid = :ipcustid
       into :opcustid, :opgroupid, :opinfo
  do suspend;
 else
  for select custgroup.custid, custgroup.groupid, custgroup.info
       from custgroup
       where custgroup.groupid = :ipgroupid
       into :opcustid, :opgroupid, :opinfo
  do suspend;
end^


ALTER PROCEDURE SPGET_CUSTHIST (
    IPCUSTID INTEGER = null,
    IPSTARTDATE DATE = null,
    IPMAXROWS INTEGER = null)
RETURNS (
    OPORDERID INTEGER)
AS
BEGIN
/*
  if (ipmaxrows > 0) then
  for select first (:ipmaxrows)
         sorder.orderid
         from sorder
         where sorder.custid = :ipcustid
         order by sorder.FIRSTJOBDATE DESCENDING
         into :oporderid
  do SUSPEND;
  else
  for select sorder.orderid
         from sorder
         where sorder.custid = :ipcustid
           and sorder.FIRSTJOBDATE >= :ipstartdate
         into :oporderid
  do SUSPEND;
  */

  for select job.orderid
    from job
    where job.custid = :ipcustid
      and job.jobdate >= :ipstartdate
      into :oporderid
  do suspend;
END^


ALTER PROCEDURE SPGET_CUSTOMERSITES (
    IPCUSTID INTEGER,
    IPJUSTOPEN INTEGER)
RETURNS (
    OPCUSTOMERSITEID INTEGER,
    OPDESCRIPTION CHAR(50),
    OPCONTACT CHAR(50),
    OPPHONE CHAR(30),
    OPCUSTID INTEGER,
    OPISACTIVE SMALLINT,
    OPCUSTREF CHAR(100),
    OPORDERID INTEGER,
    OPCOMMENTS CHAR(200),
    OPOFFICENOTES CHAR(200),
    OPWHENTOINVOICE INTEGER,
    OPDEPOTNO CHAR(12),
    OPEMAIL CHAR(50),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
BEGIN
  for select CUSTOMERSITE.SITEID,
             CUSTOMERSITE.DESCRIPTION,
             CUSTOMERSITE.contact,
             CUSTOMERSITE.phone,
             CUSTOMERSITE.custid,
             CUSTOMERSITE.isactive,
             customersite.CUSTREFERENCE,
             customersite.ORDERID,
             customersite.comments,
             customersite.officenotes,
             customersite.whentoinvoice,
             customersite.depotno,
             customersite.email,
             address.addrid,
             address.STREETNUMBER,
             address.ADDRESS1,
             ADDRESS.ADDRESS2,
             ADDRESS.TOWN,
             ADDRESS.STATE,
             ADDRESS.POSTCODE,
             ADDRESS.gpslatitude,
             address.gpslongitude
            from CUSTOMERSITE
            left outer join address on customersite.addrid = address.addrid
            where customersite.CUSTID = :ipcustid
            into :opcustomersiteid,
                 :opdescription,
                 :opcontact,
                 :opphone,
                 :opcustid,
                 :opisactive,
                 :opcustref,
                 :oporderid,
                 :opcomments,
                 :opofficenotes,
                 :opwhentoinvoice,
                 :opdepotno,
                 :opemail,
                 :opaddrid,
                 :opstreetnumber,
                 :opaddress1,
                 :opaddress2,
                 :optown,
                 :opstate,
                 :oppostcode,
                 :opgpslatitude,
                 :OPGPSLONGITUDE
  do begin
    /* either the caller wants all or just return the active
     * sites
     */
    if (ipjustopen = 0 or opisactive = 1)
    then SUSPEND;
  end
END^


ALTER PROCEDURE SPGET_CUSTOPENORDERS (
    IPCUSTID INTEGER,
    IPMAXSITES INTEGER)
RETURNS (
    OPORDERID INTEGER,
    OPCUSTID INTEGER,
    OPCUSTNAME CHAR(50),
    OPCONTACT CHAR(30),
    OPCOMPLETE INTEGER,
    OPINVTYPE INTEGER,
    OPBYBINNO INTEGER,
    DELADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPDELADDRESS1 CHAR(30),
    OPDELADDRESS2 CHAR(30),
    OPDELTOWN CHAR(30),
    OPDELSTATE CHAR(30),
    OPDELPOSTCODE CHAR(10),
    OPDELGPSLAT NUMERIC(18,12),
    OPDELGPSLONG NUMERIC(18,12),
    OPBILLADDRID INTEGER,
    OPBILLADDRESS1 CHAR(30),
    OPBILLADDRESS2 CHAR(30),
    OPBILLTOWN CHAR(30),
    OPBILLSTATE CHAR(30),
    OPBILLPOSTCODE CHAR(10),
    OPBILLGPSLAT NUMERIC(18,12),
    OPBILLGPSLONG NUMERIC(18,12),
    OPVERSIONNO INTEGER,
    OPCUSTTELNO VARCHAR(14),
    OPCUSTTYPE INTEGER,
    OPREFERRALID INTEGER,
    OPFIRSTJOB DATE,
    OPUSERID INTEGER,
    OPCUSTSITEID INTEGER,
    OPJOBNO INTEGER)
AS
BEGIN

if (ipmaxsites = 0) then begin
  for SELECT orderid, sorder.custid, customer.NAME, sorder.contact, complete,
       invtype, bybinno,
       deladdrid, address.streetnumber, address.address1, address.address2, address.town,
        address.state, address.postcode, address.gpslatitude, address.gpslongitude,
       billaddrid, addr2.address1, addr2.address2, addr2.town, addr2.state,
       addr2.postcode, addr2.gpslatitude, addr2.gpslongitude,
       sorder.versionno,
       customer.TELEPHONE,
       sorder.CUSTTYPE,
       sorder.REFERRALID,
       sorder.FIRSTJOBDATE,
       sorder.USERID,
       sorder.CUSTOMERSITEID,
       sorder.jobno
  FROM SORDER
    left outer join customer on sorder.custid = customer.CUSTID
    left outer join address on sorder.deladdrid = address.addrid
    left outer join address as addr2 on sorder.billaddrid = addr2.addrid
  where sorder.complete = 0
    and sorder.custid = :ipcustid
  INTO :oporderid, :opcustid, :opcustname, :opcontact, :opcomplete,
     :opinvtype, :opbybinno,
     :deladdrid, :opstreetnumber, :opdeladdress1, :opdeladdress2, :opdeltown, :opdelstate,
     :opdelpostcode, :opdelgpslat, :opdelgpslong,
     :opbilladdrid, :opbilladdress1, :opbilladdress2, :opbilltown,
     :opbillstate, :opbillpostcode, :opbillgpslat, :opbillgpslong,
     :opversionno,
     :opcusttelno,
     :opcusttype,
     :opreferralid,
     :opfirstjob,
     :opuserid,
     :opcustsiteid,
     :opjobno
 DO SUSPEND;

end
else begin
   for SELECT orderid, sorder.custid, customer.NAME, sorder.contact, complete,
       invtype, bybinno,
       deladdrid, address.streetnumber, address.address1, address.address2, address.town,
        address.state, address.postcode, address.gpslatitude, address.gpslongitude,
       billaddrid, addr2.address1, addr2.address2, addr2.town, addr2.state,
       addr2.postcode, addr2.gpslatitude, addr2.gpslongitude,
       sorder.versionno,
       customer.TELEPHONE,
       sorder.CUSTTYPE,
       sorder.REFERRALID,
       sorder.FIRSTJOBDATE,
       sorder.USERID,
       sorder.CUSTOMERSITEID,
       sorder.jobno
  FROM SORDER
      left outer join customer on sorder.custid = customer.CUSTID
      left outer join address on sorder.deladdrid = address.addrid
      left outer join address as addr2 on sorder.billaddrid = addr2.addrid
  where sorder.custid = :ipcustid
    order by sorder.orderid desc
    rows :ipmaxsites
   INTO :oporderid, :opcustid, :opcustname, :opcontact, :opcomplete,
     :opinvtype, :opbybinno,
     :deladdrid, :opstreetnumber, :opdeladdress1, :opdeladdress2, :opdeltown, :opdelstate,
     :opdelpostcode, :opdelgpslat, :opdelgpslong,
     :opbilladdrid, :opbilladdress1, :opbilladdress2, :opbilltown,
     :opbillstate, :opbillpostcode, :opbillgpslat, :opbillgpslong,
     :opversionno,
     :opcusttelno,
     :opcusttype,
     :opreferralid,
     :opfirstjob,
     :opuserid,
     :opcustsiteid,
     :opjobno
  DO SUSPEND;
end

END^


ALTER PROCEDURE SPGET_CUSTRGPRICES (
    IPCUSTID INTEGER)
RETURNS (
    OPRGID INTEGER,
    OPDELIVERED DECIMAL(9,2),
    OPPICKUP DECIMAL(9,2))
AS
begin
  for select custrgprices.rgid,
             custrgprices.deliveredprice,
             custrgprices.pickupprice
      from custrgprices
      where custrgprices.custid = :ipcustid
      into :oprgid,
           :opdelivered,
           :oppickup
    do suspend;
end^


ALTER PROCEDURE SPGET_CUSTS1STJOBID (
    IPCUSTID INTEGER,
    IPFROMDATE DATE)
RETURNS (
    OPJOBID INTEGER,
    OPJOBDATE DATE)
AS
begin
  /* this has to return the first job since the from date that
   * is for the customer. This will be used to decide whether to pay first
   * time commission or just normal
   */
  for select first 1 job.jobid, job.jobdate
           from job
          where job.custid = :ipcustid
            and job.jobdate >= :ipfromdate
            plan (job index (IDX_CUST)) 
          into :opjobid, :opjobdate
    do suspend;
end^


ALTER PROCEDURE SPGET_CUSTSITEPRICES (
    IPCUSTSITEID INTEGER DEFAULT NULL)
RETURNS (
    OPBINTYPEID INTEGER,
    OPPRICE DECIMAL(10,2),
    OPINCEX SMALLINT)
AS
BEGIN
  for select CSITEPRICE.BINTYPEID, CSITEPRICE.PRICE, CSITEPRICE.INCEX
      from CSITEPRICE
      where CSITEPRICE.CUSTOMERSITEID = :ipcustsiteid
      into :opbintypeid, :opprice, :opincex
  do SUSPEND;
END^


ALTER PROCEDURE SPGET_DEPTS
RETURNS (
    OPDEPTID INTEGER,
    OPDEPTDESC CHAR(40),
    OPPERMISSIONS BIGINT)
AS
begin
  for select department.deptid,
             department.description,
             department.permissions
         from department
         into :opdeptid,
              :opdeptdesc,
              :oppermissions
   do suspend;
end^


ALTER PROCEDURE SPGET_DRIVER (
    IPDRIVERID SMALLINT)
RETURNS (
    OPDRIVERID SMALLINT,
    OPSHORTNAME CHAR(8),
    OPFULLNAME CHAR(25),
    OPSTARTDATE DATE,
    OPFINISHDATE DATE,
    OPVERSIONNO INTEGER,
    OPMOBILE CHAR(20),
    OPJOBTYPEPRICES CHAR(150),
    OPCOPERCENT DECIMAL(6,2),
    OPADDJOBPERCENT DECIMAL(6,2),
    OPFLAGS INTEGER,
    OPLOGINNAME CHAR(50),
    OPPINCOLOUR VARCHAR(50))
AS
BEGIN
for SELECT driverid, shortname,
          fullname, startdate, finishdate,
          versionno, mobile,
          jobtypeprices,
          copercent,
          addjobpercent,
          driver.flags,
          driver.bwdiloginname,
          driver.pincolour
FROM DRIVER
where driverid = :ipdriverid
INTO :opdriverid,
     :opshortname, :opfullname,
     :opstartdate, :opfinishdate,
     :opversionno, :opmobile,
     :opjobtypeprices,
     :opcopercent,
     :opaddjobpercent,
     :opflags,
     :oploginname,
     :oppincolour
do SUSPEND;
end^


ALTER PROCEDURE SPGET_DRIVERANAL (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPDRIVERID INTEGER,
    OPDATE DATE,
    OPBATCHID INTEGER,
    OPSTARTKMS INTEGER,
    OPENDKMS INTEGER,
    OPTRUCKID INTEGER,
    OPSTARTTIME TIMESTAMP,
    OPENDTIME TIMESTAMP,
    OPFUELCOST DECIMAL(9,0),
    OPDROPCOUNT INTEGER,
    OPDROPM3 DECIMAL(9,0),
    OPCOCOUNT INTEGER,
    OPCOM3 DECIMAL(9,0),
    OPPUCOUNT INTEGER,
    OPPUM3 DECIMAL(9,0),
    OPRELCOUNT INTEGER,
    OPRELM3 DECIMAL(9,0),
    OPNUMTOLLS INTEGER,
    OPLOSTTIME DECIMAL(9,0),
    OPREPAIRS DECIMAL(9,0),
    OPCHEQUEAMT DECIMAL(9,0),
    OPCASHAMT DECIMAL(9,0))
AS
declare variable ljobtype integer;
declare variable lbinsout integer;
declare variable loutm3 decimal(18,1);
declare variable linm3 decimal(18,1);
declare variable lbinsin integer;
declare variable lbinsrel integer;
declare variable lrlm3 decimal(18,1);
BEGIN
  for select
      DRIVERRECBATCH.DRIVERID,
      DRIVERRECBATCH.DDATE,
      DRIVERRECBATCH.BATCHID,
      DRIVERRECBATCH.STARTKMS,
      DRIVERRECBATCH.ENDKMS,
      DRIVERRECBATCH.TRUCKID,
      DRIVERRECBATCH.STARTTIME,
      DRIVERRECBATCH.ENDTIME,
      DRIVERRECBATCH.FUELCOST,
      DRIVERRECBATCH.NUMTOLLS,
      DRIVERRECBATCH.LOSTTIME,
      DRIVERRECBATCH.REPAIRS,
      DRIVERRECBATCH.CHEQUEAMT,
      DRIVERRECBATCH.CASHAMT
      from DRIVERRECBATCH
      WHERE DRIVERRECBATCH.DDATE >= :ipfromdate
        and DRIVERRECBATCH.ddate <= :iptodate
      into :opdriverid,
           :opdate,
           :opbatchid,
           :opstartkms,
           :opendkms,
           :optruckid,
           :opstarttime,
           :opendtime,
           :opfuelcost,
           :opnumtolls,
           :oplosttime,
           :oprepairs,
           :opchequeamt,
           :opcashamt
  do begin
   /* if there are no start kms then try and find the last
    * time this truck was used and see if there are some end kms
    */
    if (opstartkms = 0 or opstartkms is null)
   then select DRIVERRECBATCH.ENDKMS
           from DRIVERRECBATCH
           where DRIVERRECBATCH.ddate < :opdate
             and DRIVERRECBATCH.TRUCKID = :optruckid
           order by DRIVERRECBATCH.ddate descending
           rows 1
           into :opstartkms;
           /* by ddate descending ? */
           
   /* if there is no end kms in the driverec then try and find
    * the opening kms the next time the truck is used
    */
   if (opendkms = 0 or opendkms is null)
   then select DRIVERRECBATCH.STARTKMS
           from DRIVERRECBATCH
           where DRIVERRECBATCH.ddate > :opdate
             and DRIVERRECBATCH.TRUCKID = :optruckid
           order by DRIVERRECBATCH.ddate
           rows 1
           into :opendkms;
           
    /* need the cubic metres, count of job types etc */
    OPDROPCOUNT = 0;
    OPDROPM3 = 0;
    opcocount = 0;
    opcom3 = 0;
    oppucount = 0;
    oppum3 = 0;
    oprelcount = 0;
    oprelm3 = 0;
    for select job.jobtype,
               job.BINS_OUT,
               bintypeout.dcubicmetres,
               job.BINS_IN,
               bintypein.dcubicmetres,
               job.BINS_RELOCATE,
               bintyperel.dcubicmetres
               from job
               left outer join bintype as bintypeout
                     on job.BINTYPEID_OUT = bintypeout.bintypeid
               left outer join bintype as bintypein
                     on job.BINTYPEID_IN = bintypein.bintypeid
               left outer join bintype as bintyperel
                     on job.BINTYPERELOCATE = bintyperel.bintypeid
               where job.jobdate = :opdate
                 and job.driverid = :opdriverid
               into :LJOBTYPE,
                    :LBINSOUT,
                    :LOUTM3,
                    :LBINSIN,
                    :LINM3,
                    :LBINSREL,
                    :LRLM3
    do begin
      if (LJOBTYPE = 1)
      then begin  /* drop off */
        OPDROPCOUNT = OPDROPCOUNT + LBINSOUT;
        OPDROPM3 = OPDROPM3 + (LBINSOUT * LOUTM3);
      end
      else if (LJOBTYPE = 2 or LJOBTYPE = 4)
      then begin /* changeover or service */
         /* changed 29/10/09 to now count in as well as out bins */
        OPCOCOUNT = OPCOCOUNT + LBINSOUT + LBINSIN;
        OPCOM3 = OPCOM3 + (LBINSOUT * LOUTM3) + (LBINSIN * LINM3);
      end
      else if (LJOBTYPE = 3)
      then begin /* pick up  */
        OPPUCOUNT = OPPUCOUNT + LBINSIN;
        OPPUM3 = OPPUM3 + (LBINSIN * LINM3);
      end
      else if (LJOBTYPE = 5)
      then begin /* relocate */
        OPRELCOUNT = OPRELCOUNT + lBINSREL;
        OPRELM3 = OPRELM3 + (LBINSREL * LRLM3);
      end
    end /* of job loop */
    
    SUSPEND;
  END
end^


ALTER PROCEDURE SPGET_DRIVERLOGWEB (
    IPDDATE DATE,
    IPDRIVERID INTEGER)
RETURNS (
    OPSTARTTIME TIMESTAMP,
    OPENDTIME TIMESTAMP,
    OPSTARTKMS INTEGER,
    OPENDKMS INTEGER,
    OPFUELCOST DECIMAL(8,2),
    OPFUELLITRES DECIMAL(8,2),
    OPREGO CHAR(15))
AS
BEGIN
  for select
      DRIVERRECBATCH.STARTTIME,
      DRIVERRECBATCH.ENDTIME,
      DRIVERRECBATCH.STARTKMS,
      DRIVERRECBATCH.ENDKMS,
      DRIVERRECBATCH.FUELCOST,
      driverrecbatch.FUELLITRES,
      driverrecbatch.regoweb
      from DRIVERRECBATCH
      where DRIVERRECBATCH.DDATE = :ipddate
        and DRIVERRECBATCH.DRIVERID = :ipdriverid
      into :opstarttime,
           :opendtime,
           :opstartkms,
           :opendkms,
           :opfuelcost,
           :opfuellitres,
           :oprego
      do SUSPEND;
end^


ALTER PROCEDURE SPGET_DRIVERREC (
    IPDDATE DATE,
    IPDRIVERID INTEGER)
RETURNS (
    OPBATCHID INTEGER,
    OPJOBID INTEGER,
    OPDD CHAR(12),
    OPPAYMID INTEGER,
    OPCHEQALLOC DECIMAL(18,2),
    OPCASHALLOC DECIMAL(18,2),
    OPDOBINNOS CHAR(30),
    OPPUBINNOS CHAR(30),
    OPPUWEIGHT DECIMAL(5,3),
    OPPUVOLUME DECIMAL(5,2),
    OPSITEID INTEGER,
    OPPRICEAREAID INTEGER,
    OPSTARTTIME TIMESTAMP,
    OPENDTIME TIMESTAMP,
    OPTRUCKID INTEGER,
    OPSTARTKMS INTEGER,
    OPENDKMS INTEGER,
    OPFUELCOST DECIMAL(8,2),
    OPNUMTOLLS INTEGER,
    OPLOSTTIME DECIMAL(15,2),
    OPREPAIRS DECIMAL(15,2))
AS
BEGIN
  /* this is very similar to spget_reconforday so any
   * changes made here should probably be made in there
   * too
   */
  for select 
      DRIVERRECBATCH.BATCHID,
      DRIVERRECBATCH.CHEQUEAMT,
      DRIVERRECBATCH.CASHAMT,
      DRIVERRECBATCH.VERSIONNO,
      DRIVERRECBATCH.STARTTIME,
      DRIVERRECBATCH.ENDTIME,
      DRIVERRECBATCH.TRUCKID,
      DRIVERRECBATCH.STARTKMS,
      DRIVERRECBATCH.ENDKMS,
      DRIVERRECBATCH.FUELCOST,
      driverrecbatch.NUMTOLLS,
      driverrecbatch.LOSTTIME,
      driverrecbatch.repairs
      from DRIVERRECBATCH
      where DRIVERRECBATCH.DDATE = :ipddate
        and DRIVERRECBATCH.DRIVERID = :ipdriverid
      rows 1
      into :opbatchid, :opcheqalloc, :opcashalloc,
           :oppaymid, /* will hold the versionno */
           :opstarttime,
           :opendtime,
           :optruckid,
           :opstartkms,
           :opendkms,
           :opfuelcost,
           :opnumtolls,
           :oplosttime,
           :oprepairs
      do SUSPEND;
  if (row_count = 1)
  then for select
       DRIVERRECLINE.JOBID,
       DRIVERRECLINE.DESPATCHDOCKET,
       DRIVERRECLINE.PAYMETHODID,
       DRIVERRECLINE.CHEQUEALLOC,
       DRIVERRECLINE.CASHALLOC,
       DRIVERRECLINE.DOBINNOS,
       DRIVERRECLINE.PUBINNOS,
       driverrecline.puweight,
       driverrecline.puvolume,
       driverrecline.siteid,
       driverrecline.priceareaid
       from DRIVERRECLINE
       where DRIVERRECLINE.BATCHID = :OPBATCHID
       into :opjobid,
            :opdd, :oppaymid, :opcheqalloc,
            :opcashalloc, :opdobinnos, :oppubinnos,
            :oppuweight,
            :oppuvolume,
            :opsiteid,
            :oppriceareaid
       do SUSPEND;
end^


ALTER PROCEDURE SPGET_DRIVERS
RETURNS (
    OPDRIVERID SMALLINT,
    OPSHORTNAME CHAR(8),
    OPFULLNAME CHAR(25),
    OPSTARTDATE DATE,
    OPFINISHDATE DATE,
    OPVERSIONNO INTEGER,
    OPMOBILE CHAR(20),
    OPJOBTYPEPRICES CHAR(150),
    OPCOPERCENT DECIMAL(6,2),
    OPADDJOBPERCENT DECIMAL(6,2),
    OPFLAGS INTEGER,
    OPLOGINNAME CHAR(50),
    OPPINCOLOUR VARCHAR(50))
AS
BEGIN
   for SELECT driverid, shortname, fullname,
              startdate, finishdate,
              versionno, mobile,
              jobtypeprices,
              copercent,
              addjobpercent,
              driver.flags,
              driver.bwdiloginname,
          driver.pincolour
FROM DRIVER
INTO :opdriverid,
     :opshortname, :opfullname,
     :opstartdate, :opfinishdate,
     :opversionno, :opmobile,
     :opjobtypeprices,
     :opcopercent, 
     :opaddjobpercent,
     :opflags,
     :oploginname,
     :oppincolour
do
  SUSPEND;
end^


ALTER PROCEDURE SPGET_EVENTTIME (
    IPEVENT CHAR(20) DEFAULT NULL)
RETURNS (
    OPTIMESTAMP TIMESTAMP,
    OPSERVERTIME TIMESTAMP)
AS
BEGIN
  select EVENTTIMES.EVENTTIME
     from EVENTTIMES
     where EVENTTIMES.EVENTNAME = :ipevent
     into :optimestamp;
  opservertime = current_timestamp;
  SUSPEND;
END^


ALTER PROCEDURE SPGET_EXTCOMMENTS (
    IPCOMMENTTYPE INTEGER,
    IPID INTEGER)
RETURNS (
    OPCOMMENTS CHAR(200))
AS
begin
  for select extcomment.comments
         from extcomment
         where extcomment.commenttype = :ipcommenttype
           and extcomment.id = :ipid
         into :opcomments
  do suspend;
end^


ALTER PROCEDURE SPGET_FEE (
    IPFEEID INTEGER DEFAULT NULL)
RETURNS (
    OPFEEID INTEGER,
    OPDESCRIPTION CHAR(20),
    OPAMOUNT DECIMAL(12,2),
    OPINCEX SMALLINT,
    OPACCOUNTNO CHAR(12),
    OPITEMCODE CHAR(12),
    OPVERSIONNO INTEGER)
AS
BEGIN
  for SELECT feeid, description, amount, incex,
          accountno, itemcode,
          versionno
FROM fee
where feeid = :ipfeeid
INTO :opfeeid,
     :opdescription,
     :opamount,
     :opincex,
     :opaccountno,
     :opitemcode,
     :opversionno
do SUSPEND;
END^


ALTER PROCEDURE SPGET_FEES
RETURNS (
    OPFEEID INTEGER,
    OPDESCRIPTION CHAR(20),
    OPAMOUNT DECIMAL(12,2),
    OPINCEX SMALLINT,
    OPACCOUNTNO CHAR(12),
    OPITEMCODE CHAR(12),
    OPVERSIONNO INTEGER)
AS
BEGIN
  for SELECT feeid, description, amount, incex,
          accountno, itemcode,
          versionno
FROM fee
INTO :opfeeid,
     :opdescription,
     :opamount,
     :opincex,
     :opaccountno,
     :opitemcode,
     :opversionno
do SUSPEND;
END^


ALTER PROCEDURE SPGET_FTBINSINOUT (
    IPSTARTDATE DATE DEFAULT NULL,
    IPENDDATE DATE DEFAULT NULL)
RETURNS (
    OPBINTYPEID INTEGER,
    OPBINSOUT INTEGER,
    OPBINSIN INTEGER)
AS
BEGIN
  /* this will get the movement ie since a stocktake */
  for select bintypeid from bintype into :opbintypeid
  do begin
    select count(bins_out)
       from job
       where job.bintypeid_out = :opbintypeid
         and job.jobdate >= :ipstartdate
         and job.jobdate <= :ipenddate
       into :opbinsout;
    select count(bins_in)
       from job
       where job.bintypeid_in = :opbintypeid
         and job.jobdate >= :ipstartdate
         and job.jobdate <= :ipenddate
       into :opbinsin;
       
    SUSPEND;  /* let them read the bintypeid, binsout, binsin */
  end
END^


ALTER PROCEDURE SPGET_FTBINSINOUT_DAILY (
    IPSTARTDATE DATE DEFAULT NULL,
    IPENDDATE DATE DEFAULT NULL)
RETURNS (
    OPBINTYPEID INTEGER,
    OPBINSOUT INTEGER,
    OPBINSIN INTEGER,
    OPDATE DATE)
AS
BEGIN
  /* this returns : bintypeid, binsout, binsin, date
   * suitable for bin position reports
   */
  /* this will get the movement ie since a stocktake */
  for select bintypeid from bintype into :opbintypeid
  do begin
    opdate = ipstartdate;
    while (opdate <= ipenddate) do begin
     select count(bins_out)
       from job
       where job.bintypeid_out = :opbintypeid
         and job.jobdate = :opdate
       into :opbinsout;
     select count(bins_in)
       from job
       where job.bintypeid_in = :opbintypeid
         and job.jobdate = :opdate
       into :opbinsin;
       
     SUSPEND;  /* let them read the bintypeid, binsout, binsin */

     opdate = opdate + 1;
    end
  end
END^


ALTER PROCEDURE SPGET_HOLIDAYS
RETURNS (
    DAYOFF DATE)
AS
begin
  for select holidays.closedon
        from holidays
        into :dayoff
  do suspend;
end^


ALTER PROCEDURE SPGET_HOURSWORKED (
    IPJOBID INTEGER)
RETURNS (
    OPHOURSWORKEDID INTEGER,
    OPJOBID INTEGER,
    OPWORKDATE DATE,
    OPSTARTTIME TIME,
    OPENDTIME TIME,
    OPNUMBEROFMEN INTEGER,
    OPJOBTITLEID INTEGER,
    OPFLAGS INTEGER,
    OPRATE DECIMAL(8,2))
AS
begin
  for select
         jobhoursworked.jobhoursworkedid,
         jobhoursworked.jobid,
         jobhoursworked.workdate,
         jobhoursworked.starttime,
         jobhoursworked.endtime,
         jobhoursworked.numberofmen,
         jobhoursworked.jobtitleid,
         jobhoursworked.flags,
         jobhoursworked.rate
         from jobhoursworked
         where jobhoursworked.jobid = :ipjobid
         into :ophoursworkedid,
              :opjobid,
              :opworkdate,
              :opstarttime,
              :opendtime,
              :opnumberofmen,
              :opjobtitleid,
              :opflags,
              :oprate
  do suspend;
end^


ALTER PROCEDURE SPGET_INCLUDEDWEIGHTS (
    IPPRICEAREAID INTEGER)
RETURNS (
    OPPRICEAREAID INTEGER,
    OPBINTYPEID INTEGER,
    OPINCLTONS DECIMAL(6,2),
    OPINCLVOLUME DECIMAL(6,2))
AS
begin
  for select includedweight.priceareaid,
    includedweight.bintypeid,
    includedweight.includedtons,
    includedweight.includedvolume
    from includedweight
    where includedweight.priceareaid = :ippriceareaid
    into :oppriceareaid,
        :opbintypeid,
        :opincltons,
        :opinclvolume
    do suspend;
end^


ALTER PROCEDURE SPGET_INVBATCH (
    IPINVBATCH INTEGER DEFAULT NULL)
RETURNS (
    OPINVBATCHNO INTEGER,
    OPCREATEDDATE TIMESTAMP,
    OPEXPORTEDDATE TIMESTAMP,
    OPEXPORTEDFILENAME CHAR(50),
    OPCOUNT SMALLINT,
    OPINVPERIOD INTEGER,
    OPVERSIONNO INTEGER,
    OPREFID INTEGER)
AS
BEGIN
for SELECT invbatchno, createddate,
          exporteddate, exportedfilename,
          exportedcount,
          invperiod,
          versionno,
          refid
FROM invoicebatch
where invbatchno = :ipinvbatch
INTO :opinvbatchno,
     :opcreateddate, :opexporteddate,
     :opexportedfilename, :opcount,
     :opinvperiod,
     :opversionno,
     :oprefid
do SUSPEND;
END^


ALTER PROCEDURE SPGET_INVBATCHS (
    IPWHICHBATCHES INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPINVBATCHNO INTEGER,
    OPCREATEDDATE TIMESTAMP,
    OPEXPORTEDDATE TIMESTAMP,
    OPEXPORTEDFILENAME CHAR(50),
    OPCOUNT SMALLINT,
    OPINVPERIOD INTEGER,
    OPVERSIONNO INTEGER,
    OPREFID INTEGER)
AS
BEGIN
if (ipwhichbatches = 0) then begin
  /* just return the top 100 */
for SELECT invbatchno, createddate,
          exporteddate, exportedfilename,
          exportedcount,
          invperiod,
          versionno,
          refid
FROM invoicebatch
order by invoicebatch.INVBATCHNO DESCENDING
rows 100  /* limit to the last 100 - should be enough ? */
INTO :opinvbatchno,
     :opcreateddate, :opexporteddate,
     :opexportedfilename, :opcount,
     :opinvperiod,
     :opversionno,
     :oprefid
do SUSPEND;
end

else if (ipwhichbatches = 5) then begin
  /* by date */
  for SELECT invbatchno, createddate,
          exporteddate, exportedfilename,
          exportedcount,
          invperiod,
          versionno,
          refid
    FROM invoicebatch
    where invoicebatch.createddate >= :ipfromdate
      and invoicebatch.createddate <= :iptodate
    INTO :opinvbatchno,
     :opcreateddate, :opexporteddate,
     :opexportedfilename, :opcount,
     :opinvperiod,
     :opversionno,
     :oprefid
    do SUSPEND;
end

end^


ALTER PROCEDURE SPGET_INVLINECOMMENT (
    IPJOBID INTEGER)
RETURNS (
    OPCOMMENT CHAR(201))
AS
begin
  for select invcomment.comment
        from invcomment
        where invcomment.jobid = :ipjobid
        into :opcomment
        do suspend;
end^


ALTER PROCEDURE SPGET_INVLINES (
    IPINVNO INTEGER = null)
RETURNS (
    OPINVNO INTEGER,
    OPINVLINENO INTEGER,
    OPEXGSTVALUE DECIMAL(18,2),
    OPGST DECIMAL(18,2),
    OPTOTALVALUE DECIMAL(18,2),
    OPLINETYPE INTEGER,
    OPITEMCODE CHAR(12),
    OPCOMMENTS CHAR(201))
AS
BEGIN
  for select invline.invno, invline.invlineno, exgstvalue, gst, totalvalue,
             linetype, itemcode, invcomment.comment
         from INVLINE
         left outer join invcomment on invline.invno = invcomment.invno
                                    and invline.invlineno = invcomment.invlineno
         where invline.invno = :ipinvno
         into :opinvno,
         :opinvlineno,
         :opexgstvalue,
         :opgst,
         :optotalvalue,
         :oplinetype,
         :opitemcode,
         :opcomments
  do SUSPEND;
end^


ALTER PROCEDURE SPGET_INVOICE (
    IPINVNO INTEGER DEFAULT NULL)
RETURNS (
    OPINVNO INTEGER,
    OPINVBATCHNO INTEGER,
    OPCUSTID INTEGER,
    OPCUSTNAME CHAR(50),
    OPINVDATE DATE,
    OPDUEDATE DATE,
    OPBILLADDRID INTEGER,
    OPEXGST DECIMAL(18,2),
    OPGST DECIMAL(18,2),
    OPTOTAL DECIMAL(18,2),
    OPINVCOMMENTS CHAR(200))
AS
BEGIN
for SELECT invno,
          invbatchid,
          invoice.custid, customer.name,
          invdate,
          duedate,
          billaddrid,
          invoice.comments
FROM invoice
left outer join customer on invoice.custid = customer.custid
where invoice.invno = :ipinvno
INTO :opinvno,
     :opinvbatchno, :opcustid,
     :opcustname, :opinvdate,
     :opduedate, :opbilladdrid,
     :opinvcomments
do BEGIN
  select sum(invline.exgstvalue),
         sum(invline.gst),
         sum(invline.totalvalue)
         from INVLINE
         where invline.invno = :ipinvno
         into opexgst, opgst, optotal;
  SUSPEND;
end
END^


ALTER PROCEDURE SPGET_INVSINBATCH (
    IPINVBATCHNO INTEGER DEFAULT NULL)
RETURNS (
    OPINVOICENO INTEGER)
AS
BEGIN
  for select invoice.INVNO
     from invoice
     where invoice.INVBATCHID = :ipinvbatchno
     into :opinvoiceno
     do suspend;
END^


ALTER PROCEDURE SPGET_INVSUMM (
    IPFROMDATE DATE DEFAULT NULL,
    IPTODATE DATE DEFAULT NULL)
RETURNS (
    OPCID CHAR(12),
    OPTOTALVALUE DECIMAL(18,2))
AS
DECLARE VARIABLE LINVNO INTEGER;
DECLARE VARIABLE LVALUE DECIMAL(18, 2);
DECLARE VARIABLE LGST DECIMAL(18, 2);
DECLARE VARIABLE LITEMCODE CHAR(12);
DECLARE VARIABLE LRPTID INTEGER;
BEGIN
  LRPTID = GEN_ID(TTSUMMGEN, 1);
 
  for select INVOICE.INVNO
          from INVOICE
          where INVOICE.INVDATE >= :ipfromdate
            and INVOICE.INVDATE <= :iptodate
          into :linvno
          do begin /* block 2 */
            for select INVLINE.ITEMCODE, invline.EXGSTVALUE,
                   INVLINE.GST
                   from INVLINE
                   where invline.INVNO = :linvno
                   into :litemcode, :lvalue, :lgst
            do begin /* block 1 */
            update TTSUMMARY set
               TTSUMMARY.totalvalue =
                  TTSUMMARY.totalvalue + :lvalue
                   where TTSUMMARY.RPTID = :lrptid
                     and TTSUMMARY.CHARID = :litemcode;
            if (row_count = 0) then
               insert into TTSUMMARY (rptid, charid, totalvalue)
                            values (:lrptid, :litemcode,
                                    :lvalue);
                                    
            /* now do GST */
            update TTSUMMARY set
               TTSUMMARY.totalvalue =
                  TTSUMMARY.totalvalue + :lgst
                   where TTSUMMARY.RPTID = :lrptid
                     and TTSUMMARY.CHARID = 'GST';
            if (row_count = 0) then
               insert into TTSUMMARY (rptid, charid, totalvalue)
                            values (:lrptid, 'GST',
                                    :lgst);
          end  /* block 1 */
            
  end /* block 2 */
            
  for select TTSUMMARY.charid,
             TTSUMMARY.TOTALVALUE
             from TTSUMMARY
             where TTSUMMARY.RPTID = :lrptid
             into :opcid,
                  :optotalvalue
             do SUSPEND;
             
  /* finally clear up our entries in the 'temp-table' */
  delete from TTSUMMARY
    where TTSUMMARY.RPTID = :lrptid;
END^


ALTER PROCEDURE SPGET_JOB (
    IPJOBID INTEGER)
RETURNS (
    OPORDERID INTEGER,
    OPJOBID INTEGER,
    OPJOBTYPE INTEGER,
    OPJOBSTATUS INTEGER,
    OPBINTYPEID_OUT INTEGER,
    OPBINS_OUT INTEGER,
    OPBINTYPEID_IN INTEGER,
    OPBINS_IN INTEGER,
    OPDRIVERID INTEGER,
    OPDRIVERSHORT CHAR(8),
    OPJOBTIME CHAR(10),
    OPCONTACT CHAR(30),
    OPCOMMENTS CHAR(200),
    OPNJOBTIME TIMESTAMP,
    OPPRICEAREAID INTEGER,
    OPCUSTREF CHAR(100),
    OPASBESTOS INTEGER,
    OPORDERDAYSEQNO INTEGER,
    OPDTENTERED TIMESTAMP,
    OPDTLASTAMENDED TIMESTAMP,
    OPVERSIONNO INTEGER,
    OPJOBDATE DATE,
    OPDRIVERFULL CHAR(25),
    OPPAYMETHODID INTEGER,
    OPPAYMETHODDESC CHAR(6),
    OPPRICE DECIMAL(18,2),
    OPJOBDETAILS SMALLINT,
    OPINVNO INTEGER,
    OPINVLINENO INTEGER,
    OPINVOICEABLE SMALLINT,
    OPINCEX INTEGER,
    OPDESPDOCK CHAR(12),
    OPVWJOBSEQNO INTEGER,
    OPBTRELOC INTEGER,
    OPRELOCCOUNT INTEGER,
    OPINVRELOCJOB INTEGER,
    OPPAYMREF CHAR(20),
    OPISPAID SMALLINT,
    OPMATERIALID INTEGER,
    OPUSERID INTEGER,
    OPTELEPHONE CHAR(30),
    OPPRIORITYLEVEL SMALLINT,
    OPRGWEIGHT DECIMAL(6,2),
    OPRGID INTEGER,
    OPSITEBINS INTEGER)
AS
BEGIN
   for SELECT job.orderid,
    jobid,
    jobtype,
    
    bintypeid_out,
    bins_out,
    
    bintypeid_in,
    bins_in,
  
     job.driverid,
     driver.SHORTNAME,
     
     jobtime,
     
     job.contact,
     job.comments,
     
     jobstatus,
     njobtime,
     priceareaid,
     custreference,
     asbestosbins,
     orderdayseqno,
     dtentered,
     dtlastamended,
     job.versionno,
     jobdate,
     driver.FULLNAME,
     job.paymethodid,
     paymethod.DESCRIPTION,
     job.extaxprice,
     job.JOBDETAILSDONE,
     job.invno,
     job.invlineno,
     job.invoiceable,
     job.INCEX,
     job.DESPATCHDOCKET,
     job.VWJOBSEQNO,
     job.BINTYPERELOCATE,
     job.BINS_RELOCATE,
     job.INVOICERELOCATE,
     job.PAYMREFERENCE,
     job.ISPAID,
     job.MATERIALID,
     job.userid,
     job.telephone,
     job.prioritylevel,
     job.rgweight, 
     job.rgid,
     job.sitebins
FROM job
  left outer join driver on job.driverid = driver.driverid
  left outer join paymethod on JOB.paymethodid = paymethod.PAYMETHODID
where jobid = :ipjobid
INTO :oporderid,
     :opjobid,
     :opjobtype,
     :opbintypeid_out,
     :opbins_out,
     :opbintypeid_in,
     :opbins_in,
     :opdriverid,
     :opdrivershort,
     :opjobtime,
     :opcontact,
     :opcomments,
     :opjobstatus,
     :opnjobtime,
     :oppriceareaid,
     :opcustref,
     :opasbestos,
     :oporderdayseqno,
     :opdtentered,
     :opdtlastamended,
     :opversionno,
     :opjobdate,
     :opdriverfull,
     :oppaymethodid,
     :oppaymethoddesc,
     :opprice,
     :opjobdetails,
     :opinvno,
     :opinvlineno,
     :opinvoiceable,
     :opincex,
     :opdespdock,
     :opvwjobseqno,
     :opbtreloc,
     :opreloccount,
     :opinvrelocjob,
     :oppaymref,
     :opispaid,
     :opmaterialid,
     :opuserid,
     :optelephone,
     :opprioritylevel,
     :oprgweight,
     :oprgid,
     :opsitebins
do
  SUSPEND;
END^


ALTER PROCEDURE SPGET_JOB2 (
    IPJOBID INTEGER)
RETURNS (
    OPJOBID INTEGER,
    OPPINVNO INTEGER,
    OPPUINVLINENO INTEGER,
    OPPUINVOICEABLE INTEGER,
    OPSITEID INTEGER,
    OPINVOICEDWEIGHT DECIMAL(5,3),
    OPINVOICEDPRICE DECIMAL(5,3),
    OPIDESPATCHDOCKETNO INTEGER,
    OPPRICEAREAID INTEGER,
    OPSIGNEDBY CHAR(50),
    OPTIMESIGNED TIMESTAMP,
    OPPHOTOLAT DECIMAL(11,6),
    OPPHOTOLONG DECIMAL(11,6),
    OPPHOTOTIME TIMESTAMP)
AS
begin
  for select job2.jobid,
        job2.puinvno,
        job2.puinvlineno,
        job2.puinvoiceable,
        job2.siteid,
        job2.invoicedpuweight,
        job2.invoicedprice,
        job2.idespatchdocketno,
        job2.priceareaid,
        job2.personwhosigned,
        job2.timesigned,
        job2.photolatitude,
        job2.photolongitude,
        job2.phototime
      from job2
      where job2.jobid = :ipjobid
      into :opjobid,
            :oppinvno,
            :oppuinvlineno,
            :oppuinvoiceable,
            :opsiteid,
            :opinvoicedweight,
            :opinvoicedprice,
            :opidespatchdocketno,
            :oppriceareaid,
            :opsignedby,
            :optimesigned,
            :opphotolat,
            :opphotolong,
            :opphototime
  do suspend;

end^


ALTER PROCEDURE SPGET_JOBBINNOS (
    IPJOBID INTEGER DEFAULT NULL,
    IPDIRECTION INTEGER DEFAULT NULL)
RETURNS (
    OPBINNO CHAR(8))
AS
BEGIN
  for select cbinno from JOBBINS
   where jobid = :ipjobid
    and direction = :ipdirection
   into :opbinno
   do
     SUSPEND;
END^


ALTER PROCEDURE SPGET_JOBDETAILS (
    IPJOBID INTEGER DEFAULT NULL)
RETURNS (
    OPDESPATCHDOCKET CHAR(12),
    OPTOSITEID INTEGER,
    OPEPA CHAR(12),
    OPWTD CHAR(12),
    OPFROMSITEID INTEGER)
AS
BEGIN
   for SELECT job.despatchdocket,
    job.tositeid,
    job.epa,
    job.wtd,
    job.FROMSITEID
FROM job
where job.jobid = :ipjobid
INTO :opdespatchdocket,
     :optositeid,
     :opepa,
     :opwtd,
     :opfromsiteid
do
  SUSPEND;
END^


ALTER PROCEDURE SPGET_JOBFEEBYINV (
    IPINVNO INTEGER DEFAULT NULL,
    IPINVLINENO INTEGER DEFAULT NULL)
RETURNS (
    OPFEEID INTEGER,
    OPAMOUNT DECIMAL(12,2),
    OPINCEX SMALLINT,
    OPINVLINENO INTEGER,
    OPINVNO INTEGER)
AS
BEGIN
  for SELECT jobfee.feeid,
             jobfee.amount, jobfee.incex,
             jobfee.INVLINE, jobfee.INVNO
FROM jobfee
where jobfee.INVNO = :ipinvno
  and jobfee.INVLINE = :ipinvlineno
INTO :opfeeid,
     :opamount,
     :opincex,
     :opinvlineno,
     :opinvno
do SUSPEND;
END^


ALTER PROCEDURE SPGET_JOBFEES (
    IPJOBID INTEGER DEFAULT NULL)
RETURNS (
    OPFEEID INTEGER,
    OPAMOUNT DECIMAL(12,2),
    OPINCEX SMALLINT,
    OPINVLINENO INTEGER,
    OPINVNO INTEGER)
AS
BEGIN
  for SELECT jobfee.feeid,
             jobfee.amount, jobfee.incex,
             jobfee.INVLINE, jobfee.INVNO
FROM jobfee
where jobfee.jobid = :ipjobid
INTO :opfeeid,
     :opamount,
     :opincex,
     :opinvlineno,
     :opinvno
do SUSPEND;
END^


ALTER PROCEDURE SPGET_JOBIDBYINV (
    IPINVNO INTEGER = null,
    IPINVLINENO INTEGER = null)
RETURNS (
    OPJOBID INTEGER)
AS
declare variable lfoundone integer;
BEGIN
  lfoundone = 0;
  for select job.JOBID
      from job
      where job.invoiceable = 1  /* just so it uses the index */
        and job.INVNO = :ipinvno
        and job.INVLINENO = :ipinvlineno
      into opjobid
  do begin
    suspend;
    lfoundone = 1;
  end

  if (lfoundone = 0) then begin
    for select job.JOBID
      from job
      where job.invoiceable = 2  /* just so it uses the index */
        and job.INVNO = :ipinvno
        and job.INVLINENO = :ipinvlineno
      into opjobid
      do begin
        suspend;
        lfoundone = 1;
      end

    if (lfoundone = 0) then begin
      /* this is purely for the invoice at delivery then by weight at pick up type which leaves
       * the pick up job as invoiceable = 0 :-(
       */
      for select job.JOBID
       from job
       where job.invoiceable = 0  /* just so it uses the index */
         and job.INVNO = :ipinvno
         and job.INVLINENO = :ipinvlineno
       into opjobid
       do begin
         suspend;
         /* lfoundone = 1; */
       end
     end
  end
end^


ALTER PROCEDURE SPGET_JOBIDBYINV2 (
    IPINVNO INTEGER,
    IPINVLINENO INTEGER)
RETURNS (
    OPJOBID INTEGER)
AS
begin
  for select job2.JOBID
      from job2
      where
            job2.PUINVNO = :ipinvno
        and job2.PUINVLINENO = :ipinvlineno
      into opjobid
  do SUSPEND;
end^


ALTER PROCEDURE SPGET_JOBRMBREAKDOWN (
    IPJOBID INTEGER)
RETURNS (
    OPJOBID INTEGER,
    OPRGID INTEGER,
    OPRGDESCRIPTION CHAR(40),
    OPPERCENT INTEGER)
AS
begin
  for select jobrmbreakdown.jobid,
             rmgroup.rmgroupid,
             rmgroup.description,
             jobrmbreakdown.percent
       from jobrmbreakdown
       left outer join rmgroup on jobrmbreakdown.rmgroupid = rmgroup.rmgroupid
       where jobrmbreakdown.jobid = :ipjobid
       into :opjobid,
            :oprgid,
            :oprgdescription,
            :oppercent
  do suspend;
end^


ALTER PROCEDURE SPGET_JOBSWCODES (
    IPJOBID INTEGER)
RETURNS (
    OPJOBSWCODEID INTEGER,
    OPJOBID INTEGER,
    OPSWCODESID INTEGER,
    OPUNITS DECIMAL(15,2),
    OPFLAGS INTEGER)
AS
begin
  for select jobswcode.jobswcodeid,
        jobswcode.jobid,
        jobswcode.swcodesid,
        jobswcode.units,
        jobswcode.flags
      from jobswcode
      where jobswcode.jobid = :ipjobid
      into :opjobswcodeid,
           :opjobid,
           :opswcodesid,
           :opunits,
           :opflags
  do suspend;
end^


ALTER PROCEDURE SPGET_JOBTIPDOCKETS (
    IPJOBID INTEGER)
RETURNS (
    OPTIPDOCKETID INTEGER,
    OPTIPDOCKETNO INTEGER,
    OPCTIPDOCKETNO CHAR(15),
    OPJOBID INTEGER,
    OPTIPSITEID INTEGER,
    OPTIPDATE DATE,
    OPM3TIPPED DECIMAL(8,2),
    OPWEIGHTTIPPED DECIMAL(8,2),
    OPRATE DECIMAL(8,2),
    OPFLAGS INTEGER,
    OPMATERIALID INTEGER)
AS
begin
  for select
         jobtipdocket.tipdocketid,
         jobtipdocket.tipdocketno,
         jobtipdocket.ctipdocketno,
         jobtipdocket.jobid,
         jobtipdocket.tipsiteid,
         jobtipdocket.tipdate,
         jobtipdocket.m3tipped,
         jobtipdocket.weighttipped,
         jobtipdocket.rate,
         jobtipdocket.flags,
         jobtipdocket.materialid
         from jobtipdocket
         where jobtipdocket.jobid = :ipjobid
         into :optipdocketid,
              :optipdocketno,
              :opctipdocketno,
              :opjobid,
              :optipsiteid,
              :optipdate,
              :opm3tipped,
              :opweighttipped,
              :oprate,
              :opflags,
              :opmaterialid
  do suspend;
end^


ALTER PROCEDURE SPGET_LASTADDRS (
    IPCUSTID INTEGER)
RETURNS (
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10))
AS
BEGIN
  for select address.addrid,
         address.STREETNUMBER,
         address.address1,
         address.address2,
         ADDRESS.TOWN,
         ADDRESS.STATE,
         ADDRESS.POSTCODE
     FROM sorder
  left outer join address on sorder.DELADDRID = address.addrid
  where sorder.CUSTID = :ipcustid
  order by sorder.ORDERID desc
  rows 5
  INTO :opaddrid,
       :opstreetnumber,
       :opaddress1,
       :opaddress2,
       :optown,
       :opstate,
       :oppostcode
do SUSPEND;
END^


ALTER PROCEDURE SPGET_LASTTRUCK (
    IPDDATE DATE DEFAULT NULL,
    IPDRIVERID INTEGER DEFAULT NULL)
RETURNS (
    OPTRUCKID SMALLINT)
AS
DECLARE VARIABLE LCNT SMALLINT;
BEGIN
  /* go back over the last few days to try and find the last TRUCK
   * that this guy was in
   */
  LCNT = 7;
L1:
WHILE (LCNT >= 0) DO
   BEGIN
     select DRIVERRECBATCH.TRUCKID
            from DRIVERRECBATCH
            where DRIVERRECBATCH.ddate = :ipddate
              and DRIVERRECBATCH.DRIVERID = :ipdriverid
              rows 1
              into :optruckid;
     if (row_count = 1) then leave L1;
     ipddate = ipddate - 1;
     LCNT = LCNT - 1;
   END
  SUSPEND;
END^


ALTER PROCEDURE SPGET_LOGINCHECK (
    IPUSERNAME CHAR(50) DEFAULT NULL,
    IPENCPASSWD CHAR(60) DEFAULT NULL)
RETURNS (
    OPSTATUS SMALLINT,
    OPUSERID INTEGER)
AS
DECLARE VARIABLE LENCPASSWD CHAR(60);
BEGIN
  select BWUSER.USERID, BWUSER.ENCPASSWORD
         from BWUSER
         where bwuser.LCUSERNAME = lower(:ipusername)
           and BWUSER.ISACTIVE = 1
         into :opuserid, :lencpasswd;
  if (opuserid is null)
  then opstatus = 1; /* unknown user */
  else if (lencpasswd != ipencpasswd)
  then opstatus = 2;
  else opstatus = 0; /* all ok */
  
  SUSPEND;
END^


ALTER PROCEDURE SPGET_MAP
RETURNS (
    OPID INTEGER,
    OPMAPFILE CHAR(80) CHARACTER SET ASCII,
    OPCURRENT INTEGER,
    OPTOPLEFTLAT BIGINT,
    OPTOPLEFTLONG BIGINT,
    OPBOTTOMRIGHTLAT BIGINT,
    OPBOTTOMRIGHTLONG BIGINT)
AS
BEGIN
  select map.id,
         map.MAPFILE,
         map.CURRENTMAP,
         map.TOPLEFT_LATITUDE,
         map.TOPLEFT_LONGITUDE,
         map.BOTTOMRIGHT_LATITIUDE,
         map.BOTTOMRIGHT_LONGITUDE
         from map
         where map.CURRENTMAP = 1
         into :opid,
          :opmapfile,
          :opcurrent,
          :optopleftlat,
          :optopleftlong,
          :opbottomrightlat,
          :opbottomrightlong;
  SUSPEND;
END^


ALTER PROCEDURE SPGET_MATCHADDRS (
    IPSTREETNUMBER CHAR(10),
    IPSTREETNAME CHAR(30),
    IPSUBURB CHAR(30))
RETURNS (
    OPORDERID INTEGER)
AS
declare variable lcstreet char(30);
declare variable lcstreetdesignator char(1);
declare variable lcsuburb char(30);
declare variable lpos integer;
declare variable lcstreetnumber char(10);
begin
  /* get any matching entries from addrfind, find their associated job and return
   * all the details
   */

   /* these next two blocks are copied from spsave_addrfind so any changes made to
    * these two blocks should be reflected in there as well
    */
  lcsuburb = lower(ipsuburb);
  lcstreetdesignator = '';
  lcstreetnumber = lower(ipstreetnumber);

  execute procedure pos (' ', ipstreetname) returning_values :lpos;
  if (lpos > 0) then begin
    lcstreet = lower(substring(ipstreetname from 1 for lpos - 1));
    if (char_length(trim(ipstreetname)) > lpos + 1)
    then lcstreetdesignator = lower(substring(ipstreetname from lpos + 1 for 1));
  end
  else lcstreet = lower(ipstreetname);

  for select addrfind.orderid
       from addrfind
      where addrfind.lcsuburb = :lcsuburb
        and addrfind.lcstreetname = :lcstreet
        and addrfind.lcstreetnumber = :ipstreetnumber
       into :oporderid
   do suspend;
end^


ALTER PROCEDURE SPGET_MATCHCUSTS (
    IPTEXT VARCHAR(50) = null,
    IPROWS INTEGER = null,
    IPWHATTYPE INTEGER = null)
RETURNS (
    OPNAME VARCHAR(50))
AS
declare variable srchfor varchar(50);
declare variable lmodules integer;
declare variable lcusttype integer;
BEGIN
  SRCHFOR = lower(:iptext);
  for select customer.name, customer.customermodules, customer.custtype
      FROM customer
  where customer.lcname starting with :SRCHFOR
    and customer.isactive = 1 /* for this help thing we ignore inactive custs */
    and customer.iscustomer = 1
  rows :iprows + 1
  INTO :opname, :lmodules, :lcusttype
do
    if (ipwhattype = 1 or  /* all customers */

      (ipwhattype = 3 and  /* skip customers */
        (lmodules = 1 or lmodules = 3)) or

      (ipwhattype = 2 and   /* just tip customers */
        (lmodules = 2 or lmodules = 3)) or

      (ipwhattype = 4 and /* just account customers */
        (lcusttype = 1 or lcusttype = 2)) or

      (ipwhattype = 5 and /* just cash customers */
        lcusttype = 0)
    )
    then SUSPEND;
END^


ALTER PROCEDURE SPGET_MATCHSTREETS (
    IPLOOKFOR VARCHAR(45),
    IPROWS INTEGER,
    IPSTATE VARCHAR(30))
RETURNS (
    OPSTREETID INTEGER,
    OPSTREETNAME CHAR(45),
    OPDESIGNATOR CHAR(3),
    OPMAPREF CHAR(5),
    OPPAGENUMBER INTEGER,
    OPNAME CHAR(40),
    OPPOSTCODE CHAR(10),
    OPSTATE CHAR(30),
    OPLONG BIGINT,
    OPLAT BIGINT,
    OPSUBURBID INTEGER,
    OPFIREANTAREA INTEGER)
AS
declare variable lcount integer;
begin
  for select count(streets.streetid)
      FROM streets
       left outer join suburbs on streets.suburbid = SUBURBS.suburbid
      where streets.lcstreetname starting :IPLOOKFOR
        and suburbs.state = :ipstate
      into :lcount
  do if (lcount < iprows and lcount != 0)
  then begin

    for select streets.streetid, streets.streetname, streets.designator,
               streets.mapreference, streets.pagenumber,
               SUBURBS.SUBURBNAME, SUBURBS.POSTCODE, SUBURBS.STATE,
               SUBURBS.LONGITUDE, SUBURBS.LATITUDE, suburbs.SUBURBID,
               suburbs.fireantarea
      FROM streets
       left outer join suburbs on streets.suburbid = SUBURBS.suburbid
     where streets.lcstreetname starting :IPLOOKFOR
       and suburbs.state = :ipstate
     rows :iprows + 1
     INTO :opstreetid, :opstreetname, :opdesignator,
          :opmapref, :oppagenumber,
          :opname, :oppostcode, :opstate,
          :oplong, :oplat, :opsuburbid, :opfireantarea
    do SUSPEND;

  end /* of > 0 < max rows asked for */

end^


ALTER PROCEDURE SPGET_MATCHSUBS (
    IPTEXT VARCHAR(40) CHARACTER SET ASCII,
    IPROWS INTEGER,
    IPSTATE VARCHAR(30) CHARACTER SET ASCII)
RETURNS (
    OPNAME VARCHAR(40),
    OPPOSTCODE VARCHAR(5),
    OPSTATE VARCHAR(30),
    OPLONG BIGINT,
    OPLAT BIGINT,
    OPSUBURBID INTEGER,
    OPFIREANTAREA INTEGER)
AS
BEGIN

  for select SUBURBS.SUBURBNAME, SUBURBS.POSTCODE, SUBURBS.STATE,
             SUBURBS.LONGITUDE, SUBURBS.LATITUDE, suburbs.SUBURBID,
             suburbs.fireantarea
      FROM SUBURBS
  where SUBURBS.STATE = :ipstate
    and SUBURBS.lcname starting :iptext
  rows :iprows + 1
  INTO :opname, :oppostcode, :opstate,
       :oplong, :oplat, :opsuburbid,
       :opfireantarea
  do SUSPEND;

  /*
  for select SUBURBS.POSTCODE
     from SUBURBS
    where SUBURBS.SUBURBNAME = 'TANAH MERAH'
    into :opname
    do SUSPEND;
    */
end^


ALTER PROCEDURE SPGET_MATCHSUPPS (
    IPTEXT VARCHAR(50) = null,
    IPROWS INTEGER = null,
    IPWHATTYPE INTEGER = null)
RETURNS (
    OPNAME VARCHAR(50))
AS
declare variable srchfor varchar(50);
declare variable lmodules integer;
declare variable lcusttype integer;
BEGIN
  SRCHFOR = lower(:iptext);
  for select customer.name, customer.customermodules, customer.custtype
      FROM customer
  where customer.lcname starting with :SRCHFOR
    and customer.isactive = 1 /* for this help thing we ignore inactive custs */
    and customer.issupplier = 1
  rows :iprows + 1
  INTO :opname, :lmodules, :lcusttype
do
    if (ipwhattype = 1 or  /* all customers */

      (ipwhattype = 4 and /* just account customers */
        (lcusttype = 1 or lcusttype = 2)) or

      (ipwhattype = 5 and /* just cash customers */
        lcusttype = 0)
    )
    then SUSPEND;
END^


ALTER PROCEDURE SPGET_MATERIALPRICES (
    IPTIPSITEID INTEGER,
    IPCUSTID INTEGER)
RETURNS (
    OPTIPSITEID INTEGER,
    OPCUSTID INTEGER,
    OPMATERIALID INTEGER,
    OPDELIVEREDPRICE DECIMAL(15,2),
    OPPICKUPPRICE DECIMAL(15,2))
AS
begin
  for select materialprices.tipsiteid,
    materialprices.custid,
    materialprices.materialid,
    materialprices.deliveredprice,
    materialprices.pickupprice
    from materialprices
    where materialprices.tipsiteid = :iptipsiteid
      and materialprices.custid = :ipcustid
    into :optipsiteid,
         :opcustid,
         :opmaterialid,
         :opdeliveredprice,
         :oppickupprice
  do suspend;
end^


ALTER PROCEDURE SPGET_MATERIALS
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(40),
    OPPERTON DECIMAL(9,2),
    OPPERCUBIC DECIMAL(9,2),
    OPACCOUNTNO CHAR(25),
    OPITEMCODE CHAR(12),
    OPWASTECATEGORYID INTEGER,
    OPFLAGS INTEGER,
    OPMINWEIGHT DECIMAL(6,2),
    OPMINWEIGHTFEE DECIMAL(6,2))
AS
BEGIN
  for select MATERIAL.ID,
             MATERIAL.DESCRIPTION,
             MATERIAL.PRICEPERTON,
             MATERIAL.PRICEPERCUBICMETRE,
             MATERIAL.ACCOUNTNO,
             MATERIAL.ITEMCODE,
             material.wastecategoryid,
             material.flags,
             material.minimumweight,
             material.minimumweightfee
          from MATERIAL
          into :opid,
               :opdescription,
               :opperton,
               :oppercubic,
               :opaccountno,
               :opitemcode,
               :opwastecategoryid,
               :opflags,
               :opminweight,
               :opminweightfee
  do SUSPEND;
end^


ALTER PROCEDURE SPGET_MATERIALSUMM (
    IPFROMDATE DATE DEFAULT NULL,
    IPTODATE DATE DEFAULT NULL,
    IPINCLUDEALL SMALLINT DEFAULT NULL)
RETURNS (
    OPMATERIALID INTEGER,
    OPBINCOUNT INTEGER,
    OPCUBICMETRES DECIMAL(18,1))
AS
DECLARE VARIABLE LMATERIALID INTEGER;
DECLARE VARIABLE LBINCOUNT INTEGER;
DECLARE VARIABLE LRPTID INTEGER;
DECLARE VARIABLE LSTATUS SMALLINT;
BEGIN
       
  LRPTID = GEN_ID(TTSUMMGEN, 1);
  /* if (ipsummtype == ?? */
  for select job.materialid, job.BINS_IN,
             BINTYPE.DCUBICMETRES, job.JOBSTATUS
          from JOB
          left outer join BINTYPE
           on job.BINTYPEID_IN = BINTYPE.BINTYPEID
          where job.jobdate >= :ipfromdate
            and job.jobdate <= :iptodate
            and job.bins_in > 0
            and job.materialid > 0
          into
               :lmaterialid,
               :lbincount,
               :opcubicmetres,
               :lstatus
          do begin
            /* either include all or the job's status must be 'Done' */
            if (ipincludeall = 1 or lstatus = 3)
            then begin
              update TTSUMMARY set
                                 numpickups = numpickups + :lbincount,
                                 dcubicmetres = dcubicmetres + (:lbincount * :opcubicmetres)
                             where TTSUMMARY.RPTID = :lrptid
                               and TTSUMMARY.ID = :lmaterialid
                               and TTSUMMARY.CHARID = '';
              if (row_count = 0) then
               insert into TTSUMMARY (rptid, id, charid,
                                      numpickups,
                                      dcubicmetres)
                            values (:lrptid, :lmaterialid,
                                    '',
                                    :lbincount,
                                    (:lbincount * :opcubicmetres));
            end
          end

  for select TTSUMMARY.id,
             TTSUMMARY.NUMPICKUPS,
             TTSUMMARY.DCUBICMETRES
             from TTSUMMARY
             where TTSUMMARY.RPTID = :lrptid
             into :opmaterialid,
                  :opbincount,
                  :opcubicmetres
             do SUSPEND;

  /* finally clear up our entries in the 'temp-table' */
  delete from TTSUMMARY
    where TTSUMMARY.RPTID = :lrptid;

END^


ALTER PROCEDURE SPGET_MLIST (
    IPMLISTID INTEGER)
RETURNS (
    OPID INTEGER,
    OPLISTID INTEGER,
    OPDESC CHAR(50),
    OPDESC2 CHAR(50),
    OPDESC3 CHAR(30))
AS
begin
  for select mlist.id,
         mlist.listid,
         mlist.description,
         mlist.desc2,
         mlist.desc3
     from mlist
     where mlist.listid = :ipmlistid
     into :opid,
          :oplistid,
          :opdesc,
          :opdesc2,
          :opdesc3
   do suspend;
end^


ALTER PROCEDURE SPGET_MODULESETTINGS (
    IPMODULE INTEGER)
RETURNS (
    OPSETTINGS BIGINT)
AS
begin
  opsettings = 0;
  for select modulesettings.settings
    from modulesettings
    where modulesettings.module = :ipmodule
    into :opsettings
  do suspend;
end^


ALTER PROCEDURE SPGET_MONEYCOLLECTEDDAYWEB (
    IPFORDATE DATE,
    IPDRIVERID INTEGER)
RETURNS (
    OPJOBID INTEGER,
    OPPAYMETHODID1 INTEGER,
    OPAMOUNT1 DECIMAL(15,2),
    OPPAYMETHODID2 INTEGER,
    OPAMOUNT2 INTEGER,
    OPDDEMAILADDR CHAR(60),
    OPDDATE DATE,
    OPDRIVERID INTEGER)
AS
begin
  for select jobmoneypaid.jobid,
         jobmoneypaid.paymethodid1,
         jobmoneypaid.amount1,
         jobmoneypaid.paymethodid2,
         jobmoneypaid.amount2,
         jobmoneypaid.emailaddress,
         jobmoneypaid.ddate,
         jobmoneypaid.driverid
         from jobmoneypaid
         where jobmoneypaid.ddate = :ipfordate
           and jobmoneypaid.driverid = :ipdriverid
         into :opjobid,
              :oppaymethodid1,
              :opamount1,
              :oppaymethodid2,
              :opamount2,
              :opddemailaddr,
              :opddate,
              :opdriverid
  do suspend;
end^


ALTER PROCEDURE SPGET_MONEYCOLLECTEDWEB (
    IPJOBID INTEGER)
RETURNS (
    OPJOBID INTEGER,
    OPPAYMETHODID1 INTEGER,
    OPAMOUNT1 DECIMAL(15,2),
    OPPAYMETHODID2 INTEGER,
    OPAMOUNT2 INTEGER,
    OPDDEMAILADDR CHAR(60),
    OPDDATE DATE,
    OPDRIVERID INTEGER)
AS
begin
  for select jobmoneypaid.jobid,
         jobmoneypaid.paymethodid1,
         jobmoneypaid.amount1,
         jobmoneypaid.paymethodid2,
         jobmoneypaid.amount2,
         jobmoneypaid.emailaddress,
         jobmoneypaid.ddate,
         jobmoneypaid.driverid
         from jobmoneypaid
         where jobmoneypaid.jobid = :ipjobid
         into :opjobid,
              :oppaymethodid1,
              :opamount1,
              :oppaymethodid2,
              :opamount2,
              :opddemailaddr,
              :opddate,
              :opdriverid
  do suspend;
end^


ALTER PROCEDURE SPGET_MORECOMMENTS (
    IPMORECOMMENTSID INTEGER)
RETURNS (
    OPCOMMENTS CHAR(2000))
AS
begin
  for select crmmorecomments.comments
        from crmmorecomments
        where crmmorecomments.morecommentsid = :ipmorecommentsid
        into :opcomments
  do suspend;
end^


ALTER PROCEDURE SPGET_MULTIDAYRUNSHEETJOBS (
    IPRUNSHEETID INTEGER)
RETURNS (
    OPID INTEGER,
    OPRUNSHEETID INTEGER,
    OPSORTORDER INTEGER,
    OPJOBID INTEGER)
AS
BEGIN
  for select id, runsheetid, sortorder, jobid
      from multidayrunsheetjobs
      where runsheetid = :iprunsheetid
      into :opid, :oprunsheetid, :opsortorder, :opjobid
  do suspend;
END^


ALTER PROCEDURE SPGET_MULTIDAYRUNSHEETS
RETURNS (
    OPID INTEGER,
    OPCREATEDON DATE,
    OPRUNNAME CHAR(50),
    OPDRIVERID INTEGER,
    OPFLAGS INTEGER,
    OPACTIVE INTEGER)
AS
BEGIN
  for select id, createdon, runname, driverid, flags, active
      from multidayrunsheets
      where active = 1
      into :opid, :opcreatedon, :oprunname, :opdriverid, :opflags, :opactive
  do suspend;
END^


ALTER PROCEDURE SPGET_NEWSCRAPLOADID (
    IPHOWMANY INTEGER)
RETURNS (
    OPSTARTID INTEGER)
AS
begin
  /* note that asking for 4 ids when then current number is 172 will leave
   * the generator at 176 as expected but will actually return 176,
   * ie it will return the highest number, not the starting one
   */
  opstartid = gen_id(genscraploadid, iphowmany);
  suspend;
end^


ALTER PROCEDURE SPGET_NEXTCREDITNO
RETURNS (
    OPCREDITNO INTEGER)
AS
begin
  SELECT GEN_ID( gencreditno, 1 )
         FROM RDB$DATABASE
         into :OPCREDITNO;
  SUSPEND;
end^


ALTER PROCEDURE SPGET_NEXTDDNO
RETURNS (
    OPDDNO INTEGER)
AS
begin
  SELECT GEN_ID( GENAUTODDNO, 1 )
         FROM RDB$DATABASE
         into :OPDDNO;
  SUSPEND;
end^


ALTER PROCEDURE SPGET_NEXTOUTGOINGDKTNO
RETURNS (
    OPDDNO INTEGER)
AS
begin
  SELECT GEN_ID( genoutgoingdktno, 1 )
         FROM RDB$DATABASE
         into :OPDDNO;
  SUSPEND;
end^


ALTER PROCEDURE SPGET_NEXTSCRAPDDNO
RETURNS (
    OPDDNO INTEGER)
AS
begin
  SELECT GEN_ID( genscrapddno, 1 )
         FROM RDB$DATABASE
         into :OPDDNO;
  SUSPEND;
end^


ALTER PROCEDURE SPGET_NOORDERFROMTO (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPID INTEGER,
    OPDDATE DATE,
    OPTTIME TIMESTAMP,
    OPUSERID INTEGER,
    OPREASONID INTEGER,
    OPREASONTEXT CHAR(50),
    OPREFERRALID INTEGER,
    OPSUBURB CHAR(50),
    OPNOORDTYPE INTEGER,
    OPCOMMENTS CHAR(100),
    OPPRICEQUOTED DECIMAL(15,2),
    OPBINTYPEID INTEGER,
    OPPRICEAREAID INTEGER,
    OPBINCOUNT INTEGER,
    OPFLAGS INTEGER)
AS
begin
  for select noorder.id,
        noorder.ddate,
        noorder.ttime,
        noorder.userid,
        noorder.reasonid,
        noorder.reasontext,
        noorder.referralid,
        noorder.suburb,
        noorder.noordtype,
        noorder.comments,
        noorder.pricequoted,
        noorder.bintypeid,
        noorder.priceareaid,
        noorder.bincount,
        noorder.flags
    from noorder
    where noorder.ddate >= :ipfromdate
      and noorder.ddate <= :iptodate
     into :opid,
          :opddate,
          :opttime,
          :opuserid,
          :opreasonid,
          :opreasontext,
          :opreferralid,
          :opsuburb,
          :opnoordtype,
          :opcomments,
          :oppricequoted,
          :opbintypeid,
          :oppriceareaid,
          :opbincount,
          :opflags
    do suspend;
end^


ALTER PROCEDURE SPGET_OPENORDERS
RETURNS (
    OPORDERID INTEGER,
    OPCUSTID INTEGER,
    OPCUSTNAME CHAR(50),
    OPCONTACT CHAR(30),
    OPCOMPLETE INTEGER,
    OPINVTYPE INTEGER,
    OPBYBINNO INTEGER,
    DELADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPDELADDRESS1 CHAR(30),
    OPDELADDRESS2 CHAR(30),
    OPDELTOWN CHAR(30),
    OPDELSTATE CHAR(30),
    OPDELPOSTCODE CHAR(10),
    OPGPSLAT NUMERIC(18,12),
    OPGPSLONG NUMERIC(18,12),
    OPBILLADDRID INTEGER,
    OPBILLADDRESS1 CHAR(30),
    OPBILLADDRESS2 CHAR(30),
    OPBILLTOWN CHAR(30),
    OPBILLSTATE CHAR(30),
    OPBILLPOSTCODE CHAR(10),
    OPBILLGPSLAT NUMERIC(18,12),
    OPBILLGPSLONG NUMERIC(18,12),
    OPVERSIONNO INTEGER,
    OPCUSTTELNO VARCHAR(14),
    OPCUSTTYPE INTEGER,
    OPREFERRALID INTEGER,
    OPFIRSTJOB DATE,
    OPUSERID INTEGER,
    OPCUSTSITEID INTEGER,
    OPJOBNO INTEGER)
AS
BEGIN
for SELECT orderid, sorder.custid, customer.NAME, sorder.contact, complete,
       invtype, bybinno,
       deladdrid, address.streetnumber, address.address1, address.address2, address.town,
        address.state, address.postcode, address.gpslatitude, address.gpslongitude,
       billaddrid, addr2.address1, addr2.address2, addr2.town, addr2.state,
       addr2.postcode, addr2.gpslatitude, addr2.gpslongitude,
       sorder.versionno,
       customer.TELEPHONE,
       sorder.CUSTTYPE,
       sorder.REFERRALID,
       sorder.FIRSTJOBDATE,
       sorder.USERID,
       sorder.CUSTOMERSITEID,
       sorder.jobno
FROM SORDER
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join address as addr2 on sorder.billaddrid = addr2.addrid
where complete = 0
INTO :oporderid, :opcustid, :opcustname, :opcontact, :opcomplete,
     :opinvtype, :opbybinno,
     :deladdrid, :opstreetnumber, :opdeladdress1, :opdeladdress2, :opdeltown, :opdelstate,
     :opdelpostcode, :opgpslat, :opgpslong,
     :opbilladdrid, :opbilladdress1, :opbilladdress2, :opbilltown,
     :opbillstate, :opbillpostcode, :opbillgpslat, :opbillgpslong,
     :opversionno,
     :opcusttelno,
     :opcusttype,
     :opreferralid,
     :opfirstjob,
     :opuserid,
     :opcustsiteid,
     :opjobno
DO
  /* first give the client the order fields */
  SUSPEND;
  
END^


ALTER PROCEDURE SPGET_ORDER (
    IPORDERID INTEGER = null)
RETURNS (
    OPORDERID INTEGER,
    OPCUSTID INTEGER,
    OPCUSTNAME CHAR(50),
    OPCONTACT CHAR(30),
    OPCOMPLETE INTEGER,
    OPINVTYPE INTEGER,
    OPBYBINNO INTEGER,
    DELADDRID INTEGER,
    OPDELADDRESS1 CHAR(30),
    OPDELADDRESS2 CHAR(30),
    OPDELTOWN CHAR(30),
    OPDELSTATE CHAR(30),
    OPDELPOSTCODE CHAR(10),
    OPBILLADDRID INTEGER,
    OPBILLADDRESS1 CHAR(30),
    OPBILLADDRESS2 CHAR(30),
    OPBILLTOWN CHAR(30),
    OPBILLSTATE CHAR(30),
    OPBILLPOSTCODE CHAR(10),
    OPVERSIONNO INTEGER,
    OPCUSTTELNO VARCHAR(14),
    OPCUSTTYPE INTEGER,
    OPREFERRALID INTEGER,
    OPFIRSTJOB DATE,
    OPFAXNO CHAR(30),
    OPEMAIL CHAR(50))
AS
BEGIN

/* I don't think this is used anywhere
           No need to maintain it
  */
for SELECT orderid, sorder.custid, customer.NAME, sorder.contact, complete,
       invtype, bybinno,
       deladdrid, address.address1, address.address2, address.town,
        address.state, address.postcode,
       billaddrid, addr2.address1, addr2.address2, addr2.town, addr2.state,
       addr2.postcode,
       sorder.versionno,
       customer.TELEPHONE,
       SORDER.CUSTTYPE,  /* note that this is the sorder type and not the customer field */
       sorder.REFERRALID,
       sorder.FIRSTJOBDATE,
       SORDER.FAXNO,
       SORDER.EMAIL
FROM SORDER
  left outer join customer on sorder.custid = customer.CUSTID
  left outer join address on sorder.deladdrid = address.addrid
  left outer join address as addr2 on sorder.billaddrid = addr2.addrid
where orderid = :iporderid
INTO :oporderid, :opcustid, :opcustname, :opcontact, :opcomplete,
     :opinvtype, :opbybinno,
     :deladdrid, :opdeladdress1, :opdeladdress2, :opdeltown, :opdelstate,
     :opdelpostcode,
     :opbilladdrid, :opbilladdress1, :opbilladdress2, :opbilltown,
     :opbillstate, :opbillpostcode,
     :opversionno,
     :opcusttelno,
     :opcusttype,
     :opreferralid,
     :opfirstjob,
     :opfaxno,
     :opemail
     do
SUSPEND;
END^


ALTER PROCEDURE SPGET_ORDERWEEKS (
    IPWKNO INTEGER DEFAULT NULL)
RETURNS (
    OPORDERID INTEGER)
AS
BEGIN
  for select ORDERWEEKS.ORDERID
     from ORDERWEEKS
     where ORDERWEEKS.WEEKNO = :ipwkno
     into :oporderid
  do SUSPEND;
END^


ALTER PROCEDURE SPGET_PAYMETHOD (
    IPPAYMETHODID INTEGER = null)
RETURNS (
    OPPAYMETHODID SMALLINT,
    OPDESCRIPTION CHAR(6),
    OPACCT SMALLINT,
    OPMEANSPAID SMALLINT,
    OPVERSIONNO INTEGER,
    OPISCHEQUE SMALLINT,
    OPISCASH SMALLINT,
    OPSURCHARGE DECIMAL(4,1))
AS
BEGIN
  for SELECT paymethodid, description, acct, meanspaid,
   versionno, ischeque, iscash, surcharge
FROM PAYMETHOD
where paymethod.paymethodid = :ippaymethodid
INTO :oppaymethodid, :opdescription, :opacct, :opmeanspaid,
     :opversionno, :opischeque, :opiscash, :opsurcharge
do
  SUSPEND;
END^


ALTER PROCEDURE SPGET_PAYMETHODS
RETURNS (
    OPPAYMETHODID SMALLINT,
    OPDESCRIPTION CHAR(6),
    OPACCT SMALLINT,
    OPMEANSPAID SMALLINT,
    OPVERSIONNO INTEGER,
    OPISCHEQUE SMALLINT,
    OPISCASH SMALLINT,
    OPSURCHARGE DECIMAL(4,1))
AS
BEGIN
  for SELECT paymethodid, description, acct, meanspaid,
   versionno, ischeque, iscash, surcharge
FROM PAYMETHOD
INTO :oppaymethodid, :opdescription, :opacct, :opmeanspaid,
     :opversionno, :opischeque, :opiscash, :opsurcharge
do
  SUSPEND;
END^


ALTER PROCEDURE SPGET_PINVBATCH (
    IPINVBATCH INTEGER = null)
RETURNS (
    OPINVBATCHNO INTEGER,
    OPCREATEDDATE TIMESTAMP,
    OPEXPORTEDDATE TIMESTAMP,
    OPEXPORTEDFILENAME CHAR(50),
    OPCOUNT SMALLINT,
    OPINVPERIOD INTEGER,
    OPVERSIONNO INTEGER,
    OPREFID INTEGER,
    OPBATCHTYPE INTEGER)
AS
BEGIN
for SELECT pinvbatchno, createddate,
          exporteddate, exportedfilename,
          exportedcount,
          invperiod,
          versionno,
          refid,
          pinvoicebatch.batchtype
FROM pinvoicebatch
where pinvoicebatch.pinvbatchno = :ipinvbatch
INTO :opinvbatchno,
     :opcreateddate, :opexporteddate,
     :opexportedfilename, :opcount,
     :opinvperiod,
     :opversionno,
     :oprefid,
     :opbatchtype
do SUSPEND;
END^


ALTER PROCEDURE SPGET_PINVBATCHS (
    IPWHICHBATCHES INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPINVBATCHNO INTEGER,
    OPCREATEDDATE TIMESTAMP,
    OPEXPORTEDDATE TIMESTAMP,
    OPEXPORTEDFILENAME CHAR(50),
    OPCOUNT SMALLINT,
    OPINVPERIOD INTEGER,
    OPVERSIONNO INTEGER,
    OPREFID INTEGER,
    OPBATCHTYPE INTEGER)
AS
BEGIN
if (ipwhichbatches = 0) then begin
  /* just return the top 100 */
for SELECT pinvbatchno, createddate,
          exporteddate, exportedfilename,
          exportedcount,
          invperiod,
          versionno,
          refid,
          pinvoicebatch.batchtype
FROM pinvoicebatch
order by pinvoicebatch.PINVBATCHNO DESCENDING
rows 100  /* limit to the last 100 - should be enough ? */
INTO :opinvbatchno,
     :opcreateddate, :opexporteddate,
     :opexportedfilename, :opcount,
     :opinvperiod,
     :opversionno,
     :oprefid,
     :opbatchtype
do SUSPEND;
end

else if (ipwhichbatches = 5) then begin
  /* by date */
  for SELECT pinvbatchno, createddate,
          exporteddate, exportedfilename,
          exportedcount,
          invperiod,
          versionno,
          refid,
          pinvoicebatch.batchtype
    FROM pinvoicebatch
    where pinvoicebatch.createddate >= :ipfromdate
      and pinvoicebatch.createddate <= :iptodate
    INTO :opinvbatchno,
     :opcreateddate, :opexporteddate,
     :opexportedfilename, :opcount,
     :opinvperiod,
     :opversionno,
     :oprefid,
     :opbatchtype
    do SUSPEND;
end

end^


ALTER PROCEDURE SPGET_PINVLINES (
    IPPINVID INTEGER = null)
RETURNS (
    OPPINVID INTEGER,
    OPINVLINENO INTEGER,
    OPEXGSTVALUE DECIMAL(18,2),
    OPGST DECIMAL(18,2),
    OPTOTALVALUE DECIMAL(18,2),
    OPLINETYPE INTEGER,
    OPITEMCODE CHAR(12))
AS
BEGIN
  for select pinvline.pinvid, pinvline.invlineno, exgstvalue, gst, totalvalue,
             linetype, itemcode  /*, invcomment.comment   */
         from PINVLINE
         /*
         left outer join invcomment on invline.invno = invcomment.invno
                                    and invline.invlineno = invcomment.invlineno
                                    */
         where pinvline.pinvid = :ippinvid
         into :oppinvid,
         :opinvlineno,
         :opexgstvalue,
         :opgst,
         :optotalvalue,
         :oplinetype,
         :opitemcode
  do SUSPEND;
end^


ALTER PROCEDURE SPGET_PINVSFORCUSTID (
    IPCUSTID INTEGER = null)
RETURNS (
    OPPINVID INTEGER)
AS
BEGIN
  for select pinvoice.pinvid
     from pinvoice
     where pinvoice.custid = :ipcustid
     into :oppinvid
     do suspend;
END^


ALTER PROCEDURE SPGET_PINVSINBATCH (
    IPINVBATCHNO INTEGER = null)
RETURNS (
    OPINVOICENO INTEGER)
AS
BEGIN
  for select pinvoice.pinvid
     from pinvoice
     where pinvoice.pinvbatchid = :ipinvbatchno
     into :opinvoiceno
     do suspend;
END^


ALTER PROCEDURE SPGET_PRICE (
    IPCUSTID INTEGER DEFAULT NULL,
    IPPRICEAREAID INTEGER DEFAULT NULL,
    IPBINTYPEID INTEGER DEFAULT NULL)
RETURNS (
    OPCUSTID INTEGER,
    OPPRICEAREAID INTEGER,
    OPBINTYPEID INTEGER,
    OPPRICE DECIMAL(12,2),
    OPFIXED SMALLINT,
    OPINCEX SMALLINT)
AS
BEGIN
  for select custid, priceareaid, bintypeid,
             price, fixed, incex
             from PRICES
             where PRICES.custid = :ipcustid
               and prices.PRICEAREAID = :ippriceareaid
               and prices.BINTYPEID = :ipbintypeid
             into :opcustid, :oppriceareaid,
                  :opbintypeid, :opprice, :opfixed,
                  :opincex
  do SUSPEND;
END^


ALTER PROCEDURE SPGET_PRICEAREA (
    IPPRICEAREAID INTEGER = null)
RETURNS (
    OPPRICEAREAID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPDEFAULTAREA INTEGER,
    OPASBESTOSAREA INTEGER,
    OPVERSIONNO INTEGER,
    OPSORTORDER INTEGER,
    OPACTIVE INTEGER,
    OPCHARGESFORPU INTEGER)
AS
BEGIN
SELECT priceareaid, description, defaultarea, asbestosarea,
      versionno, sortorder, isactive,
      chargesforpu  /*, includedweight, includedvolume,
      tipsiteid, priceperton, pricepercube
        */
FROM pricearea
where priceareaid = :ippriceareaid
INTO :oppriceareaid, :opdescription, :opdefaultarea, :opasbestosarea,
     :opversionno, :opsortorder, :opactive,
     :opchargesforpu  /* ,
     :opincludedweight,
     :opincludedvolume,
     :optipsiteid,
     :oppriceperton,
     :oppricepercube */
     ;

SUSPEND;
end^


ALTER PROCEDURE SPGET_PRICEAREAS
RETURNS (
    OPPRICEAREAID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPDEFAULTAREA INTEGER,
    OPASBESTOSAREA INTEGER,
    OPVERSIONNO INTEGER,
    OPSORTORDER INTEGER,
    OPACTIVE INTEGER,
    OPCHARGESFORPU INTEGER,
    OPINCLUDEDWEIGHT DECIMAL(5,2),
    OPINCLUDEDVOLUME INTEGER,
    OPTIPSITEID INTEGER,
    OPPRICEPERTON DECIMAL(6,2),
    OPPRICEPERCUBE DECIMAL(6,2))
AS
BEGIN
for SELECT priceareaid, description, defaultarea,
    asbestosarea, versionno, sortorder, isactive,
    chargesforpu, includedweight, includedvolume,
      tipsiteid, priceperton, pricepercube
FROM pricearea
INTO :oppriceareaid, :opdescription, :opdefaultarea, :opasbestosarea,
     :opversionno, :opsortorder, :opactive,
     :opchargesforpu,
     :opincludedweight,
     :opincludedvolume,
     :optipsiteid,
     :oppriceperton,
     :oppricepercube
do
BEGIN
  SUSPEND;
END
end^


ALTER PROCEDURE SPGET_PRICES (
    IPCUSTID INTEGER DEFAULT NULL)
RETURNS (
    OPCUSTID INTEGER,
    OPPRICEAREAID INTEGER,
    OPBINTYPEID INTEGER,
    OPPRICE DECIMAL(18,2),
    OPFIXED SMALLINT,
    OPINCEX SMALLINT)
AS
BEGIN
  for select custid, priceareaid, bintypeid,
              price, fixed, incex
             from PRICES
             where PRICES.custid = :ipcustid
             into :opcustid, :oppriceareaid,
                  :opbintypeid, :opprice, :opfixed, :opincex
  do SUSPEND;
  
  if (ipcustid <> -1)
  then begin
    /* we have returned the prices for the customer but when
     * we are doing customer's prices we
     * also want to return the base bin price for all the
     * bintypes
     */
    for select custid, priceareaid, bintypeid,
              price, fixed, incex
             from PRICES
             where PRICES.custid = -1
               and prices.priceareaid = -1
             into :opcustid, :oppriceareaid,
                  :opbintypeid, :opprice, :opfixed, :opincex
    do SUSPEND;
  end
END^


ALTER PROCEDURE SPGET_PRICESFORWS (
    IPCUSTID INTEGER)
RETURNS (
    OPCUSTID INTEGER,
    OPPRICEAREAID INTEGER,
    OPBINTYPEID INTEGER,
    OPPRICE DECIMAL(12,2),
    OPINCEX INTEGER)
AS
begin
  /* this will either send back the prices for that customer (not including their site
   * prices) or non-customer specific prices (ie base and pricearea prices)
   */

  if (ipcustid > 0) then begin
    for select prices.custid, prices.priceareaid, prices.bintypeid, prices.price, prices.incex
           from prices
           where prices.custid = :ipcustid
           into :opcustid, :oppriceareaid, :opbintypeid, :opprice, :opincex
    do suspend;
  end

  /* this loop will get the prices for priceareas as well as just base prices */
  else for select prices.custid, prices.priceareaid, prices.bintypeid, prices.price, prices.incex
           from prices
           where prices.custid = -1
           into :opcustid, :oppriceareaid, :opbintypeid, :opprice, :opincex
    do suspend;
end^


ALTER PROCEDURE SPGET_READDDNO
RETURNS (
    OPDDNO INTEGER)
AS
begin
  SELECT GEN_ID( GENAUTODDNO, 0 )
         FROM RDB$DATABASE
         into :OPDDNO;
  SUSPEND;
end^


ALTER PROCEDURE SPGET_READFLDDNO
RETURNS (
    OPFLDDNO INTEGER)
AS
begin
    SELECT GEN_ID( genflddno, 0 )
           FROM RDB$DATABASE
           into :OPFLDDNO;
  SUSPEND;
end^


ALTER PROCEDURE SPGET_READINVNO
RETURNS (
    OPINVNO INTEGER)
AS
BEGIN
  SELECT GEN_ID( GENINVOICENO, 0 )
         FROM RDB$DATABASE
         into :OPINVNO;
  SUSPEND;
END^


ALTER PROCEDURE SPGET_READOUTGOINGDKTNO
RETURNS (
    OPDDNO INTEGER)
AS
begin
  SELECT GEN_ID( genoutgoingdktno, 0 )
         FROM RDB$DATABASE
         into :OPDDNO;
  SUSPEND;
end^


ALTER PROCEDURE SPGET_READPINVNO
RETURNS (
    OPPINVNO INTEGER)
AS
BEGIN
  SELECT GEN_ID( genacctsaleno, 0 )
         FROM RDB$DATABASE
         into :OPPINVNO;
  SUSPEND;
END^


ALTER PROCEDURE SPGET_READTIPDDNO (
    IPTIPDDSEQ INTEGER)
RETURNS (
    OPTIPDDNO INTEGER)
AS
begin
  if (iptipddseq = 0) then
    SELECT GEN_ID( gentipddno, 0 )
           FROM RDB$DATABASE
           into :OPTIPDDNO;
  else SELECT GEN_ID( gentipddnoseq2, 0 )
           FROM RDB$DATABASE
           into :OPTIPDDNO;
  SUSPEND;
end^


ALTER PROCEDURE SPGET_READYTOINVOICE (
    IPJOBSTATUS INTEGER = null,
    IPINVPERIOD INTEGER = null,
    IPUPTODATE DATE = null)
RETURNS (
    OPJOBID INTEGER,
    OPINVTYPE INTEGER)
AS
declare variable ljobdate date;
declare variable lwhentoinvoice integer;
declare variable ljobtype integer;
BEGIN
opinvtype = 1; /* flags normal bin hire invoices */
for SELECT job.jobid, job.jobdate, job.whentoinvoice
FROM job
     join sorder on (job.orderid = sorder.orderid)
     join customer on (sorder.custid = customer.custid)
where
         job.invoiceable = 1   /* jobs that do need invoicing */
     and job.INVNO = 0   /* jobs not invoiced yet */
     and job.JOBSTATUS = :ipjobstatus   /* only jobs marked as 'Done' */
     and customer.INVPERIOD = :ipinvperiod   /* for the desired daily, weekly... */
     /* and job.JOBDATE <= :ipuptodate too slow */ /* don't include jobs past this date */
INTO :opjobid, :LJOBDATE, :lwhentoinvoice
do if (LJOBDATE <= :ipuptodate and
       (:lwhentoinvoice is null or   /* so either this job is not defined as to when to invoice */
        :lwhentoinvoice = 0 or       /* or is invoiced at Drop (0) */
        :lwhentoinvoice = 1 or       /* or at drop and weight at PU (1) */
        :lwhentoinvoice = 4) ) then SUSPEND;    /* or at pick up */

/* added this second loop 05/2/2010 to find the pick up jobs that need to be
 * invoiced (by weight or volume). Having it in job2 means all the companies not
 * doing the invoicing by weight/volume won't be slowed down by this (their job2
 * table will be empty)
 */
opinvtype = 2;  /* flags PU weight/volume invoices */
for select job2.jobid, job.jobdate, job.jobtype, job.whentoinvoice
    from job2
    join job on job2.jobid = job.jobid
    join sorder on (job.orderid = sorder.orderid)
    join customer on (sorder.custid = customer.custid)
   where
         job2.puinvoiceable = 1  /* 1 = 'ToBeInvoiced' */
     and job.JOBSTATUS = :ipjobstatus   /* only jobs marked as 'Done' */
     and customer.INVPERIOD = :ipinvperiod   /* for the desired daily, weekly... */
   into :opjobid, :ljobdate, :ljobtype, :lwhentoinvoice
 do if (LJOBDATE <= :ipuptodate) then begin
    /* opjobid = 0 - opjobid; make it negative so BW knows it is for a pick up type charge */

    /* pass back the jobid apart from if it is a changeover that is a InvoiceAtDeliveryThenWeightAtPickUp
     * type in which case we ignore it because these jobs are included in the opinvtype = 1 loop because
     * they get picked up because of their delivery component
     */
    if (ljobtype != 2 or lwhentoinvoice != 1)
    then SUSPEND;
 end

/* added this 10/02/10 to find any any adhoccharges that are waiting to be invoiced */
opinvtype = 3;
/* if I ever use this for items not linked to a job then the jobid will be null -
 * so I won't be able to do the join on job
 */
for select adhoccharge.adhocchargeid, job.jobdate /*, adhoccharge.jobid */
    from adhoccharge
    join job on adhoccharge.jobid = job.jobid
    join customer on adhoccharge.custid = customer.custid
    where adhoccharge.invno = 0
      and adhoccharge.invoiceable = 1  /* 1 = 'ToBeInvoiceable' */
      and customer.invperiod = :ipinvperiod
    into  :opjobid, :ljobdate
  do if (LJOBDATE <= :ipuptodate) then begin
    SUSPEND;
 end
end^


ALTER PROCEDURE SPGET_RECONFORDAY (
    IPDDATE DATE DEFAULT NULL)
RETURNS (
    OPDRIVERID INTEGER,
    OPBATCHID INTEGER,
    OPCHEQALLOC DECIMAL(18,2),
    OPCASHALLOC DECIMAL(18,2),
    OPVERSIONNO INTEGER,
    OPBALANCED SMALLINT,
    OPSTARTTIME TIMESTAMP,
    OPENDTIME TIMESTAMP,
    OPTRUCKID INTEGER,
    OPSTARTKMS INTEGER,
    OPENDKMS INTEGER,
    OPFUELCOST DECIMAL(8,2))
AS
BEGIN
  for select 
      DRIVERRECBATCH.driverid,
      DRIVERRECBATCH.BATCHID,
      DRIVERRECBATCH.CHEQUEAMT,
      DRIVERRECBATCH.CASHAMT,
      DRIVERRECBATCH.VERSIONNO,
      DRIVERRECBATCH.BALANCED,
      DRIVERRECBATCH.STARTTIME,
      DRIVERRECBATCH.ENDTIME,
      DRIVERRECBATCH.TRUCKID,
      DRIVERRECBATCH.STARTKMS,
      DRIVERRECBATCH.ENDKMS,
      DRIVERRECBATCH.FUELCOST
      from DRIVERRECBATCH
      where DRIVERRECBATCH.DDATE = :ipddate
      into :opdriverid,
           :opbatchid, :opcheqalloc, :opcashalloc,
           :opversionno, 
           :opbalanced,
           :opstarttime,
           :opendtime,
           :optruckid,
           :opstartkms,
           :opendkms,
           :opfuelcost
      do SUSPEND;
END^


ALTER PROCEDURE SPGET_RECYCLEDGOODS
RETURNS (
    OPRGID INTEGER,
    OPDESCRIPTION CHAR(40),
    OPDELIVEREDPRICE DECIMAL(8,2),
    OPPUPRICE DECIMAL(8,2),
    OPACCOUNTNO CHAR(25),
    OPITEMCODE CHAR(12),
    OPSHORTDESC CHAR(10))
AS
begin
  for select recycledgoods.rgid, recycledgoods.description,
             recycledgoods.deliveredincprice,
             recycledgoods.pickupincprice,
             recycledgoods.accountno,
             recycledgoods.itemcode,
             recycledgoods.shortdesc
           from recycledgoods
           into :oprgid, :opdescription,
                :opdeliveredprice,
                :oppuprice,
                :opaccountno,
                :opitemcode,
                :opshortdesc
   do suspend;
end^


ALTER PROCEDURE SPGET_REFERRAL (
    IPREFERRALID SMALLINT DEFAULT NULL)
RETURNS (
    OPREFERRALID INTEGER,
    OPDESCRIPTION CHAR(20),
    OPVERSIONNO INTEGER)
AS
BEGIN
for SELECT referralid, description,
          versionno
FROM REFERRAL
where referralid = :ipreferralid
INTO :opreferralid,
     :opdescription,
     :opversionno
do SUSPEND;
END^


ALTER PROCEDURE SPGET_REFERRALS
RETURNS (
    OPREFERRALID INTEGER,
    OPDESCRIPTION CHAR(20),
    OPVERSIONNO INTEGER)
AS
BEGIN
   for SELECT referralid, description,
              versionno
FROM REFERRAL
INTO :opreferralid,
     :opdescription,
     :opversionno
do
  SUSPEND;
END^


ALTER PROCEDURE SPGET_REFERSUMM (
    IPSTARTDATE DATE DEFAULT NULL,
    IPENDDATE DATE DEFAULT NULL)
RETURNS (
    LRID INTEGER,
    REFCOUNT INTEGER,
    LDESC CHAR(20))
AS
BEGIN
  for select referralid, description
         from REFERRAL
         into :lrid, :ldesc
         do begin
    for select count(orderid)
        from sorder
        where sorder.firstjobdate >= :ipstartdate
          and sorder.firstjobdate <= :ipenddate
          and sorder.REFERRALID = :lrid
        into :refcount
        do begin
     SUSPEND;
    END
  end
  lrid = 0;
  ldesc = 'Unassigned';
  for select count(orderid)
        from sorder
        where sorder.firstjobdate >= :ipstartdate
          and sorder.firstjobdate <= :ipenddate
          and sorder.REFERRALID = 0
        into :refcount
        do SUSPEND;
END^


ALTER PROCEDURE SPGET_REPORTNO
RETURNS (
    OPREPORTNO INTEGER)
AS
BEGIN
  opreportno = GEN_ID(GEN_REPORTNO, 1);
  SUSPEND;
END^


ALTER PROCEDURE SPGET_RGORDERFROMTO (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPRGSOID INTEGER,
    OPCUSTID INTEGER,
    OPDELIVERYDATE DATE,
    OPDELIVERYTYPE INTEGER,
    OPCONTACTNAME CHAR(30),
    OPCUSTREF CHAR(20),
    OPWEIGHT DECIMAL(15,2),
    OPPRICE DECIMAL(15,2),
    OPRGID INTEGER,
    OPRGOFFICENOTES CHAR(200),
    OPORDERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPPHONE CHAR(30),
    OPFAX CHAR(30),
    OPEMAIL CHAR(50),
    OPMYOBJOBNO CHAR(50),
    OPORDERNO INTEGER,
    OPDRIVERNOTES CHAR(200),
    OPDELIVERYCTIME CHAR(10),
    OPDELIVERYNTIME TIMESTAMP,
    OPCOMPLETE SMALLINT,
    OPPAYDETID INTEGER,
    OPUSERID INTEGER,
    OPCSTCUSTID INTEGER,
    OPCSTNAME CHAR(50),
    OPCSTTELEPHONE CHAR(14),
    OPCSTMOBILE CHAR(14),
    OPCSTCONTACT CHAR(30),
    OPCSTEMAIL CHAR(50),
    OPCSTFAX CHAR(14),
    OPCSTABN CHAR(16),
    OPCSTTERMSID INTEGER,
    OPCSTONHOLD INTEGER,
    OPCSTISACTIVE INTEGER,
    OPCSTCOMMENTS CHAR(500),
    OPCSTCUSTTYPE INTEGER,
    OPCSTEXTERNAL CHAR(50),
    OPCSTVERSIONNO INTEGER,
    OPCSTINVPERIOD INTEGER,
    OPCSTDEFPAREA INTEGER,
    OPCSTLASTPAREA INTEGER,
    OPINVOICEPERSITE INTEGER,
    OPCSTDEFREFERRALID INTEGER,
    OPCSTSALESMAN CHAR(30),
    OPCARDTYPEID INTEGER,
    OPCARDNUMBER CHAR(60),
    OPNAMEONCARD CHAR(40),
    OPEXPMONTH SMALLINT,
    OPEXPYEAR SMALLINT,
    OPSECURITYCODE CHAR(40),
    OPWANTSBREAKDOWN SMALLINT,
    OPSALESMANID INTEGER,
    OPCUSTOMERMODULES INTEGER,
    OPDOCSRECEIVED INTEGER,
    OPDIRNAME CHAR(40),
    OPCREDITLIMIT DECIMAL(15,2),
    OPSALESMANSTARTDATE DATE,
    OPCUSTWHENTOINVOICE INTEGER,
    OPCUSTISCUSTOMER INTEGER,
    OPCUSTISSUPPLIER INTEGER,
    OPCUSTSUPPLIERFLAGS INTEGER,
    OPCUSTRCTIAGREEMENT DATE,
    OPCUSTGSTREGISTEREDSINCE DATE,
    OPCUSTSCRAPPRICELISTID INTEGER,
    OPCUSTADDRID INTEGER,
    OPCUSTSTREETNUMBER CHAR(10),
    OPCUSTADDRESS1 CHAR(30),
    OPCUSTADDRESS2 CHAR(30),
    OPCUSTTOWN CHAR(30),
    OPCUSTSTATE CHAR(30),
    OPCUSTPOSTCODE CHAR(10),
    OPCUSTGPSLATITUDE NUMERIC(18,12),
    OPCUSTGPSLONGITUDE NUMERIC(18,12),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPLONGITUDE BIGINT,
    OPLATITUDE BIGINT,
    OPGPSLATITUDE NUMERIC(18,12),
    OPGPSLONGITUDE NUMERIC(18,12))
AS
begin
  for select rgsalesorder.rgsoid,
             rgsalesorder.custid,
             rgsalesorder.deliverydate,
             rgsalesorder.deliverytype,
             rgsalesorder.contactname,
             rgsalesorder.customerreference,
             rgsalesorder.tons,
             rgsalesorder.incprice,
             rgsalesorder.rgid,
             rgsalesorder.officenotes,
             rgsalesorder.orderid,
             rgsalesorder.contactphone,
             rgsalesorder.fax,
             rgsalesorder.email,
             rgsalesorder.myobjobno,
             rgsalesorder.orderno,
             rgsalesorder.drivernotes,
             rgsalesorder.deliveryctime,
             rgsalesorder.deliveryntime,
             rgsalesorder.complete,
             rgsalesorder.paydetid,
             rgsalesorder.userid,
           customer.custid, customer.name, customer.telephone, customer.mobile, customer.contact,
           customer.email, customer.fax, customer.abn, customer.termsid, customer.onhold, customer.isactive,
           customer.comments, customer.custtype, customer.externalcode, customer.versionno, customer.invperiod,
           customer.defpriceareaid, customer.lastpriceareaid, customer.invoicepersite, customer.defreferralid,
           customer.salesman, customer.cardtypeid, customer.cardnumber, customer.nameoncard, customer.expmonth,
           customer.expyear, customer.securitycode, customer.wantsbreakdown, customer.salesmanid,
           customer.customermodules, customer.docsreceived, customer.directoryname, customer.creditlimit,
           customer.salesmanstartdate, customer.whentoinvoice, customer.iscustomer, customer.issupplier,
           customer.supplierflags, customer.rctiagreement, customer.gstregisteredsince, customer.scrappricelistid,
           custaddr.addrid, custaddr.streetnumber, custaddr.address1, custaddr.address2, custaddr.town,
           custaddr.state, custaddr.postcode, custaddr.gpslatitude, custaddr.gpslongitude ,
           address.addrid, address.streetnumber, address.address1, address.address2, address.town, address.state,
           address.postcode, suburbs.longitude, suburbs.latitude, address.gpslatitude, address.gpslongitude 
      from rgsalesorder
      left outer join customer on rgsalesorder.custid = customer.custid
      left outer join customersite on customer.custid = customersite.custid
      left outer join address as custaddr on customer.custaddrid = custaddr.addrid
      left outer join address on rgsalesorder.addrid = address.addrid
      left outer join suburbs on lower(ADDRESS.TOWN) = SUBURBS.LCNAME
                    and address.STATE = SUBURBS.STATE
                    and address.POSTCODE = SUBURBS.POSTCODE
      where rgsalesorder.deliverydate >= :ipfromdate
        and rgsalesorder.deliverydate <= :iptodate
       into :oprgsoid,
            :opcustid,
            :opdeliverydate,
            :opdeliverytype,
            :opcontactname,
            :opcustref,
            :opweight,
            :opprice,
            :oprgid,
            :oprgofficenotes,
            :oporderid,
            :opphone,
            :opfax,
            :opemail,
            :opmyobjobno,

            :oporderno,
            :opdrivernotes,
            :opdeliveryctime,
            :opdeliveryntime,
            :opcomplete,
            :oppaydetid,
            :opuserid,
  :opcstcustid, :opcstname, :opcsttelephone, :opcstmobile, :opcstcontact, :opcstemail, :opcstfax, :opcstabn,
  :opcsttermsid, :opcstonhold, :opcstisactive, :opcstcomments, :opcstcusttype, :opcstexternal, :opcstversionno,
  :opcstinvperiod, :opcstdefparea, :opcstlastparea, :opinvoicepersite, :opcstdefreferralid, :opcstsalesman,
  :opcardtypeid, :opcardnumber, :opnameoncard, :opexpmonth, :opexpyear, :opsecuritycode, :opwantsbreakdown,
  :opsalesmanid, :opcustomermodules, :opdocsreceived, :opdirname, :opcreditlimit, :opsalesmanstartdate,
  :opcustwhentoinvoice, :opcustiscustomer, :opcustissupplier, :opcustsupplierflags, :opcustrctiagreement,
  :opcustgstregisteredsince, :opcustscrappricelistid,
  :opcustaddrid, :opcuststreetnumber, :opcustaddress1, :opcustaddress2, :opcusttown, :opcuststate, :opcustpostcode,
  :opcustgpslatitude, :opcustgpslongitude ,
  :opaddrid, :opstreetnumber, :opaddress1, :opaddress2, :optown, :opstate, :oppostcode, :oplongitude, :oplatitude,
  :opgpslatitude, :opgpslongitude 
  do begin
      select sum(job.rgweight)
              from job
              where job.orderid = :oporderid
                and job.jobstatus = 3 /* done */
               into :optonsdelivered;
       if (optonsdelivered is null)
       then optonsdelivered = 0;

       select sum(job.rgweight)
              from job
              where job.orderid = :oporderid
                and job.jobstatus != 3 /* not done */
               into :optonsscheduled;
       if (optonsscheduled is null)
       then optonsscheduled = 0;

       suspend;
   end
END^


ALTER PROCEDURE SPGET_RGSORDER (
    IPCUSTID INTEGER,
    IPJUSTOPEN SMALLINT)
RETURNS (
    OPRGSOID INTEGER,
    OPORDERNO INTEGER,
    OPCUSTID INTEGER,
    OPRGID INTEGER,
    OPTONS DECIMAL(8,2),
    OPDELIVERYTYPE SMALLINT,
    OPINCPRICE DECIMAL(8,2),
    OPDRIVERNOTES CHAR(200),
    OPOFFICENOTES CHAR(200),
    OPCUSTREF CHAR(20),
    OPCONTACTNAME CHAR(30),
    OPCONTACTPHONE CHAR(30),
    OPCOMPLETE SMALLINT,
    OPEMAIL CHAR(50),
    OPFAX CHAR(30),
    OPUSERID INTEGER,
    OPTONSDELIVERED DECIMAL(8,2),
    OPTONSSCHEDULED DECIMAL(8,2),
    OPORDERID INTEGER,
    OPMYOBJOBNO CHAR(50),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPTOWN CHAR(30),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10),
    OPGPSLAT NUMERIC(18,12),
    OPGPSLONG NUMERIC(18,12))
AS
begin
if (ipjustopen = 1) then begin
  for select rgsalesorder.rgsoid,
             rgsalesorder.orderno,
             rgsalesorder.custid,
             rgsalesorder.rgid,
             rgsalesorder.tons,
             rgsalesorder.deliverytype,
             rgsalesorder.incprice,
             rgsalesorder.drivernotes,
             rgsalesorder.officenotes,
             rgsalesorder.customerreference,
             rgsalesorder.contactname,
             rgsalesorder.contactphone,
             rgsalesorder.complete,
             rgsalesorder.email,
             rgsalesorder.fax,
             rgsalesorder.userid,
             rgsalesorder.orderid,
             rgsalesorder.myobjobno,
             address.addrid,
             address.streetnumber,
             address.address1,
             address.address2,
             address.town,
             address.state,
             address.postcode,
             address.gpslatitude,
             address.gpslongitude
       from rgsalesorder
       left outer join address on rgsalesorder.addrid = address.addrid
       where rgsalesorder.custid = :ipcustid
         and rgsalesorder.complete = 0
         and rgsalesorder.deliverytype = 0 /* delivered type only */
        into :oprgsoid,
             :oporderno,
             :opcustid,
             :oprgid,
             :optons,
             :opdeliverytype,
             :opincprice,
             :opdrivernotes,
             :opofficenotes,
             :opcustref,
             :opcontactname,
             :opcontactphone,
             :opcomplete,
             :opemail,
             :opfax,
             :opuserid,
             :oporderid,
             :opmyobjobno,
             :opaddrid,
             :opstreetnumber,
             :opaddress1,
             :opaddress2,
             :optown,
             :opstate,
             :oppostcode,
             :opgpslat,
             :opgpslong
    do begin
       select sum(job.rgweight)
              from job
              where job.orderid = :oporderid
                and job.jobstatus = 3 /* done */
               into :optonsdelivered;
       if (optonsdelivered is null)
       then optonsdelivered = 0;

       select sum(job.rgweight)
              from job
              where job.orderid = :oporderid
                and job.jobstatus != 3 /* not done */
               into :optonsscheduled;
       if (optonsscheduled is null)
       then optonsscheduled = 0;

       suspend;
    end
end
else begin
  for select rgsalesorder.rgsoid,
             rgsalesorder.orderno,
             rgsalesorder.custid,
             rgsalesorder.rgid,
             rgsalesorder.tons,
             rgsalesorder.deliverytype,
             rgsalesorder.incprice,
             rgsalesorder.drivernotes,
             rgsalesorder.officenotes,
             rgsalesorder.customerreference,
             rgsalesorder.contactname,
             rgsalesorder.contactphone,
             rgsalesorder.complete,
             rgsalesorder.email,
             rgsalesorder.fax,
             rgsalesorder.userid,
             rgsalesorder.orderid,
             rgsalesorder.myobjobno,
             address.addrid,
             address.streetnumber,
             address.address1,
             address.address2,
             address.town,
             address.state,
             address.postcode,
             address.gpslatitude,
             address.gpslongitude
       from rgsalesorder
       left outer join address on rgsalesorder.addrid = address.addrid
       where rgsalesorder.custid = :ipcustid
         and rgsalesorder.deliverytype = 0 /* delivered type only */
       order by rgsalesorder.complete, rgsalesorder.rgsoid desc
       rows 50  /* some kind of limit otherwise the list gets longer and longer */
        into :oprgsoid,
             :oporderno,
             :opcustid,
             :oprgid,
             :optons,
             :opdeliverytype,
             :opincprice,
             :opdrivernotes,
             :opofficenotes,
             :opcustref,
             :opcontactname,
             :opcontactphone,
             :opcomplete,
             :opemail,
             :opfax,
             :opuserid,
             :oporderid,
             :opmyobjobno,
             :opaddrid,
             :opstreetnumber,
             :opaddress1,
             :opaddress2,
             :optown,
             :opstate,
             :oppostcode,
             :opgpslat,
             :opgpslong
    do begin
       select sum(job.rgweight)
              from job
              where job.orderid = :oporderid
                and job.jobstatus = 3 /* done */
              into :optonsdelivered;
       if (optonsdelivered is null)
       then optonsdelivered = 0;

       select sum(job.rgweight)
              from job
              where job.orderid = :oporderid
                and job.jobstatus != 3 /* not done */
               into :optonsscheduled;
       if (optonsscheduled is null)
       then optonsscheduled = 0;

       suspend;
    end
  end
END^


ALTER PROCEDURE SPGET_RMBREAKDOWN (
    IPFROMDATE DATE,
    IPTODATE DATE,
    IPORDERID INTEGER)
RETURNS (
    OPRMGROUPID INTEGER,
    OPDESCRIPTION CHAR(40),
    OPCUBICMETRES DECIMAL(15,2))
AS
declare variable lrptid integer;
declare variable lbincount integer;
declare variable lcubes decimal(5,1);
declare variable lrmgroupid integer;
declare variable lpercent integer;
declare variable ljobid integer;
declare variable lsiteid integer;
begin
  /* This is the original breakdown report getter. It summarises by customer and
   * returns a cubic metre volume of each raw material
   */
  LRPTID = GEN_ID(TTSUMMGEN, 1);
  for select job.jobid, job.BINS_IN, bintype.dcubicmetres
          from JOB
          left outer join bintype on job.bintypeid_in = bintype.bintypeid
          where job.orderid = :iporderid
            and job.jobdate >= :ipfromdate
            and job.jobdate <= :iptodate
            and job.JOBSTATUS = 3 /* done */
            and (job.jobtype = 2 or job.jobtype = 3 or /* changeover or pickup */
                 job.jobtype = 8 or job.jobtype = 4)   /* wait+load or Service */
          into :ljobid, :lbincount, :lcubes
          do begin
     for select jobrmbreakdown.rmgroupid, jobrmbreakdown.percent
            from jobrmbreakdown
            where jobrmbreakdown.jobid = :ljobid
            into :lrmgroupid, :lpercent
            do begin

            update TTSUMMARY set totalvalue = totalvalue + ((:lbincount * :lcubes) * (CAST(:lpercent As decimal(5,2)) / 100))
                             where TTSUMMARY.RPTID = :lrptid
                               and TTSUMMARY.ID = :lrmgroupid
                               and TTSUMMARY.CHARID = '';
            if (row_count = 0) then
               insert into TTSUMMARY (rptid, id, charid, totalvalue, ttsummary.dcubicmetres)
                            values (:lrptid,
                                    :lrmgroupid,
                                    '',
                                    (:lbincount * :lcubes) * (CAST(:lpercent As decimal(5,2)) / 100),
                                    cast(:lpercent as decimal(5,2)) / 100
                                    );
          end
  end
            
  opdescription = '';
  for select TTSUMMARY.id,
             rmgroup.description,
             TTSUMMARY.TOTALVALUE
             from TTSUMMARY
             left outer join rmgroup on ttsummary.id = rmgroup.rmgroupid
             where TTSUMMARY.RPTID = :lrptid
             into :oprmgroupid,
                  :opdescription,
                  :opcubicmetres
             do SUSPEND;
             
  /* finally clear up our entries in the 'temp-table' */
  delete from TTSUMMARY
    where TTSUMMARY.RPTID = :lrptid;
end^


ALTER PROCEDURE SPGET_RMGROUPS
RETURNS (
    OPRMGROUPID INTEGER,
    OPDESCRIPTION CHAR(40),
    OPSHORTDESC CHAR(60),
    OPTOTONS DECIMAL(8,3))
AS
begin
  for select rmgroup.rmgroupid,
             rmgroup.description,
             rmgroup.shortdesc,
             rmgroup.totons
        from rmgroup
        into :oprmgroupid,
             :opdescription,
             :opshortdesc,
             :optotons
  do suspend;
end^


ALTER PROCEDURE SPGET_RMJOBBREAKDOWN (
    IPFROMDATE DATE,
    IPTODATE DATE,
    IPCUSTID INTEGER,
    IPCUSTSITEID INTEGER)
RETURNS (
    OPRMGROUPID INTEGER,
    OPDESCRIPTION CHAR(40),
    OPCUBICMETRES DECIMAL(15,2))
AS
declare variable lrptid integer;
declare variable lbincount integer;
declare variable lcubes decimal(5,1);
declare variable lrmgroupid integer;
declare variable lpercent integer;
declare variable ljobid integer;
declare variable lsiteid integer;
begin
  LRPTID = GEN_ID(TTSUMMGEN, 1);
  for select job.jobid, job.BINS_IN, bintype.dcubicmetres, sorder.customersiteid
          from JOB
          left outer join bintype on job.bintypeid_in = bintype.bintypeid
          left outer join sorder on job.orderid = sorder.orderid
          where job.jobdate >= :ipfromdate
            and job.jobdate <= :iptodate
            and job.JOBSTATUS = 3 /* done */
            and (job.jobtype = 2 or job.jobtype = 3) /* changeover or pickup */
            and sorder.custid = :ipcustid
          into :ljobid, :lbincount, :lcubes, :lsiteid
          do begin
          if (ipcustsiteid = -1 or lsiteid = ipcustsiteid) then
     for select jobrmbreakdown.rmgroupid, jobrmbreakdown.percent
            from jobrmbreakdown
            where jobrmbreakdown.jobid = :ljobid
            into :lrmgroupid, :lpercent
            do begin

            update TTSUMMARY set totalvalue = totalvalue + ((:lbincount * :lcubes) * (CAST(:lpercent As decimal(5,2)) / 100))
                             where TTSUMMARY.RPTID = :lrptid
                               and TTSUMMARY.ID = :lrmgroupid
                               and TTSUMMARY.CHARID = '';
            if (row_count = 0) then
               insert into TTSUMMARY (rptid, id, charid, totalvalue, ttsummary.dcubicmetres)
                            values (:lrptid,
                                    :lrmgroupid,
                                    '',
                                    (:lbincount * :lcubes) * (CAST(:lpercent As decimal(5,2)) / 100),
                                    cast(:lpercent as decimal(5,2)) / 100
                                    );
          end
  end
            
  opdescription = '';
  for select TTSUMMARY.id,
             rmgroup.description,
             TTSUMMARY.TOTALVALUE
             from TTSUMMARY
             left outer join rmgroup on ttsummary.id = rmgroup.rmgroupid
             where TTSUMMARY.RPTID = :lrptid
             into :oprmgroupid,
                  :opdescription,
                  :opcubicmetres
             do SUSPEND;
             
  /* finally clear up our entries in the 'temp-table' */
  delete from TTSUMMARY
    where TTSUMMARY.RPTID = :lrptid;
end^


ALTER PROCEDURE SPGET_SALESMEN
RETURNS (
    OPSALESMANID INTEGER,
    OPNAME CHAR(40),
    OPTELEPHONE CHAR(12),
    OPEMAIL CHAR(50),
    OPACTIVE INTEGER,
    OPINITPERCUBE DECIMAL(6,2),
    OPPERCUBE DECIMAL(6,2),
    OPINITPERCENT DECIMAL(6,2),
    OPPERCENT DECIMAL(6,2))
AS
begin
  for select salesman.salesmanid,
         salesman.name,
         salesman.telephone,
         salesman.email,
         salesman.isactive,
         salesman.initialpercube,
         salesman.percube,
         salesman.initialpercent,
         salesman.percent
       from salesman
       into :opsalesmanid,
            :opname,
            :optelephone,
            :opemail,
            :opactive,
            :opinitpercube,
            :oppercube,
            :opinitpercent,
            :oppercent
   do suspend;

end^


ALTER PROCEDURE SPGET_SALESSUMMBT (
    IPSUMMTYPE INTEGER = null,
    IPFROMDATE DATE = null,
    IPTODATE DATE = null,
    IPPAYMETHODID INTEGER = null,
    IPGSTPERCENT DECIMAL(15,2) = null)
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPNUMDELIVERIES INTEGER,
    OPCUBICMETRES DECIMAL(18,1),
    OPTOTALVALUE DECIMAL(18,4))
AS
declare variable lcubic decimal(6,1);
declare variable lfeetotalex decimal(15,2);
declare variable lfeetotalinc decimal(15,2);
declare variable lbincount integer;
declare variable lextaxprice decimal(15,2);
BEGIN
  ipgstpercent = 1 + (ipgstpercent / 100);

  for select BINTYPE.BINTYPEID,
             BINTYPE.DESCRIPTION,
             BINTYPE.DCUBICMETRES
      from BINTYPE
      ORDER BY bintype.SORTORDER
      into :opid,
           :opdescription,
           :lcubic
      do begin
       opnumdeliveries = 0;
       optotalvalue = 0;
       opcubicmetres = 0;
       lfeetotalex = 0;
       lfeetotalinc = 0;
       for select job.BINS_OUT,
                 job.extaxprice,
                 (select sum(jobfee.amount) from jobfee where jobfee.jobid = job.jobid and jobfee.incex = 0),
                 (select sum(jobfee.amount) from jobfee where jobfee.jobid = job.jobid and jobfee.incex = 1)
          from JOB
          left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
          where job.BINTYPEID_OUT = :opid
            and job.jobdate >= :ipfromdate
            and job.jobdate <= :iptodate
            and job.JOBSTATUS = 3 /* done */
            and (:ippaymethodid = -1 or
                 jobpaydetails.paymethodid = :ippaymethodid or
                 (job.paydetid is null and job.paymethodid = :ippaymethodid))
          into :lbincount,
               :lextaxprice,
               :lfeetotalex,
               :lfeetotalinc
          do begin
            opnumdeliveries = opnumdeliveries + lbincount;
            optotalvalue = optotalvalue + (lbincount * lextaxprice);
            opcubicmetres = opcubicmetres + (lbincount * lcubic);
            if (lfeetotalex is not null)
            then optotalvalue = optotalvalue + lfeetotalex;
            if (lfeetotalinc is not null)
            then optotalvalue = optotalvalue + (lfeetotalinc / ipgstpercent);
          end
          suspend;
        end
end^


ALTER PROCEDURE SPGET_SALESSUMMCUST (
    IPSUMMTYPE INTEGER = null,
    IPFROMDATE DATE = null,
    IPTODATE DATE = null,
    IPPAYMETHODID INTEGER = null,
    IPGSTPERCENT DECIMAL(15,2) = null)
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(50),
    OPNUMDELIVERIES INTEGER,
    OPCUBICMETRES DECIMAL(18,1),
    OPTOTALVALUE DECIMAL(18,4))
AS
declare variable lfeetotalex decimal(15,2);
declare variable lfeetotalinc decimal(15,2);
declare variable lbincount integer;
declare variable lextaxprice decimal(15,2);
declare variable lbincubicmetres decimal(15,2);
BEGIN
  ipgstpercent = 1 + (ipgstpercent / 100);

  for select CUSTOMER.CUSTID,
             CUSTOMER.NAME
      from CUSTOMER
      ORDER BY CUSTOMER.NAME
      into :opid,
           :opdescription
      do begin
        opnumdeliveries = 0;
        opcubicmetres = 0;
        optotalvalue = 0;
        for select job.BINS_OUT,
                 job.extaxprice,
                 BINTYPE.DCUBICMETRES,
                 (select sum(jobfee.amount) from jobfee where jobfee.jobid = job.jobid and jobfee.incex = 0),
                 (select sum(jobfee.amount) from jobfee where jobfee.jobid = job.jobid and jobfee.incex = 1)
          from JOB
          left outer join BINTYPE on job.BINTYPEID_OUT = BINTYPE.BINTYPEID
          left outer join jobpaydetails on job.paydetid = jobpaydetails.paydetid
          where job.CUSTID = :opid
            and job.jobdate >= :ipfromdate
            and job.jobdate <= :iptodate
            and job.BINS_OUT > 0
            and job.JOBSTATUS = 3 /* done */
            and (:ippaymethodid = -1 or
                 jobpaydetails.paymethodid = :ippaymethodid or
                 (job.paydetid is null and job.paymethodid = :ippaymethodid))
          into :lbincount,
               :lextaxprice,
               :lbincubicmetres,
               :lfeetotalex,
               :lfeetotalinc
          do begin
            opnumdeliveries = opnumdeliveries + lbincount;
            opcubicmetres = opcubicmetres + (lbincount * lbincubicmetres);
            optotalvalue = optotalvalue + (lbincount * lextaxprice);
            if (lfeetotalex is not null)
            then optotalvalue = optotalvalue + lfeetotalex;
            if (lfeetotalinc is not null)
            then optotalvalue = optotalvalue + (lfeetotalinc / ipgstpercent);
          end   
          if (opnumdeliveries > 0)
          then SUSPEND;
    end
end^


ALTER PROCEDURE SPGET_SALESSUMMDRIV (
    IPSUMMTYPE INTEGER = null,
    IPFROMDATE DATE = null,
    IPTODATE DATE = null,
    IPPAYMETHODID INTEGER = null,
    IPGSTPERCENT DECIMAL(15,2) = null)
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPNUMDELIVERIES INTEGER,
    OPCUBICMETRES DECIMAL(18,1),
    OPTOTALVALUE DECIMAL(18,4),
    OPNUMCHANGEOVERS INTEGER,
    OPNUMPICKUPS INTEGER,
    OPNUMSERVICES INTEGER,
    OPNUMRELOCATIONS INTEGER)
AS
declare variable lrptid integer;
declare variable lbincount smallint;
declare variable ldriverid integer;
declare variable lprice decimal(18,4);
declare variable ljobtype integer;
declare variable lnumdo integer;
declare variable lnumco integer;
declare variable lnumpu integer;
declare variable lnumsvc integer;
declare variable lnumrel integer;
declare variable lpaydetid integer;
declare variable lpupaydetid integer;
declare variable lpaymethodid integer;
declare variable ljobpaymethodid integer;
declare variable ljobid integer;
declare variable lfeetotal decimal(15,2);
declare variable lfeeamount decimal(15,2);
BEGIN
  LRPTID = GEN_ID(TTSUMMGEN, 1);

  ipgstpercent = 1 + (ipgstpercent / 100);

  for select job.jobid, job.DRIVERID, job.BINS_OUT,
             job.extaxprice, /* BINTYPE.CUBICMETRES, */ job.JOBTYPE,
             job.paydetid,
             job.pupaydetid,
             job.paymethodid
          from JOB
          where job.jobdate >= :ipfromdate
            and job.jobdate <= :iptodate
            and job.JOBSTATUS = 3 /* done */
          into 
               :ljobid,
               :ldriverid,
               :lbincount,
               :lprice,
               :ljobtype,
               :lpaydetid,
               :lpupaydetid,
               :ljobpaymethodid 
          do begin

            /* are we are filtering by payment type then find the job's paymethod... */
            lpaymethodid = -1;
            if (ippaymethodid >= 0) then begin
              if (ljobtype = 3) then
                select jobpaydetails.paymethodid
                    from jobpaydetails
                    where jobpaydetails.paydetid = :lpupaydetid
                     into :lpaymethodid;
              else begin
                if (lpaydetid is null)
                then lpaymethodid = ljobpaymethodid;
                else select jobpaydetails.paymethodid
                    from jobpaydetails
                    where jobpaydetails.paydetid = :lpaydetid
                     into :lpaymethodid;
              end
            end

            if (lpaymethodid = ippaymethodid) then begin

              /* get the fee amount for this job */
              lfeetotal = 0;
              select sum(jobfee.amount) from jobfee where jobfee.jobid = :ljobid and jobfee.incex = 1
                 into :lfeeamount;
              if (lfeeamount is not null)
              then lfeetotal = lfeeamount / ipgstpercent;
              lfeeamount = 0;
              select sum(jobfee.amount) from jobfee where jobfee.jobid = :ljobid and jobfee.incex = 0
                 into :lfeeamount;
              if (lfeeamount is not null)
              then lfeetotal = lfeetotal + lfeeamount;

              LNUMDO = 0;
              lnumpu = 0;
              lnumco = 0;
              lnumsvc = 0;
              lnumrel = 0;
              if (ldriverid is not distinct from null) then ldriverid = 0;
              if (ljobtype = 1) then LNUMDO = 1;
              else if (ljobtype = 2) then lnumco = 1;
              else if (ljobtype = 3) then lnumpu = 1;
              else if (ljobtype = 4) then lnumsvc = 1;
              else if (ljobtype = 5) then BEGIN
                lnumrel = 1;
                /* relocations are priced as an overall total fee so we don't
                 * multiply it by the number of bins
                 */
                lbincount = 1;
              end
              update TTSUMMARY set numdelivered = numdelivered + :lnumdo,
                                 numchangeovers = numchangeovers + :lnumco,
                                 numpickups = numpickups + :lnumpu,
                                 numservices = numservices + :lnumsvc,
                                 numrelocations = numrelocations + :lnumrel,
                                 /* cubicmetres = cubicmetres + (:lbincount * :opcubicmetres), */
                                 totalvalue = totalvalue + (((:lbincount * :lprice) + :lfeetotal) * 100)
                             where TTSUMMARY.RPTID = :lrptid
                               and TTSUMMARY.ID = :ldriverid
                               and TTSUMMARY.CHARID = '';
              if (row_count = 0) then
               insert into TTSUMMARY (rptid, id, charid, numdelivered,
                                      numchangeovers, numpickups, numservices,
                                      numrelocations,
                                      dcubicmetres, totalvalue)
                            values (:lrptid, :ldriverid,
                                    '', :LNUMDO,
                                    :LNUMCO,
                                    :LNUMPU,
                                    :LNUMSVC,
                                    :LNUMREL,
                                    0,
                                    ((:lprice * :lbincount) + :lfeetotal) * 100);
            end
          end /* of paymethodid matches */
            
  opdescription = '';
  for select TTSUMMARY.id, TTSUMMARY.NUMDELIVERED,
             TTSUMMARY.TOTALVALUE / 100.0,
             TTSUMMARY.NUMCHANGEOVERS,
             TTSUMMARY.NUMPICKUPS,
             TTSUMMARY.NUMSERVICES,
             TTSUMMARY.NUMRELOCATIONS
             from TTSUMMARY
             where TTSUMMARY.RPTID = :lrptid
             into :opid,
                  :opnumdeliveries,
                  :optotalvalue,
                  :opnumchangeovers,
                  :opnumpickups,
                  :opnumservices,
                  :opnumrelocations
             do SUSPEND;
             
  /* finally clear up our entries in the 'temp-table' */
  delete from TTSUMMARY
    where TTSUMMARY.RPTID = :lrptid;

end^


ALTER PROCEDURE SPGET_SALESSUMMPA (
    IPSUMMTYPE INTEGER = null,
    IPFROMDATE DATE = null,
    IPTODATE DATE = null,
    IPPAYMETHODID INTEGER = null,
    IPGSTPERCENT DECIMAL(15,2) = null)
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPNUMDELIVERIES INTEGER,
    OPCUBICMETRES DECIMAL(18,1),
    OPTOTALVALUE DECIMAL(18,4))
AS
declare variable lrptid integer;
declare variable lbincount smallint;
declare variable lpriceareaid integer;
declare variable lprice decimal(18,4);
declare variable lpaymethodid integer;
declare variable lpaydetid integer;
declare variable ljobpaymethodid integer;
declare variable ljobid integer;
declare variable lfeeamount decimal(15,2);
declare variable lfeetotal decimal(15,2);
BEGIN
  LRPTID = GEN_ID(TTSUMMGEN, 1);

  ipgstpercent = 1 + (ipgstpercent / 100);

  for select job.jobid, job.BINS_OUT, job.PRICEAREAID, job.extaxprice,
             BINTYPE.DCUBICMETRES,
             job.paydetid,
             job.paymethodid
          from JOB
          left outer join BINTYPE
           on job.BINTYPEID_OUT = BINTYPE.BINTYPEID
          where job.jobdate >= :ipfromdate
            and job.jobdate <= :iptodate
            and job.BINS_OUT > 0
            and job.JOBSTATUS = 3 /* done */
          into :ljobid, 
               :lbincount,
               :lpriceareaid,
               :lprice,
               :opcubicmetres,
               :lpaydetid,
               :ljobpaymethodid
          do begin

            /* are we are filtering by payment type then find the job's paymethod... */
            lpaymethodid = -1;
            if (ippaymethodid >= 0) then begin
              if (lpaydetid is null)
              then lpaymethodid = ljobpaymethodid;
              else select jobpaydetails.paymethodid
                    from jobpaydetails
                    where jobpaydetails.paydetid = :lpaydetid
                     into :lpaymethodid;
            end

            if (lpaymethodid = ippaymethodid) then begin

              /* get the fee amount for this job */
              lfeetotal = 0;
              select sum(jobfee.amount) from jobfee where jobfee.jobid = :ljobid and jobfee.incex = 1
                 into :lfeeamount;
              if (lfeeamount is not null)
              then lfeetotal = lfeeamount / ipgstpercent;
              lfeeamount = 0;
              select sum(jobfee.amount) from jobfee where jobfee.jobid = :ljobid and jobfee.incex = 0
                 into :lfeeamount;
              if (lfeeamount is not null)
              then lfeetotal = lfeetotal + lfeeamount;

              update TTSUMMARY set numdelivered = numdelivered + :lbincount,
                                   dcubicmetres = dcubicmetres + (:lbincount * :opcubicmetres),
                                   totalvalue = totalvalue + (((:lbincount * :lprice) + :lfeetotal) * 100)
                             where TTSUMMARY.RPTID = :lrptid
                               and TTSUMMARY.ID = :lpriceareaid
                               and TTSUMMARY.CHARID = '';
              if (row_count = 0) then
                insert into TTSUMMARY (rptid, id, charid, numdelivered, dcubicmetres, totalvalue)
                            values (:lrptid, :lpriceareaid,
                                    '', :lbincount,
                                    :opcubicmetres * :lbincount,
                                    ((:lprice * :lbincount) + :lfeetotal) * 100);
            end  /* of if paymethods match */
          end
            
  opdescription = '';
  for select TTSUMMARY.id, TTSUMMARY.NUMDELIVERED,
             TTSUMMARY.DCUBICMETRES, TTSUMMARY.TOTALVALUE / 100.0
             from TTSUMMARY
             where TTSUMMARY.RPTID = :lrptid
             into :opid, :opnumdeliveries,
                  :opcubicmetres, :optotalvalue
             do SUSPEND;
             
  /* finally clear up our entries in the 'temp-table' */
  delete from TTSUMMARY
    where TTSUMMARY.RPTID = :lrptid;

end^


ALTER PROCEDURE SPGET_SALESSUMMSUB (
    IPSUMMTYPE INTEGER = null,
    IPFROMDATE DATE = null,
    IPTODATE DATE = null,
    IPPAYMETHODID INTEGER = null,
    IPGSTPERCENT DECIMAL(15,2) = null)
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(30),
    OPNUMDELIVERIES INTEGER,
    OPCUBICMETRES DECIMAL(18,1),
    OPTOTALVALUE DECIMAL(18,4))
AS
declare variable lrptid integer;
declare variable lbincount smallint;
declare variable lsuburb char(40);
declare variable lprice decimal(18,4);
declare variable lpaymethodid integer;
declare variable lpaydetid integer;
declare variable ljobpaymethodid integer;
declare variable ljobid integer;
declare variable lfeetotal decimal(15,2);
declare variable lfeeamount decimal(15,2);
BEGIN
  LRPTID = GEN_ID(TTSUMMGEN, 1);

  ipgstpercent = 1 + (ipgstpercent / 100);

  for select job.jobid, job.BINS_OUT, ADDRESS.TOWN, job.extaxprice,
             BINTYPE.DCUBICMETRES,
             job.paydetid,
             job.paymethodid
          from JOB
          left outer join BINTYPE
           on job.BINTYPEID_OUT = BINTYPE.BINTYPEID
          left outer join SORDER
           on job.orderid = SORDER.orderid
          left outer join address
           on sorder.DELADDRID = address.ADDRID
          where job.jobdate >= :ipfromdate
            and job.jobdate <= :iptodate
            and job.BINS_OUT > 0
            and job.JOBSTATUS = 3 /* done */
          into :ljobid,
               :lbincount,
               :lsuburb,
               :lprice,
               :opcubicmetres,
               :lpaydetid,
               :ljobpaymethodid
          do begin

            /* are we are filtering by payment type then find the job's paymethod... */
            lpaymethodid = -1;
            if (ippaymethodid >= 0) then begin
              if (lpaydetid is null)
              then lpaymethodid = ljobpaymethodid;
              else select jobpaydetails.paymethodid
                    from jobpaydetails
                    where jobpaydetails.paydetid = :lpaydetid
                     into :lpaymethodid;
            end

            if (lpaymethodid = ippaymethodid) then begin

              /* get the fee amount for this job */
              lfeetotal = 0;
              select sum(jobfee.amount) from jobfee where jobfee.jobid = :ljobid and jobfee.incex = 1
                 into :lfeeamount;
              if (lfeeamount is not null)
              then lfeetotal = lfeeamount / ipgstpercent;
              lfeeamount = 0;
              select sum(jobfee.amount) from jobfee where jobfee.jobid = :ljobid and jobfee.incex = 0
                 into :lfeeamount;
              if (lfeeamount is not null)
              then lfeetotal = lfeetotal + lfeeamount;

              update TTSUMMARY set numdelivered = numdelivered + :lbincount,
                                 dcubicmetres = dcubicmetres + (:lbincount * :opcubicmetres),
                                 totalvalue = totalvalue + (((:lbincount * :lprice) + :lfeetotal) * 100)
                             where TTSUMMARY.RPTID = :lrptid
                               and TTSUMMARY.ID = 1
                               and TTSUMMARY.CHARID = :lsuburb;
              if (row_count = 0) then
               insert into TTSUMMARY (rptid, id, charid, numdelivered, dcubicmetres, totalvalue)
                            values (:lrptid, 1,
                                    :lsuburb, :lbincount,
                                    :opcubicmetres * :lbincount,
                                    (((:lprice * :lbincount) + :lfeetotal) * 100.0));
            end  /* of paymethod if */
          end
            
  opid = 1;
  for select TTSUMMARY.charid, TTSUMMARY.NUMDELIVERED,
             TTSUMMARY.DCUBICMETRES, TTSUMMARY.TOTALVALUE / 100.0
             from TTSUMMARY
             where TTSUMMARY.RPTID = :lrptid
             into :opdescription, :opnumdeliveries,
                  :opcubicmetres, :optotalvalue
             do SUSPEND;
             
  /* finally clear up our entries in the 'temp-table' */
  delete from TTSUMMARY
    where TTSUMMARY.RPTID = :lrptid;

end^


ALTER PROCEDURE SPGET_SCRAPBATCHNO (
    IPDATE DATE = null)
RETURNS (
    OPBATCHNO INTEGER)
AS
BEGIN
  select INVOICEBATCH.INVBATCHNO
      from INVOICEBATCH
      where INVOICEBATCH.CREATEDDATE = :ipdate
        and INVOICEBATCH.REFID = 2000
        and INVOICEBATCH.EXPORTEDCOUNT = 0
      rows 1
      into :opbatchno;
  if (opbatchno is null)
  then opbatchno = 0;
  suspend;
END^


ALTER PROCEDURE SPGET_SITE (
    IPSITEID INTEGER = null)
RETURNS (
    OPSITEID INTEGER,
    OPDESCRIPTION CHAR(20),
    OPTIPSITE SMALLINT,
    OPVERSIONNO INTEGER,
    OPDEFAULTSITE INTEGER,
    OPINCLUDEDWEIGHT DECIMAL(5,3),
    OPINCLUDEDVOLUME DECIMAL(4,1),
    OPPRICEPERTON DECIMAL(6,2),
    OPPRICEPERCUBE DECIMAL(6,2))
AS
BEGIN
   for SELECT siteid, description, tipsite,
              versionno, DEFAULTSITE,
              site.includedweight,
              site.includedvolume,
              site.priceperton,
              site.pricepercube
FROM site
where site.siteid = :ipsiteid
INTO :opsiteid,
     :opdescription,
     :optipsite,
     :opversionno,
     :opDEFAULTSITE,
     :opincludedweight,
     :opincludedvolume,
     :oppriceperton,
     :oppricepercube
do
  SUSPEND;
end^


ALTER PROCEDURE SPGET_SITEBINBYINV (
    IPINVNO INTEGER,
    IPINVLINENO INTEGER)
RETURNS (
    OPJOBID INTEGER,
    OPFROMDATE DATE,
    OPTODATE DATE,
    OPINVNO BIGINT,
    OPINVLINENO INTEGER,
    OPBINTYPEID INTEGER,
    OPBINCOUNT INTEGER,
    OPBINPRICE DECIMAL(18,2),
    OPADDRID INTEGER,
    OPSTREETNUMBER CHAR(10),
    OPADDRESS1 CHAR(30),
    OPADDRESS2 CHAR(30),
    OPSUBURB CHAR(20),
    OPSTATE CHAR(30),
    OPPOSTCODE CHAR(10))
AS
begin
  for select sitebininvoices.jobid,
    sitebininvoices.fromdate,
    sitebininvoices.todate,
    sitebininvoices.invno,
    sitebininvoices.invlineno,
    sitebininvoices.bintypeid,
    sitebininvoices.bincount,
    job.rgweight,
    address.addrid,
    address.streetnumber,
    address.address1,
    address.address2,
    address.town,
    address.state,
    address.postcode
    from sitebininvoices
     left outer join job on sitebininvoices.jobid = job.jobid
     left outer join sorder on job.orderid = sorder.orderid
     left outer join address on sorder.deladdrid = address.addrid
    where sitebininvoices.invno = :ipinvno
      and sitebininvoices.invlineno = :ipinvlineno
     into :opjobid, 
          :opfromdate,
          :optodate,
          :opinvno,
          :opinvlineno,
          :opbintypeid,
          :opbincount,
          :opbinprice,
          :opaddrid, 
          :opstreetnumber,
          :opaddress1,
          :opaddress2,
          :opsuburb,
          :opstate,
          :oppostcode
  do suspend;
end^


ALTER PROCEDURE SPGET_SITEBINORDERS (
    IPFROMDATE DATE)
RETURNS (
    OPORDERID INTEGER)
AS
declare variable lsite integer;
begin
  for select sorder.orderid
            from sorder
            where sorder.complete = 0
            into :oporderid
  do begin
    /* do any of these orders have site bins */
    select job.sitebins
            from job
            where job.orderid = :oporderid
              and job.sitebins = 1
            rows 1
            into :LSITE;
    if (row_count > 0) then begin
      suspend;
    end
  end

  for select job.orderid
        from job
        where job.jobdate >= :ipfromdate
        into :oporderid
  do begin
    select job.sitebins
            from job
            where job.orderid = :oporderid
              and job.sitebins = 1
            rows 1
            into :LSITE;
    if (row_count > 0) then begin
      suspend;
    end
  end
end^


ALTER PROCEDURE SPGET_SITEBINSLASTINVOICE (
    IPJOBID INTEGER)
RETURNS (
    OPLASTINVDATE DATE)
AS
begin
  for select sitebininvoices.todate
        from sitebininvoices
        where sitebininvoices.jobid = :ipjobid
        order by sitebininvoices.todate desc
        rows 1
        into :oplastinvdate
  do suspend;
end^


ALTER PROCEDURE SPGET_SITEFOREMAN (
    IPCUSTOMERSITEID INTEGER)
RETURNS (
    OPCUSTSITEID INTEGER,
    OPFOREMANID INTEGER,
    OPNAME CHAR(40),
    OPCONTACTNUMBER CHAR(30))
AS
begin
  for select siteforeman.customersiteid,
        siteforeman.foremanid,
        siteforeman.name,
        siteforeman.contactnumber
        from siteforeman
        where siteforeman.customersiteid = :ipcustomersiteid
        into :opcustsiteid,
             :opforemanid,
             :opname,
             :opcontactnumber
  do suspend;
end^


ALTER PROCEDURE SPGET_SITES
RETURNS (
    OPSITEID INTEGER,
    OPDESCRIPTION CHAR(20),
    OPTIPSITE SMALLINT,
    OPVERSIONNO INTEGER,
    OPDEFAULTSITE INTEGER,
    OPINCLUDEDWEIGHT DECIMAL(5,3),
    OPINCLUDEDVOLUME DECIMAL(4,1),
    OPPRICEPERTON DECIMAL(6,2),
    OPPRICEPERCUBE DECIMAL(6,2))
AS
BEGIN
   for SELECT siteid, description, tipsite,
              versionno, defaultsite,
              site.includedweight,
              site.includedvolume,
              site.priceperton,
              site.pricepercube
FROM site
INTO :opsiteid,
     :opdescription,
     :optipsite,
     :opversionno,
     :opdefaultsite,
     :opincludedweight,
     :opincludedvolume,
     :oppriceperton,
     :oppricepercube
do
  SUSPEND;
end^


ALTER PROCEDURE SPGET_SITESOH (
    IPASATDATE DATE DEFAULT NULL)
RETURNS (
    OPSITEID INTEGER,
    OPBINTYPEID INTEGER,
    OPBINSFULL INTEGER,
    OPBINSEMPTY INTEGER)
AS
DECLARE VARIABLE LINEMPTY INTEGER;
DECLARE VARIABLE LINFULL INTEGER;
DECLARE VARIABLE LOUTEMPTY INTEGER;
DECLARE VARIABLE LOUTFULL INTEGER;
BEGIN
  for select SITESOH.siteid,
      SITESOH.BINTYPEID,
      sitesoh.BINSFULL,
      SITESOH.BINSEMPTY
      from sitesoh
      into :opsiteid, :opbintypeid, :opbinsfull, :opbinsempty
  do begin
  
  /* now get the adjustment figures */
    select sum(binmv.INEMPTY),
           sum(BINMV.INFULL)
           from BINMV
           where BINMV.tositeid = :opsiteid
             and BINMV.bintypeid = :opbintypeid
             and binmv.MOVEDATE > :ipasatdate
           into :linempty, :linfull;
    select sum(binmv.OUTEMPTY),
           sum(BINMV.OUTFULL)
           from BINMV
           where BINMV.fromsiteid = :opsiteid
             and BINMV.bintypeid = :opbintypeid
             and binmv.MOVEDATE > :ipasatdate
           into :loutempty, :loutfull;
    if (linempty is null)
    then linempty = 0;
    if (linfull is null)
    then linfull = 0;
    if (loutempty is null)
    then loutempty = 0;
    if (loutfull is null)
    then loutfull = 0;
    
    /* we minus the bins coming in and plus the bins going out
     * because we are undoing the normal running total that is
     * kept - we are stepping backwards
     */
    opbinsfull = opbinsfull - linfull + loutfull;
    opbinsempty = opbinsempty - linempty + loutempty;

    SUSPEND;
  end
END^


ALTER PROCEDURE SPGET_SMSFROMTO (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPSMSTYPE INTEGER,
    OPID INTEGER,
    OPTEXTMESSAGE CHAR(160),
    OPTIMESENT TIMESTAMP,
    OPSUCCESSFUL INTEGER,
    OPMOBILE CHAR(20))
AS
begin
  for select sms.SMSTYPE, sms.ID, SMS.TEXTMESSAGE,
             sms.TIMESENT, sms.SUCCESSFULLYSENT,
             sms.MOBILE
         from sms
         where sms.timesent >= :ipfromdate
           and sms.timesent <= :iptodate
         into :opsmstype, :opid, :optextmessage,
              :optimesent, :opsuccessful, :opmobile
  do SUSPEND;
end^


ALTER PROCEDURE SPGET_SMSFROMTOCOUNT (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPCOUNT INTEGER)
AS
declare variable lcount integer;
declare variable idexists integer;
begin
  /* if this month has already been counted then just return 0,
   * (this will be a nuisance if this sp is wanted to count the messages for
   * any other purpose, will then have to split this smssent check into a different
   * procedure)
   */
  idexists = 0;
  SELECT 1 FROM rdb$database WHERE
       EXISTS(SELECT * FROM smssent WHERE smssent.formonth = :ipfromdate)
       INTO :idexists;
  if (idexists = 1) then begin
    opcount = 0;
  end
  else begin
    for select count(sms.id)
         from sms
         where sms.timesent >= :ipfromdate
           and sms.timesent <= :iptodate
         into :lcount
       do opcount = lcount;
  end

  suspend;
end^


ALTER PROCEDURE SPGET_SMSS (
    IPSMSTYPE INTEGER DEFAULT NULL,
    IPID INTEGER DEFAULT NULL)
RETURNS (
    OPSMSTYPE INTEGER,
    OPID INTEGER,
    OPTEXTMESSAGE CHAR(160),
    OPTIMESENT TIMESTAMP,
    OPSUCCESSFUL INTEGER,
    OPMOBILE CHAR(20))
AS
BEGIN
  for select sms.SMSTYPE, sms.ID, SMS.TEXTMESSAGE,
             sms.TIMESENT, sms.SUCCESSFULLYSENT,
             sms.MOBILE
         from sms
         where sms.SMSTYPE = :ipsmstype
           and sms.ID = :ipid
         rows 50  /* to stop it going forever */
         into :opsmstype, :opid, :optextmessage,
              :optimesent, :opsuccessful, :opmobile
  do SUSPEND;
END^


ALTER PROCEDURE SPGET_SMSTEMPLATES
RETURNS (
    OPID INTEGER,
    OPDESCRIPTION CHAR(30) CHARACTER SET ASCII,
    OPTHETEXT CHAR(170) CHARACTER SET ASCII)
AS
BEGIN
  for select SMSTEMPLATE.id,
         SMSTEMPLATE.DESCRIPTION,
         SMSTEMPLATE.THETEXT
         from SMSTEMPLATE
         into :opid, :opdescription, :opthetext
  do SUSPEND;
END^


ALTER PROCEDURE SPGET_STAFFACTIVITY (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPUSERID INTEGER,
    OPUSERNAME CHAR(50),
    OPNEWORDERCOUNT INTEGER)
AS
begin
  for select bwuser.userid, bwuser.fullname
    from bwuser
    where bwuser.isactive = 0 or
          bwuser.isactive = 1     /* 2 is a machine so ignore them */
    into :opuserid, :opusername
  do begin
    for select count(job.jobid)
       from job
       where job.jobdate >= :ipfromdate
         and job.jobdate <= :iptodate
         and job.userid = :opuserid
        into :opnewordercount
    do begin
      if (
          :opnewordercount > 0)
      then suspend;
    end
  end
end^


ALTER PROCEDURE SPGET_STAKE_BIN_DATES
RETURNS (
    OPSDATE DATE,
    OPCOMMENT CHAR(40))
AS
BEGIN
  for select STOCKTAKE_BINTYPE_DATES.SDATE,
         STOCKTAKE_BINTYPE_DATES.SCOMMENT
         from STOCKTAKE_BINTYPE_DATES
         order by STOCKTAKE_BINTYPE_DATES.SDATE DESCENDING
         rows 50
         into :opsdate, :opcomment
  do SUSPEND;
END^


ALTER PROCEDURE SPGET_STAKEFINDCURRENT (
    IPDATE DATE DEFAULT NULL)
RETURNS (
    OPDATE DATE)
AS
BEGIN
  select STOCKTAKE_BINTYPE_DATES.SDATE
      from STOCKTAKE_BINTYPE_DATES
      where STOCKTAKE_BINTYPE_DATES.SDATE < :ipdate
      order by STOCKTAKE_BINTYPE_DATES.SDATE descending
      rows 1
      into :opdate;
  suspend;
  /* could do it one call if needed to go quicker
  for select STOCKTAKE_BINTYPE_LINES.BINTYPEID,
      STOCKTAKE_BINTYPE_LINES.TOTALBINS
      from STOCKTAKE_BINTYPE_LINES
      where STOCKTAKE_BINTYPE_LINES.SDATE = :opdate
      into opbintypeid, optotalbins
  do SUSPEND;
  */
END^


ALTER PROCEDURE SPGET_STOCKTAKE_BINTYPE_LINES (
    IPDATE DATE DEFAULT NULL)
RETURNS (
    OPBINTYPEID INTEGER,
    OPSITEID INTEGER,
    OPTOTALBINS INTEGER,
    OPBINSAVAILFULL INTEGER,
    OPBINSAVAILEMPTY INTEGER)
AS
BEGIN
  for select STOCKTAKE_BINTYPE_LINES.BINTYPEID,
             STOCKTAKE_BINTYPE_LINES.SITEID,
             STOCKTAKE_BINTYPE_LINES.TOTALBINS,
             STOCKTAKE_BINTYPE_LINES.BINSAVAILABLEFULL,
             STOCKTAKE_BINTYPE_LINES.BINSAVAILABLEEMPTY
     from STOCKTAKE_BINTYPE_LINES
     where STOCKTAKE_BINTYPE_LINES.SDATE = :ipdate
     into :opbintypeid, :opsiteid, :optotalbins,
          :opbinsavailfull, :opbinsavailempty
  do SUSPEND;

END^


ALTER PROCEDURE SPGET_STOCKTAKE_FROMTO (
    IPFROMDATE DATE DEFAULT NULL,
    IPTODATE DATE DEFAULT NULL)
RETURNS (
    OPSTAKEDATE DATE,
    OPCOMMENT CHAR(40),
    OPBINTYPEID INTEGER,
    OPSITEID INTEGER,
    OPTOTALBINS INTEGER,
    OPBINSAVAILFULL INTEGER,
    OPBINSAVAILEMPTY INTEGER)
AS
DECLARE VARIABLE LDATE DATE;
BEGIN
  select STOCKTAKE_BINTYPE_DATES.SDATE
      from STOCKTAKE_BINTYPE_DATES
      where STOCKTAKE_BINTYPE_DATES.SDATE < :ipfromdate
      order by STOCKTAKE_BINTYPE_DATES.SDATE descending
      rows 1
      into :ldate;
  if (row_count = 0) then LDATE = ipfromdate;
  for select STOCKTAKE_BINTYPE_DATES.SDATE,
             stocktake_bintype_dates.SCOMMENT
     from STOCKTAKE_BINTYPE_DATES
     where STOCKTAKE_BINTYPE_DATES.sdate >= :ldate
       and STOCKTAKE_BINTYPE_DATES.SDATE <= :iptodate
     into :opstakedate, :opcomment
  do begin
    for select STOCKTAKE_BINTYPE_LINES.BINTYPEID,
               STOCKTAKE_BINTYPE_LINES.SITEID,
           STOCKTAKE_BINTYPE_LINES.TOTALBINS,
           STOCKTAKE_BINTYPE_LINES.BINSAVAILABLEFULL,
             STOCKTAKE_BINTYPE_LINES.BINSAVAILABLEEMPTY
           from STOCKTAKE_BINTYPE_LINES
           where STOCKTAKE_BINTYPE_LINES.SDATE = :OPSTAKEDATE
           into :opbintypeid, :opsiteid, :optotalbins,
                :opbinsavailfull, :opbinsavailempty
    do SUSPEND;
  end
END^


ALTER PROCEDURE SPGET_STREETCOORDS (
    IPSTREETID INTEGER)
RETURNS (
    OPPAGENUMBER INTEGER,
    OPMAPREF CHAR(5))
AS
begin
  for select streets.pagenumber, streets.mapreference
         from streets
         where streets.streetid = :ipstreetid
         into :oppagenumber,
              :opmapref
  do suspend;
end^


ALTER PROCEDURE SPGET_STREETSMATCHING (
    IPSTATE CHAR(30),
    IPSUBURB CHAR(40),
    IPPOSTCODE CHAR(10),
    IPSTREETNAME VARCHAR(45))
RETURNS (
    OPINSTATE CHAR(30),
    OPINSUBURB CHAR(40),
    OPINPOSTCODE CHAR(10),
    OPSTREETNAME CHAR(45),
    OPSTREETDESIGNATOR CHAR(10),
    OPSTREETID INTEGER)
AS
declare variable lsuburb char(30);
declare variable lstreetname varchar(45);
declare variable retit integer;
declare variable ldbsubname char(40);
begin

  lsuburb = lower(ipsuburb);
  lstreetname = lower(ipstreetname);

    for select streets.streetname, streets.designator,
           suburbs.suburbname, suburbs.postcode, suburbs.state,
           suburbs.lcname, streets.streetid
          from streets
          left outer join suburbs on streets.suburbid = suburbs.suburbid
          where streets.lcstreetname starting :lstreetname
          into :opstreetname,
               :opstreetdesignator,
               :opinsuburb,
               :opinpostcode,
               :opinstate,
               :ldbsubname,
               :opstreetid
     do begin
       retit = 1;
       if (ipsuburb != '' and ldbsubname != lsuburb)
       then retit = 0;
       if (retit = 1 and ippostcode != '' and opinpostcode != ippostcode)
       then retit = 0;
       if (retit = 1 and ipstate != '' and opinstate != ipstate)
       then retit = 0;
       if (retit = 1)
       then suspend;
     end

end^


ALTER PROCEDURE SPGET_SUBURB (
    IPSUBURBNAME VARCHAR(40) CHARACTER SET ASCII = null,
    IPPOSTCODE VARCHAR(5) CHARACTER SET ASCII = null,
    IPSTATE VARCHAR(30) CHARACTER SET ASCII = null)
RETURNS (
    OPLONG BIGINT,
    OPLAT BIGINT)
AS
declare variable lc char(40);
BEGIN

LC = lower(ipsuburbname);
select suburbs.LONGITUDE, SUBURBS.LATITUDE
      FROM SUBURBS
  where SUBURBS.LCNAME = :LC
    and suburbs.POSTCODE = :ippostcode
    and SUBURBS.STATE = :ipstate
  INTO :oplong, :oplat;
SUSPEND;
  
END^


ALTER PROCEDURE SPGET_SUBURBSBYPCODE (
    IPPOSTCODE VARCHAR(5) CHARACTER SET ASCII)
RETURNS (
    OPSUBURB VARCHAR(40) CHARACTER SET ASCII,
    OPPOSTCODE VARCHAR(5) CHARACTER SET ASCII,
    OPSTATE VARCHAR(30) CHARACTER SET ASCII,
    OPLONG BIGINT,
    OPLAT BIGINT,
    OPSUBURBID INTEGER,
    OPFIREANTAREA INTEGER)
AS
BEGIN

  for select SUBURBS.SUBURBNAME, SUBURBS.POSTCODE, SUBURBS.STATE,
             SUBURBS.LONGITUDE, SUBURBS.LATITUDE, suburbs.SUBURBID,
             suburbs.fireantarea
         from SUBURBS
         where SUBURBS.POSTCODE = :ippostcode
         into :opsuburb, :oppostcode, :opstate,
              :oplong, :oplat, :opsuburbid,
              :opfireantarea
         do SUSPEND;

end^


ALTER PROCEDURE SPGET_SUBURBSBYSTATE (
    IPSTATE VARCHAR(30) CHARACTER SET ASCII)
RETURNS (
    OPSUBURB VARCHAR(40) CHARACTER SET ASCII,
    OPPOSTCODE VARCHAR(5) CHARACTER SET ASCII,
    OPSTATE VARCHAR(30) CHARACTER SET ASCII,
    OPLONG BIGINT,
    OPLAT BIGINT,
    OPSUBURBID INTEGER,
    OPFIREANTAREA INTEGER)
AS
BEGIN

  for select SUBURBS.SUBURBNAME, SUBURBS.POSTCODE, SUBURBS.STATE,
             SUBURBS.LONGITUDE, SUBURBS.LATITUDE, suburbs.SUBURBID,
             suburbs.fireantarea
         from SUBURBS
         where SUBURBS.STATE = :ipstate
         into :opsuburb, :oppostcode, :opstate,
              :oplong, :oplat, :opsuburbid,
              :opfireantarea
         do SUSPEND;

end^


ALTER PROCEDURE SPGET_SWCODES
RETURNS (
    OPSWCODEID INTEGER,
    OPSWCODENO CHAR(10),
    OPDESCRIPTION CHAR(150),
    OPSERVICETYPE CHAR(40),
    OPBINTYPEID INTEGER,
    OPBINFORMATID INTEGER,
    OPPRICEPER INTEGER,
    OPRATE DECIMAL(8,2),
    OPFLAGS INTEGER,
    OPSORTORDER INTEGER)
AS
begin
  for select swcodes.swcodesid,
         swcodes.swcodeno,
         swcodes.desclong,
         swcodes.servicetype,
         swcodes.bintypeid,
         swcodes.binformatid,
         swcodes.pricedper,
         swcodes.rate,
         swcodes.flags,
         swcodes.sortorder
       from swcodes
       into :opswcodeid,
            :opswcodeno,
            :opdescription,
            :opservicetype,
            :opbintypeid,
            :opbinformatid,
            :oppriceper,
            :oprate,
            :opflags,
            :opsortorder
  do suspend;
end^


ALTER PROCEDURE SPGET_SWORDERBYJOBID (
    IPJOBID INTEGER)
RETURNS (
    OPSWORDERID INTEGER,
    OPREQUESTDATE DATE,
    OPSWCODEID INTEGER,
    OPDELIVEREDSWCODEID INTEGER,
    OPDEPTCODE CHAR(12),
    OPMAXIMO CHAR(30),
    OPPROJECTID CHAR(30),
    OPBINSORDERED INTEGER,
    OPJOBID INTEGER,
    OPCUSTID INTEGER,
    OPORDERID INTEGER,
    OPDEPOTNO CHAR(12),
    OPREQUESTORPH CHAR(30),
    OPJOBTYPE INTEGER,
    OPREQUESTOR CHAR(30),
    OPSITECONTACTPERSON CHAR(30),
    OPSITECONTACTNUMBER CHAR(30),
    OPUNITS DECIMAL(15,2))
AS
begin
  for select sworder.sworderid,
         sworder.requestdate,
         sworder.swcodeid,
         sworder.deliveredswcodeid,
         sworder.deptcode,
         sworder.maximoworkorderno,
         sworder.projectid,
         sworder.binsordered,
         sworder.jobid,
         sworder.custid,
         sworder.orderid,
         sworder.depotno,
         sworder.requestorphone,
         sworder.jobtype,
         sworder.requestor,
         sworder.sitecontactperson,
         sworder.sitecontactnumber,
         sworder.units
       from sworder
       where sworder.jobid = :ipjobid
       into :opsworderid,
            :oprequestdate,
            :opswcodeid,
            :opdeliveredswcodeid,
            :opdeptcode,
            :opmaximo,
            :opprojectid,
            :opbinsordered,
            :opjobid,
            :opcustid,
            :oporderid,
            :opdepotno,
            :oprequestorph,
            :opjobtype,
            :oprequestor,
            :opsitecontactperson,
            :opsitecontactnumber,
            :opunits
  do suspend;
end^


ALTER PROCEDURE SPGET_SYSFLAG (
    IPSUBJECT CHAR(25) DEFAULT NULL)
RETURNS (
    OPDATA CHAR(140))
AS
BEGIN
for SELECT data
FROM Sysflag
where subject = :ipsubject
INTO :opdata
do SUSPEND;
END^


ALTER PROCEDURE SPGET_SYSFLAGS
RETURNS (
    OPDATA CHAR(140))
AS
BEGIN
   for SELECT sysflag.DATA
FROM sysflag
order by sysflag.SUBJECT
INTO :opdata
do
  SUSPEND;
END^


ALTER PROCEDURE SPGET_TAREWT (
    IPREGO CHAR(20))
RETURNS (
    OPREGO CHAR(20),
    OPTAREWT DECIMAL(12,2),
    OPTRAILERREGO CHAR(20))
AS
begin
  for select tarewt.rego, tarewt.thetarewt, tarewt.trailerrego
        from tarewt
        where tarewt.rego = :iprego
        into :oprego, :optarewt, :optrailerrego
  do suspend;
end^


ALTER PROCEDURE SPGET_TERM (
    IPTERMSID INTEGER DEFAULT NULL)
RETURNS (
    OPTERMSID INTEGER,
    OPDESCRIPTION CHAR(20))
AS
BEGIN
for SELECT termsid, description
FROM TERMS
where termsid = :iptermsid
INTO :optermsid, :opdescription
do SUSPEND;
END^


ALTER PROCEDURE SPGET_TERMS
RETURNS (
    OPTERMSID INTEGER,
    OPDESCRIPTION CHAR(20))
AS
BEGIN
   for SELECT termsid, description
FROM terms
INTO :optermsid, :opdescription
do
  SUSPEND;
END^


ALTER PROCEDURE SPGET_TEST
RETURNS (
    ID INTEGER,
    OCUSTID INTEGER,
    OJOBID INTEGER,
    OJOBDATE DATE)
AS
BEGIN
  for select sorder.orderid, sorder.custid
      from SORDER
      where sorder.orderid = 54
      into
      :id, :ocustid
      do begin
  for select job.jobid, job.jobdate
    from JOB
    where job.orderid = :id
    into :ojobid, :ojobdate
    do SUSPEND;
end
END^


ALTER PROCEDURE SPGET_TIPBATCHNO (
    IPDATE DATE = null,
    IPTIPSITEID INTEGER = null)
RETURNS (
    OPBATCHNO INTEGER)
AS
BEGIN
  select INVOICEBATCH.INVBATCHNO
      from INVOICEBATCH
      where INVOICEBATCH.CREATEDDATE = :ipdate
        and INVOICEBATCH.REFID = :iptipsiteid
        and INVOICEBATCH.EXPORTEDCOUNT = 0
      rows 1
      into :opbatchno;
  if (opbatchno is null)
  then opbatchno = 0;
  suspend;
END^


ALTER PROCEDURE SPGET_TIPFEEBYINV (
    IPINVNO INTEGER DEFAULT NULL,
    IPINVLINENO INTEGER DEFAULT NULL)
RETURNS (
    OPTFID INTEGER,
    OPTIPID INTEGER,
    OPFEEID INTEGER,
    OPEXAMOUNT DECIMAL(12,2),
    OPINCEX SMALLINT,
    OPINVNO INTEGER,
    OPINVLINENO INTEGER,
    OPINCAMOUNT DECIMAL(12,2))
AS
BEGIN
  for select tipfee.ID,
      TIPFEE.TIPID,
      TIPFEE.FEEID,
      TIPFEE.EXAMOUNT,
      TIPFEE.INCEX,
      TIPFEE.INVNO,
      TIPFEE.INVLINENO,
      tipfee.INCAMOUNT
      from TIPFEE
      where TIPFEE.invno = :ipinvno
        and tipfee.invlineno = :ipinvlineno
      into :optfid, :optipid, :opfeeid,
           :opexamount, :opincex,
           :opinvno, :opinvlineno,
           :opincamount
  do SUSPEND;
END^


ALTER PROCEDURE SPGET_TIPFEES (
    IPTIPID INTEGER DEFAULT NULL)
RETURNS (
    OPTFID INTEGER,
    OPTIPID INTEGER,
    OPFEEID INTEGER,
    OPEXAMOUNT DECIMAL(18,2),
    OPINCEX SMALLINT,
    OPINVNO INTEGER,
    OPINVLINENO INTEGER,
    OPINCAMOUNT DECIMAL(12,2))
AS
BEGIN
  for select tipfee.ID,
      TIPFEE.TIPID,
      TIPFEE.FEEID,
      TIPFEE.EXAMOUNT,
      TIPFEE.INCEX,
      TIPFEE.INVNO,
      TIPFEE.INVLINENO,
      tipfee.INCAMOUNT
      from TIPFEE
      where TIPFEE.TIPID = :iptipid
      into :optfid, :optipid, :opfeeid,
           :opexamount, :opincex,
           :opinvno, :opinvlineno,
           :opincamount
  do SUSPEND;
END^


ALTER PROCEDURE SPGET_TIPNEXTDDNO (
    IPWHICHSEQUENCE INTEGER)
RETURNS (
    OPNEXTDDNO INTEGER)
AS
begin
  if (ipwhichsequence = 0) then
    SELECT GEN_ID( GENTIPDDNO, 1 )
         FROM RDB$DATABASE
         into :OPNEXTDDNO;
  else SELECT GEN_ID( GENTIPDDNOSEQ2, 1 )
         FROM RDB$DATABASE
         into :OPNEXTDDNO;
  SUSPEND;
end^


ALTER PROCEDURE SPGET_TIPREGOS (
    IPCUSTID INTEGER,
    IPFROMDATE DATE)
RETURNS (
    OPREGO CHAR(20),
    OPTAREWEIGHT DECIMAL(15,2),
    OPTRAILERREGO CHAR(20),
    OPTRAILERTARE DECIMAL(15,2))
AS
begin
  for select tip.rego, tip.tareweight, tip.trailerrego, tip.tareweight2
       from tip
       where tip.custid = :ipcustid
         and tip.ddate >= :ipfromdate
       into :oprego, :optareweight, :optrailerrego, :optrailertare
  do suspend;
end^


ALTER PROCEDURE SPGET_TIPSITES
RETURNS (
    OPTIPSITEID INTEGER,
    OPDESCRIPTION CHAR(40),
    OPRULES CHAR(1000),
    OPDEFDEST INTEGER,
    OPFLAGS INTEGER,
    OPEPLNUMBER VARCHAR(40))
AS
BEGIN
  for select TIPSITE.TIPSITEID,
             TIPSITE.DESCRIPTION,
             tipsite.rules,
             tipsite.defdesttipsiteid,
             tipsite.flags,
             tipsite.eplnumber
      from tipsite
      into :optipsiteid,
           :opdescription,
           :oprules,
           :opdefdest,
           :opflags,
           :opeplnumber
  DO SUSPEND;
END^


ALTER PROCEDURE SPGET_TRUCK (
    IPTRUCKID INTEGER = null)
RETURNS (
    OPTRUCKID INTEGER,
    OPDESCRIPTION CHAR(12) CHARACTER SET ASCII,
    OPVEHICLEID CHAR(12))
AS
BEGIN
  for select TRUCK.TRUCKID, TRUCK.DESCRIPTION, truck.vehicleid
     from TRUCK
     where TRUCK.TRUCKID = :iptruckid
     into :optruckid, :opdescription, :opvehicleid
     do
  SUSPEND;
END^


ALTER PROCEDURE SPGET_TRUCKANDDOGSFROMTO (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPTRUCKANDDOGID INTEGER,
    OPJOBDATE DATE,
    OPTRAVELFROM CHAR(50),
    OPTRAVELTO CHAR(50),
    OPDOCKETNO CHAR(20),
    OPCOMMENT CHAR(200),
    OPDRIVERID INTEGER,
    OPJOBSTATUS INTEGER,
    OPDOGTRUCKID INTEGER,
    OPORDERDAYSEQNO INTEGER)
AS
begin
  for select truckanddog.truckanddogid,
        truckanddog.jobdate,
        truckanddog.travelfrom,
        truckanddog.travelto,
        truckanddog.docketno,
        truckanddog.comment,
        truckanddog.driverid,
        truckanddog.jobstatus,
        truckanddog.dogtruckid,
        truckanddog.orderdayseqno
      from truckanddog
      where truckanddog.jobdate >= :ipfromdate
        and truckanddog.jobdate <= :iptodate
      into :optruckanddogid,
           :opjobdate,
           :optravelfrom,
           :optravelto,
           :opdocketno,
           :opcomment,
           :opdriverid,
           :opjobstatus,
           :opdogtruckid,
           :oporderdayseqno
      do suspend;
end^


ALTER PROCEDURE SPGET_TRUCKANDDOGSONDAY2 (
    IPFORDATE DATE)
RETURNS (
    OPTRUCKANDDOGID INTEGER,
    OPJOBDATE DATE,
    OPTRAVELFROM CHAR(50),
    OPTRAVELTO CHAR(50),
    OPDOCKETNO CHAR(20),
    OPCOMMENT CHAR(200),
    OPDRIVERID INTEGER,
    OPJOBSTATUS INTEGER,
    OPDOGTRUCKID INTEGER,
    OPORDERDAYSEQNO INTEGER)
AS
begin
  for select truckanddog.truckanddogid,
        truckanddog.jobdate,
        truckanddog.travelfrom,
        truckanddog.travelto,
        truckanddog.docketno,
        truckanddog.comment,
        truckanddog.driverid,
        truckanddog.jobstatus,
        truckanddog.dogtruckid,
        truckanddog.orderdayseqno
      from truckanddog
      where truckanddog.jobdate = :ipfordate
      into :optruckanddogid,
           :opjobdate,
           :optravelfrom,
           :optravelto,
           :opdocketno,
           :opcomment,
           :opdriverid,
           :opjobstatus,
           :opdogtruckid,
           :oporderdayseqno
      do suspend;
end^


ALTER PROCEDURE SPGET_TRUCKDRIVERS (
    IPDDATE DATE = null)
RETURNS (
    OPDDATE DATE,
    OPDRIVERID INTEGER,
    OPTRUCKID INTEGER)
AS
declare variable ldate date;
BEGIN
  /* this new (29/7/10) version doesn't assume that each driver-truck link has been saved everyday
   * [it is from the runsheet->Assign Trucks screen but it isn't in the Driver Reconciliation
   * screen] so it now looks for the last (by date) record for each driverid and returns
   * that
   */
  for select driver.driverid from driver
       where driver.finishdate > :ipddate
       into :opdriverid
   do begin
     for select truckdriver.ddate, truckdriver.truckid
         from truckdriver
         where truckdriver.driverid = :opdriverid
           and truckdriver.ddate <= :ipddate
         order by truckdriver.ddate descending
         rows 1
         into :opddate, :optruckid
      do suspend;
   end

  /*
SELECT TRUCKDRIVER.DDATE
  FROM TRUCKDRIVER
  where TRUCKDRIVER.DDATE <= :ipddate
  order by TRUCKDRIVER.DDATE DESCENDING
  rows 1
  INTO :ldate;

  for SELECT TRUCKDRIVER.DDATE,
             TRUCKDRIVER.DRIVERID,
             TRUCKDRIVER.TRUCKID
FROM TRUCKDRIVER
where TRUCKDRIVER.DDATE = :ldate
INTO :opddate,
     :opdriverid,
     :optruckid
do SUSPEND;
 */
end^


ALTER PROCEDURE SPGET_TRUCKS
RETURNS (
    OPTRUCKID INTEGER,
    OPDESCRIPTION CHAR(12) CHARACTER SET ASCII,
    OPVEHICLEID CHAR(12))
AS
BEGIN
  for select TRUCK.TRUCKID, TRUCK.DESCRIPTION, truck.vehicleid
     from TRUCK
     into :optruckid, :opdescription, :opvehicleid
     do
  SUSPEND;
END^


ALTER PROCEDURE SPGET_UNAVAIL_POS_FOR_CUST_ADDR (
    IP_CUSTID INTEGER,
    IP_ADDRID INTEGER)
RETURNS (
    OP_PO VARCHAR(100))
AS
begin
  for 
  select pop.PO_NUMBER from PO_NUMBER_POOL pop
    where pop.custid = :IP_CUSTID and pop.addrid = :IP_ADDRID 
    and pop.PO_NUMBER in (select j.CUSTREFERENCE from job j 
              join sorder o on j.ORDERID = o.ORDERID
                  where j.CUSTID is not null and j.CUSTID = :IP_CUSTID 
                  and o.DELADDRID = :IP_ADDRID and CHAR_LENGTH(TRIM(j.CUSTREFERENCE)) > 0)
    into :OP_PO
   do suspend;
end^


ALTER PROCEDURE SPGET_USERS
RETURNS (
    OPUSERID INTEGER,
    OPUSERNAME CHAR(50),
    OPFULLNAME CHAR(50),
    OPISACTIVE SMALLINT,
    OPDEPTID INTEGER,
    OPENCPASSWD CHAR(60),
    OPPERMISSIONS BIGINT,
    OPFONTFORDEL CHAR(50),
    OPFONTFORCO CHAR(50),
    OPFONTFORPU CHAR(50),
    OPFONTFORWL CHAR(50))
AS
BEGIN
  for select bwuser.USERID,
      bwuser.USERNAME,
      bwuser.FULLNAME,
      bwuser.DEPTID,
      bwuser.ISACTIVE,
      bwuser.ENCPASSWORD,
      bwuser.permissions,
      bwuser.fontfordel,
      bwuser.fontforco,
      bwuser.fontforpu,
      bwuser.fontforwl
      from bwuser
      into :opuserid,
           :opusername,
           :opfullname,
           :opdeptid,
           :opisactive,
           :opencpasswd,
           :oppermissions,
           :opfontfordel,
           :opfontforco,
           :opfontforpu,
           :opfontforwl
  do suspend;
END^


ALTER PROCEDURE SPGET_VOLPICKEDUP (
    IPFROMDATE DATE,
    IPTODATE DATE)
RETURNS (
    OPDATE DATE,
    OPSITEID INTEGER,
    OPVOLUME DECIMAL(15,2))
AS
declare variable lsiteid integer;
declare variable lbincount integer;
declare variable lcm decimal(15,2);
declare variable lrptid integer;
begin
  LRPTID = GEN_ID(TTSUMMGEN, 1);
  OPDATE = ipfromdate;
  while (opdate <= iptodate) do begin
    for select job.tositeid,
               job.BINS_in,
               BINTYPE.DCUBICMETRES
          from JOB
          left outer join BINTYPE
           on job.BINTYPEID_IN = BINTYPE.BINTYPEID
          where job.jobdate = :OPDATE
            and job.JOBSTATUS = 3 /* done */
            and job.bins_in > 0  /* pickups and changeovers */
          into 
               :lsiteid,
               :lbincount,
               :lcm
          do begin
            update TTSUMMARY set ttsummary.dcubicmetres = ttsummary.dcubicmetres +
                                    (:lbincount * :lcm)
                             where TTSUMMARY.RPTID = :lrptid
                               and TTSUMMARY.ID = :lsiteid
                               and TTSUMMARY.CHARID = '';
            if (row_count = 0) then
               insert into TTSUMMARY (rptid, id, charid,
                                      dcubicmetres)
                            values (:lrptid, :lsiteid,
                                    '',
                                    :lbincount * :lcm);
          end

      for select TTSUMMARY.id,
             TTSUMMARY.dcubicmetres
             from TTSUMMARY
             where TTSUMMARY.RPTID = :lrptid
             into :opsiteid,
                  :opvolume
             do SUSPEND;
             
     /* finally clear up our entries in the 'temp-table' for this day */
     delete from TTSUMMARY
            where TTSUMMARY.RPTID = :lrptid;

     opdate = opdate + 1;
  end

end^


ALTER PROCEDURE SPSAVE_ADDRFIND (
    IPORDERID INTEGER,
    IPSUBURB CHAR(30),
    IPSTREETNAME CHAR(30),
    IPSTREETNUMBER CHAR(10),
    IPADDRID INTEGER)
AS
declare variable lcstreet char(30);
declare variable lcstreetdesignator char(1);
declare variable lcsuburb char(30);
declare variable lpos integer;
declare variable lcstreetnumber char(10);
begin

  /* these next two blocks are also in spget_matchaddrs so any changes made to
    * these two blocks should be reflected in there as well
    */
  lcsuburb = lower(ipsuburb);
  lcstreetdesignator = '';
  lcstreetnumber = lower(ipstreetnumber);

  /* get just the first word of the street variable into streetname, and
   * then the first letter of the next word into street designator.
   * This means we should have the street name itself in street name and
   * 'r' or 's' or something into the designator. This is so that when we
   * search then Road will match Rd, St will match Street...
   */
  /* lpos = position(' ' in ipstreetname); <- needs fb serve 2.1 :-(  */
  execute procedure pos (' ', ipstreetname) returning_values :lpos;
  if (lpos > 0) then begin
    lcstreet = lower(substring(ipstreetname from 1 for lpos - 1));
    if (char_length(trim(ipstreetname)) > lpos + 1)
    then lcstreetdesignator = lower(substring(ipstreetname from lpos + 1 for 1));
  end
  else lcstreet = lower(ipstreetname);

  update addrfind
     set addrfind.lcsuburb = :lcsuburb,
         addrfind.lcstreetname = :lcstreet, 
         addrfind.lcstreetnumber = :lcstreetnumber,
         addrfind.lcstreetdesignator = :lcstreetdesignator
       where addrfind.orderid = :iporderid;
  if (row_count = 0)
  then insert into addrfind
            (addrfind.orderid,
             addrfind.addrid,
             addrfind.lcsuburb,
             addrfind.lcstreetname,
             addrfind.lcstreetnumber,
             addrfind.lcstreetdesignator)
          values
            (:iporderid,
             :ipaddrid,
             :lcsuburb,
             :lcstreet,
             :lcstreetnumber,
             :lcstreetdesignator);
end^


ALTER PROCEDURE SPSAVE_ADHOCCHARGE (
    IPADHOCCHARGEID INTEGER,
    IPCUSTID INTEGER,
    IPJOBID INTEGER,
    IPFEEID INTEGER,
    IPDESCRIPTION CHAR(50),
    IPAMOUNT DECIMAL(8,2),
    IPINCEX INTEGER,
    IPINVOIEABLE INTEGER,
    IPPAYMENTRECEIVED DATE,
    IPPAYMETHODID INTEGER,
    IPINCGSTAMOUNT DECIMAL(8,2),
    IPCOMMENT VARCHAR(100))
RETURNS (
    OPADHOCCHARGEID INTEGER)
AS
begin
  if (ipadhocchargeid = 0) then begin
    opadhocchargeid = GEN_ID(adhocchargeid_gen, 1);
    insert into adhoccharge
       (adhoccharge.adhocchargeid,
        adhoccharge.custid,
        adhoccharge.jobid,
        adhoccharge.feeid,
        adhoccharge.description,
        adhoccharge.amount,
        adhoccharge.incex,
        adhoccharge.invno,
        adhoccharge.invoiceable,
        adhoccharge.paymentreceived,
        adhoccharge.paymethodid,
        adhoccharge.incgstamount,
        adhoccharge.comment)
        values (:opadhocchargeid,
            :ipcustid,
            :ipjobid,
            :ipfeeid,
            :ipdescription,
            :ipamount,
            :ipincex,
            0, /* this stops it being null, so invno = 0 finds it in a select statement */
            :ipinvoieable,
            :ippaymentreceived,
            :ippaymethodid,
            :ipincgstamount,
            :ipcomment
            );
  end
  else begin
    update adhoccharge set
        adhoccharge.custid = :ipcustid,
        adhoccharge.jobid = :ipjobid,
        adhoccharge.feeid = :ipfeeid,
        adhoccharge.description = :ipdescription,
        adhoccharge.amount = :ipamount,
        adhoccharge.incex = :ipincex,   
        adhoccharge.invoiceable = :ipinvoieable,
        adhoccharge.paymentreceived = :ippaymentreceived,
        adhoccharge.paymethodid = :ippaymethodid,
        adhoccharge.incgstamount = :ipincgstamount,
        adhoccharge.comment = :ipcomment
       where adhoccharge.adhocchargeid = :ipadhocchargeid;
    opadhocchargeid = ipadhocchargeid;
  end

  /* now we have to sum the charges for this job and put the total into the
   * job record so it can be displayed and also act as a flag to show that
   * this job has some adhoc charges
   */
  update job set job.additionalcharges =
     (select sum(adhoccharge.incgstamount) from adhoccharge
        where adhoccharge.jobid = :ipjobid)
        where job.jobid = :ipjobid;
end^


ALTER PROCEDURE SPSAVE_ADHOCINVSTATE (
    IPADHOCCHARGEID INTEGER,
    IPINVSTATE INTEGER)
AS
begin
  update adhoccharge set adhoccharge.invoiceable = :ipinvstate
        where adhoccharge.adhocchargeid = :ipadhocchargeid;
end^


ALTER PROCEDURE SPSAVE_BCPRICE (
    IPBINCOMPANYID INTEGER,
    IPBINTYPEID INTEGER,
    IPBINFORMATID INTEGER,
    IPPRICE DECIMAL(7,2),
    IPINCEX INTEGER)
AS
begin
  update bcprices set
      bcprices.price = :ipprice,
      bcprices.incex = :ipincex
      where bcprices.bincompanyid = :ipbincompanyid
        and bcprices.bintypeid = :ipbintypeid
        and bcprices.binformatid = :ipbinformatid;
  if (row_count = 0)
  then insert into bcprices
        (bcprices.bincompanyid,
         bcprices.bintypeid,
         bcprices.binformatid,
         bcprices.price,
         bcprices.incex)
       values
        (:ipbincompanyid,
         :ipbintypeid,
         :ipbinformatid,
         :ipprice,
         :ipincex);
end^


ALTER PROCEDURE SPSAVE_BINCOMPANY (
    IPBINCOMPANYID INTEGER,
    IPCOMPANYNAME CHAR(50),
    IPCOMMENTS CHAR(50),
    IPEMAIL CHAR(50),
    IPADDRID INTEGER,
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10))
RETURNS (
    OPBINCOMPANYID INTEGER,
    OPADDRID INTEGER)
AS
BEGIN

  if (ipbincompanyid = 0)
  then begin

        opaddrid = GEN_ID(ADDRESS_ADDRID_GEN, 1);
        insert into ADDRESS (addrid, streetnumber, address1, address2, town, state, postcode)
           values (:opaddrid,
                   :ipstreetnumber,
                   :ipaddress1,
                   :ipaddress2, :iptown,
                   :ipstate, :ippostcode);

      opbincompanyid = GEN_ID(genbincompanyid, 1);
      insert into bincompany
         (bincompanyid, companyname, addrid, comments)
         values (:opbincompanyid, :ipcompanyname,
                 :opaddrid, :ipcomments);
    END
    else begin
         update bincompany set
            bincompany.companyname = :ipcompanyname,
            bincompany.comments = :ipcomments
            where bincompany.bincompanyid = :ipbincompanyid;
         update address set
            streetnumber = :ipstreetnumber,
            address1 = :ipaddress1,
            address2 = :ipaddress2,
            town = :iptown,
            state = :ipstate,
            postcode = :ippostcode
            where address.addrid = :ipaddrid;
        opbincompanyid = ipbincompanyid;
        opaddrid = ipaddrid;

        /* clear these out as we are just about to save the updated prices */
        delete from bcprices where bcprices.bincompanyid = :ipbincompanyid;
    end
END^


ALTER PROCEDURE SPSAVE_BINFORMAT (
    IPBINFORMATID INTEGER DEFAULT NULL,
    IPDESCRIPTION CHAR(30) DEFAULT NULL,
    IPDEFAULTFORMAT SMALLINT DEFAULT NULL)
RETURNS (
    THEBINFORMATID INTEGER)
AS
DECLARE VARIABLE LVERSIONNO INTEGER;
DECLARE VARIABLE LSTATUS SMALLINT;
BEGIN
  execute procedure UPD_EVENT ('lastmaster');
  
  /* if this is going to be the new default then make sure
   * all the others are not
   */
  if (ipdefaultformat = 1)
  then update BINFORMAT set defaultformat = 0;
  
  /* Procedure body */
  if (ipbinformatid = 0) then
  begin
    /* just use the bintype generator to get an id to
     * save having another generator
     */
    thebinformatid = GEN_ID(BINTYPE_BINTYPEID_GEN, 1);
    insert into BINFORMAT
         (binformatid, description, defaultformat,
          versionno)
         values (:thebinformatid,
                 :ipdescription,
                 :ipdefaultformat,
                 1);
  end
  else begin
   thebinformatid = :ipbinformatid;
   
      update BINFORMAT set
           description = :ipdescription,
           defaultformat = :ipdefaultformat
         where binformat.binformatid = :ipbinformatid
        ;
  END
  
  SUSPEND;
  
END^


ALTER PROCEDURE SPSAVE_BINMV (
    IPBINMVID INTEGER DEFAULT NULL,
    IPMVDATE DATE DEFAULT NULL,
    IPBINTYPEID INTEGER DEFAULT NULL,
    IPFROMSITEID INTEGER DEFAULT NULL,
    IPOUTBINSEMPTY INTEGER DEFAULT NULL,
    IPOUTBINSFULL INTEGER DEFAULT NULL,
    IPTOSITEID INTEGER DEFAULT NULL,
    IPINBINSEMPTY INTEGER DEFAULT NULL,
    IPINBINSFULL INTEGER DEFAULT NULL)
AS
DECLARE VARIABLE LDATE DATE;
DECLARE VARIABLE LOLDBINTYPEID INTEGER;
DECLARE VARIABLE LOLDFROMSITEID INTEGER;
DECLARE VARIABLE LOLDOUTEMPTY INTEGER;
DECLARE VARIABLE LOLDOUTFULL INTEGER;
DECLARE VARIABLE LOLDTOSITEID INTEGER;
DECLARE VARIABLE LOLDINEMPTY INTEGER;
DECLARE VARIABLE LOLDINFULL INTEGER;
BEGIN
  if (ipbinmvid = 0) then BEGIN
    /* this should be easy - no old entry to adjust, just add
     * the new one in
     */
     insert into binmv (BINMV.BINMVID,
            binmv.movedate,
            binmv.BINTYPEID,
            BINMV.FROMSITEID,
            BINMV.OUTEMPTY,
            BINMV.OUTFULL,
            BINMV.TOSITEID,
            BINMV.INEMPTY,
            BINMV.INFULL,
            BINMV.JOBID)
      values (GEN_ID(binmvid, 1),
       :ipmvdate,
       :ipbintypeid,
       :ipfromsiteid,
       :ipoutbinsempty,
       :ipoutbinsfull,
       :iptositeid,
       :ipinbinsempty,
       :ipinbinsfull,
       0
       );
     loldbintypeid = 0;
     loldfromsiteid = 0;
     loldoutempty = 0;
     loldoutfull = 0;
     loldtositeid = 0;
     loldinempty = 0;
     loldinfull = 0;
  end
  else begin
    /* first we keep what the old value was */
    select binmv.BINTYPEID,
           binmv.FROMSITEID,
           binmv.OUTEMPTY,
           binmv.OUTFULL,
           binmv.TOSITEID,
           binmv.INEMPTY,
           binmv.INFULL
           from BINMV
           where binmv.BINMVID = :ipbinmvid
           into
           :loldbintypeid,
           :loldfromsiteid,
           :loldoutempty,
           :loldoutfull,
           :loldtositeid,
           :loldinempty,
           :loldinfull;
    /* now we can clobber it with the new value */
    update binmv set
       binmv.movedate = :ipmvdate,
       binmv.BINTYPEID = :ipbintypeid,
       BINMV.FROMSITEID = :ipfromsiteid,
       BINMV.OUTEMPTY = :ipoutbinsempty,
       BINMV.OUTFULL = :ipoutbinsfull,
       BINMV.TOSITEID = :iptositeid,
       BINMV.INEMPTY = :ipinbinsempty,
       BINMV.INFULL = :ipinbinsfull
     where binmv.BINMVID = :ipbinmvid;
  end
  
  select first 1 STOCKTAKE_BINTYPE_DATES.SDATE
         from STOCKTAKE_BINTYPE_DATES
         order by STOCKTAKE_BINTYPE_DATES.SDATE desc
         into :ldate;
  if (ipmvdate > ldate)
  then begin
    /* take out the old values from the sitesoh records */
    if (loldfromsiteid != 0)
    then EXECUTE PROCEDURE adjustsitesoh (
            loldbintypeid,
            loldfromsiteid,
            loldoutempty,
            loldoutfull);
            
    if (loldtositeid != 0)
    then EXECUTE PROCEDURE adjustsitesoh (
            loldbintypeid,
            loldtositeid,
            0 - loldinempty,
            0 - loldinfull);
    
    /* add in the new values */
    if (ipfromsiteid != 0)
    then EXECUTE PROCEDURE adjustsitesoh (
            ipbintypeid,
            ipfromsiteid,
            0 - ipoutbinsfull,
            0 - ipoutbinsempty);
            
    if (iptositeid != 0)
    then EXECUTE PROCEDURE adjustsitesoh (
            ipbintypeid,
            iptositeid,
            ipinbinsfull,
            ipinbinsempty);
  end /* of date being after last stocktake */
END^


ALTER PROCEDURE SPSAVE_BINTYPE (
    IPBINTYPEID INTEGER,
    IPBINTYPE CHAR(8),
    IPDESCRIPTION CHAR(20),
    IPFULLDESCRIPTION CHAR(30),
    IPSORTORDER INTEGER,
    IPCUBICMETRES DECIMAL(6,1),
    IPVERSIONNO INTEGER,
    IPPRICEPERHIRE DECIMAL(18,2),
    IPINCEX INTEGER,
    IPASBESTOSITEM CHAR(25),
    IPITEMCODE CHAR(12),
    IPACCOUNTNO CHAR(25),
    IPCOMPANY CHAR(10),
    IPVALIDFORMATS CHAR(200),
    IPSITEBINITEMCODE CHAR(24),
    IPSITEBINACCOUNTNO CHAR(24),
    IPADVERTISEDM3 INTEGER,
    IPCOMMENT1 CHAR(50),
    IPCOMMENT2 CHAR(50),
    IPFLAGS INTEGER,
    IPPINCOLOUR VARCHAR(50))
RETURNS (
    THEBINTYPEID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
declare variable lversionno integer;
declare variable lstatus smallint;
BEGIN
  execute procedure UPD_EVENT ('lastmaster');
  
  /* Procedure body */
  if (ipbintypeid = 0) then
  begin
    thebintypeid = GEN_ID(BINTYPE_BINTYPEID_GEN, 1);
    insert into bintype
         (bintypeid, bintype, description,
          fulldescription, sortorder,
          dcubicmetres, versionno,
          asbestositemcode, itemcode,
          accountno, company,
          validformats,
          sitebinsitemcode,
          sitebinsaccountno,
          cubicmetres,
          comment1,
          comment2,
          bintype.flags,
          bintype.pincolour)
         values (:thebintypeid,
                 :ipbintype,
                 :ipdescription,
                 :ipfulldescription,
                 :ipsortorder, :ipcubicmetres, 1,
                 :ipasbestositem,
                 :ipitemcode,
                 :ipaccountno,
                 :ipcompany,
                 :ipvalidformats,
                 :ipsitebinitemcode,
                 :ipsitebinaccountno,
                 :ipadvertisedm3,
                 :ipcomment1,
                 :ipcomment2,
                 :ipflags,
                 :ippincolour);
    EXECUTE PROCEDURE spsave_price
             (-1, -1, thebintypeid,
              ippriceperhire, /* price */
               1, /* fixed */
               0, /* old price */
               0, /* old fixed */
               1, /* clobber = yes */
               ipincex,
               0) RETURNing_values (LSTATUS);

    theversionno = 1;
    thestatus = 0;
  end
  else begin
   thebintypeid = :ipbintypeid;
   SELECT versionno FROM bintype where bintypeid = :ipbintypeid
           INTO :lversionno;
    if (lversionno != ipversionno)
    then BEGIN
      theversionno = :lversionno;
      thestatus = 1; /* error - record has changed */
    END
    else begin
      lversionno = :lversionno + 1;
      update bintype set bintype = :ipbintype,
           description = :ipdescription,
           fulldescription = :ipfulldescription,
           sortorder = :ipsortorder,
           dcubicmetres = :ipcubicmetres,
           versionno = :lversionno,
           /*
           priceperhire = :ippriceperhire,
           incex = :ipincex,
           */
           asbestositemcode = :ipasbestositem,
           itemcode = :ipitemcode,
           accountno = :ipaccountno,
           company = :ipcompany,
           validformats = :ipvalidformats,
           sitebinsitemcode = :ipsitebinitemcode,
           sitebinsaccountno = :ipsitebinaccountno,
           cubicmetres = :ipadvertisedm3,
           comment1 = :ipcomment1, 
           comment2 = :ipcomment2,
           bintype.flags = :ipflags,
           bintype.pincolour = :ippincolour
         where bintypeid = :ipbintypeid
        ;
      EXECUTE PROCEDURE spsave_price
             (-1, -1, thebintypeid,
              ippriceperhire, /* price */
               1, /* fixed */
               0, /* old price */
               0, /* old fixed */
               1, /* clobber = yes */
               ipincex,
               0) RETURNing_values (LSTATUS);
      theversionno = :lversionno;
      thestatus = 0;
    end
  END
  
  SUSPEND;
  
end^


ALTER PROCEDURE SPSAVE_BOOKINVNO (
    IPINVNO INTEGER)
AS
begin
  IF (Not EXISTS (SELECT * FROM bookinvno WHERE bookinvno.invno = :ipinvno))
  then INSERT INTO bookinvno (invno) VALUES (:ipinvno);
end^


ALTER PROCEDURE SPSAVE_CALLCOUNTS (
    IPDDATE DATE,
    IPUSERID INTEGER,
    IPNEWORDERS INTEGER,
    IPCHANGEOVERS INTEGER,
    IPPICKUPS INTEGER,
    IPMISSEDORDERS INTEGER,
    IPGENENQS INTEGER)
AS
begin
  update callcounts
     set callcounts.neworders = callcounts.neworders + :ipneworders,
         callcounts.changeovers = callcounts.changeovers + :ipchangeovers,
         callcounts.pickups = callcounts.pickups + :ippickups,
         callcounts.missedorders = callcounts.missedorders + :ipmissedorders,
         callcounts.generalenquiries = callcounts.generalenquiries + :ipgenenqs
     where callcounts.ddate = :ipddate
       and callcounts.userid = :ipuserid;
  IF (ROW_COUNT = 0) THEN
   INSERT INTO callcounts
      (ddate,
       userid,
       neworders,
       changeovers,
       pickups,
       missedorders,
       generalenquiries)
      VALUES
       (:ipddate,
        :ipuserid,
        :ipneworders,
        :ipchangeovers,
        :ippickups,
        :ipmissedorders,
        :ipgenenqs);
end^


ALTER PROCEDURE SPSAVE_CARDTYPE (
    IPCARDTYPEID INTEGER,
    IPCARDNAME CHAR(8),
    IPSURCHARGE DECIMAL(5,2))
RETURNS (
    OPCARDTYPEID INTEGER)
AS
begin
  if (ipcardtypeid = 0) then begin
    opcardtypeid = gen_id(gencardtypeid, 1);
    insert into cardtype
            (cardtypeid, cardname, surcharge)
        values (:opcardtypeid,  :ipcardname,  :ipsurcharge);
  end
  else begin
    opcardtypeid = ipcardtypeid;
    update cardtype set
        cardname = :ipcardname,
        surcharge = :ipsurcharge
       where cardtype.cardtypeid = :ipcardtypeid;
  end
end^


ALTER PROCEDURE SPSAVE_CHANGEDETAILS (
    IPENTITYID INTEGER,
    IPOBJECTID INTEGER,
    IPAMDTIME TIMESTAMP,
    IPDETAILS CHAR(500),
    IPUSERID INTEGER,
    IPOPERATION VARCHAR(30),
    IPENTITY VARCHAR(30))
AS
BEGIN
  insert into jobamend
         (entityid, objectid, amendtime, changedetails, userid, operation, entity)
         values (:ipentityid,
                 :ipobjectid,
                 :ipamdtime,
                 :ipdetails,
                 :ipuserid,
                 :ipoperation,
                 :ipentity);
END^


ALTER PROCEDURE SPSAVE_COMMSMETHOD (
    IPCOMMSMETHODID INTEGER,
    IPDESCRIPTION CHAR(30))
RETURNS (
    OPCOMMSMETHODID INTEGER)
AS
begin
  if (ipcommsmethodid = 0) then begin
    opcommsmethodid = GEN_ID(commsmethodid_gen, 1);
    insert into crmcommsmethod
         (commsmethodid, description)
         values (:opcommsmethodid, :ipdescription);
  end
  else begin
    update crmcommsmethod
        set crmcommsmethod.description = :ipdescription
        where crmcommsmethod.commsmethodid = :ipcommsmethodid;
    opcommsmethodid = ipcommsmethodid;
  end
end^


ALTER PROCEDURE SPSAVE_CONTACTDETAILS (
    IPCONTACTDETAILSID INTEGER,
    IPCONTACTNAME VARCHAR(500),
    IPTELEPHONE VARCHAR(500),
    IPMOBILE VARCHAR(500),
    IPEMAIL VARCHAR(500),
    IPADDRID INTEGER,
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10))
RETURNS (
    OPCONTACTDETAILSID INTEGER)
AS
declare variable theaddrid integer;
BEGIN
  if (ipcontactdetailsid = 0) then
  begin
    theaddrid = GEN_ID(ADDRESS_ADDRID_GEN, 1);
    insert into ADDRESS (addrid, streetnumber, address1, address2, town,
                         state, postcode)
         values (:theaddrid, :ipstreetnumber, :ipaddress1, :ipaddress2,
                 :iptown, :ipstate, :ippostcode);
                 
    opcontactdetailsid = GEN_ID(CUSTOMER_CUSTID_GEN, 1);
    insert into contactdetails
         (contactdetails.contactdetailsid,
          contactdetails.contactname,
          contactdetails.telephone,
          contactdetails.mobile,
          contactdetails.email,
          contactdetails.addrid
          )
         values (:opcontactdetailsid,
                 :ipcontactname,
                 :iptelephone,
                 :ipmobile,
                 :ipemail,
                 :theaddrid
                 );
  end
  else begin
      update contactdetails set contactname = :ipcontactname,
             telephone = :iptelephone,
             mobile = :ipmobile,
             email = :ipemail
        where contactdetails.contactdetailsid = :ipcontactdetailsid;
      opcontactdetailsid = ipcontactdetailsid;
      update address set 
                       streetnumber = :ipstreetnumber,
                       address1 = :ipaddress1,
                       address2 = :ipaddress2,
                       town = :iptown, 
                       state = :ipstate,
                       postcode = :ippostcode
            where addrid = :ipaddrid;
  END

  SUSPEND;
END^


ALTER PROCEDURE SPSAVE_CONTRACTDRIVERPRICES (
    IPDRIVERID INTEGER,
    IPJOBTYPE INTEGER,
    IPBINTYPEID INTEGER,
    IPINCPRICE DECIMAL(15,2))
AS
begin
  insert into contractdriverprice
     (contractdriverprice.driverid,
      contractdriverprice.jobtype,
      contractdriverprice.bintypeid,
      contractdriverprice.incprice)
    values
     (:ipdriverid,
      :ipjobtype, 
      :ipbintypeid, 
      :ipincprice);
end^


ALTER PROCEDURE SPSAVE_COUNCIL (
    IPCOUNCILID INTEGER,
    IPNAME CHAR(40),
    IPCOMMENT CHAR(200))
RETURNS (
    OPCOUNCILID INTEGER)
AS
BEGIN
  if (ipcouncilid = 0)
  then begin
    opcouncilid = GEN_ID(gencouncilid, 1);
    
    insert into councils
           (councils.councilid,
            councils.name,
            councils.comment)
           values (:opcouncilid,
           :ipname,
           :ipcomment);
    end
    else begin
      update councils set
        councils.name = :ipname,
        councils.comment = :ipcomment
         where councils.councilid = :ipcouncilid;
      opcouncilid = ipcouncilid;
    end
    
END^


ALTER PROCEDURE SPSAVE_COUNCILPDF (
    IPCOUNCILID INTEGER,
    IPFILENAME CHAR(256),
    IPDESCRIPTION CHAR(50))
AS
BEGIN
  insert into councilpdfs
         (councilpdfs.councilid,
          councilpdfs.filename,
          councilpdfs.description)
          values
         (:ipcouncilid,
          :ipfilename,
          :ipdescription);
END^


ALTER PROCEDURE SPSAVE_COUNCILSUBURB (
    IPCOUNCILID INTEGER,
    IPSUBURBNAME CHAR(40),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(5))
AS
BEGIN
  insert into councilsuburbs
         (councilsuburbs.councilid,
          councilsuburbs.suburbname,
          councilsuburbs.state,
          councilsuburbs.postcode)
          values
         (:ipcouncilid,
          :ipsuburbname,
          :ipstate,
          :ippostcode);
END^


ALTER PROCEDURE SPSAVE_CREDITNOTE (
    IPCREDITNOTEID INTEGER,
    IPCREDITNOTENO INTEGER,
    IPCUSTID INTEGER,
    IPUSERID INTEGER,
    IPCREDITDATE DATE,
    IPFLAGS INTEGER,
    IPCOMMENTS CHAR(500),
    IPINVNO CHAR(10))
RETURNS (
    OPCREDITNOTEID INTEGER)
AS
begin
  if (ipcreditnoteid = 0) then begin
     opcreditnoteid = gen_id(gencreditnoteid, 1);
     insert into creditnote
            (creditnote.creditbnoteid,
             creditnote.creditnoteno,
             creditnote.custid,
             creditnote.userid,
             creditnote.timecreated,
             creditnote.invbatchno,
             creditnote.creditdate,
             creditnote.flags,
             creditnote.comments,
             creditnote.invno)
           values
            (:opcreditnoteid,
             :ipcreditnoteno,
             :ipcustid,
             :ipuserid,
             current_timestamp,
             0, /* just a default */
             :ipcreditdate,
             :ipflags,
             :ipcomments,
             :ipinvno);
  end
  else begin
    opcreditnoteid = ipcreditnoteid;
    update creditnote set
            creditnote.flags = :ipflags,
            creditnote.creditdate = :ipcreditdate,
            creditnote.comments = :ipcomments,
            creditnote.invno = :ipinvno
           where creditnote.creditbnoteid = :ipcreditnoteid;
  end

  /* we need to remove the lines as we always save the new lines right after saving
   * the credit note itself
   */
  delete from creditline where creditline.creditnoteid = :opcreditnoteid;

  update invoice set invoice.flags = 1  /* mark it a scredited */
         where invoice.invno = :ipinvno;
end^


ALTER PROCEDURE SPSAVE_CREDITNOTELINE (
    IPCREDITLINEID INTEGER,
    IPCREDITNOTEID INTEGER,
    IPLINETYPE INTEGER,
    IPOBJECTID INTEGER,
    IPOBJECTID2 INTEGER,
    IPOBJECTID3 INTEGER,
    IPEXAMOUNT DECIMAL(8,2),
    IPENTEREDASINC INTEGER,
    IPINVLINENO INTEGER,
    IPJOBDATE DATE,
    IPFLAGS INTEGER,
    IPDESCRIPTION VARCHAR(200))
RETURNS (
    OPCREDITLINEID INTEGER)
AS
begin
  if (ipcreditlineid = 0) then begin
     opcreditlineid = gen_id(gencreditlineid, 1);
     insert into creditline
           (creditline.creditlineid,
            creditline.creditnoteid,
            creditline.linetype,
            creditline.objectid,
            creditline.objectid2,
            creditline.examount,
            creditline.enteredasinc,
            creditline.invlineno,
            creditline.jobdate,
            creditline.objectid3,
            creditline.flags,
            creditline.description)
           values
           (:opcreditlineid,
            :ipcreditnoteid,
            :iplinetype,
            :ipobjectid,
            :ipobjectid2,
            :ipexamount,
            :ipenteredasinc,
            :ipinvlineno,
            :ipjobdate,
            :ipobjectid3,
            :ipflags,
            :ipdescription);
  end
  else begin
    opcreditlineid = ipcreditlineid;
    update creditline set
        creditline.linetype = :iplinetype,
        creditline.objectid = :ipobjectid,
        creditline.objectid2 = :ipobjectid2,
        creditline.examount = :ipexamount,
        creditline.enteredasinc = :ipenteredasinc,
        creditline.invlineno = :ipinvlineno,
        creditline.jobdate = :ipjobdate,
        creditline.objectid3 = :ipobjectid3,
        creditline.flags = :ipflags,
        creditline.description = :ipdescription
        where creditline.creditlineid = :ipcreditlineid;
  end

  suspend;
end^


ALTER PROCEDURE SPSAVE_CRMCONTACT (
    IPCONTACTID INTEGER,
    IPCUSTID INTEGER,
    IPCONTACTTIME TIMESTAMP,
    IPCOMMENTS CHAR(200),
    IPCOMMSMETHOD CHAR(30),
    IPFROMPERSON CHAR(50),
    IPTOPERSON CHAR(50))
RETURNS (
    OPCONTACTID INTEGER)
AS
begin
  if (ipcontactid = 0) then begin
    opcontactid = GEN_ID(gen_contactid, 1);
    insert into crmcontacts
            (contactid, custid, contacttime,
             comments, commsmethod,
             fromperson, toperson, ddate)
        values (:opcontactid,
          :ipcustid,
          :ipcontacttime,
          :ipcomments,
          :ipcommsmethod,
          :ipfromperson,
          :iptoperson,
          cast( extract(day from :ipcontacttime)||
                '.'|| extract(month from :ipcontacttime)||
                '.'|| extract(year from :ipcontacttime) as date));
  end
  else begin
    opcontactid = ipcontactid;
    update crmcontacts
        set crmcontacts.custid = :ipcustid,
            crmcontacts.contacttime = :ipcontacttime,
            crmcontacts.comments = :ipcomments,
            crmcontacts.commsmethod = :ipcommsmethod,
            crmcontacts.fromperson = :ipfromperson,
            crmcontacts.toperson = :iptoperson,
            crmcontacts.ddate = cast( extract(day from :ipcontacttime)||
                '.' || extract(month from :ipcontacttime)||
                '.' || extract(year from :ipcontacttime) as date)
        where crmcontacts.contactid = :ipcontactid;
  end
end^


ALTER PROCEDURE SPSAVE_CUSTGROUP (
    IPCUSTID INTEGER,
    IPGROUPID INTEGER,
    IPINFO CHAR(50),
    IPADD INTEGER)
AS
begin
  if (ipadd = 1) then begin
     update custgroup set
       custgroup.info = :ipinfo
       where custgroup.custid = :ipcustid
         and custgroup.groupid = :ipgroupid;
    if (row_count = 0)
    then insert into custgroup (custgroup.custid, custgroup.groupid, custgroup.info)
                values (:ipcustid, :ipgroupid, :ipinfo);
  end
  else delete from custgroup
          where custgroup.custid = :ipcustid
            and custgroup.groupid = :ipgroupid;
end^


ALTER PROCEDURE SPSAVE_CUSTLASTPA (
    IPCUSTID INTEGER DEFAULT NULL,
    IPPAID INTEGER DEFAULT NULL)
AS
BEGIN
    update CUSTOMER set
                 lastpriceareaid = :ippaid
        where custid = :ipcustid;
END^


ALTER PROCEDURE SPSAVE_CUSTOMER (
    IPCUSTID INTEGER,
    IPNAME CHAR(50),
    IPTELEPHONE CHAR(14),
    IPADDRID INTEGER,
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10),
    IPMOBILE CHAR(14),
    IPCONTACT CHAR(30),
    IPEMAIL CHAR(50),
    IPFAX CHAR(14),
    IPABN CHAR(16),
    IPTERMSID INTEGER,
    IPONHOLD INTEGER,
    IPISACTIVE INTEGER,
    IPCOMMENTS CHAR(500),
    IPCUSTTYPE INTEGER,
    IPEXTERNAL CHAR(50),
    IPVERSIONNO INTEGER,
    IPINVPERIOD INTEGER,
    IPDEFPRICEAREAID INTEGER,
    IPINVOICEPERSITE INTEGER,
    IPDEFREFERRALID INTEGER,
    IPSALESMAN CHAR(30),
    IPCARDTYPEID INTEGER,
    IPCARDNUMBER CHAR(60),
    IPNAMEONCARD CHAR(40),
    IPEXPMONTH SMALLINT,
    IPEXPYEAR SMALLINT,
    IPSECURITYCODE CHAR(6),
    IPWANTSBDOWN SMALLINT,
    IPSALESMANID INTEGER,
    IPCUSTMODULES INTEGER,
    IPDOCSRECEIVED INTEGER,
    IPDIRNAME CHAR(40),
    IPCREDITLIMIT DECIMAL(14,2),
    IPWHENTOINVOICE INTEGER,
    IPISCUSTOMER INTEGER,
    IPISSUPPLIER INTEGER,
    IPSUPPLIERFLAGS INTEGER,
    IPRCTISINCE DATE,
    IPGSTREGISTERED DATE)
RETURNS (
    THECUSTID INTEGER,
    THEADDRID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
declare variable lversionno integer;
BEGIN
  /* Procedure body */
  if (ipcustid = 0) then
  begin
    theaddrid = GEN_ID(ADDRESS_ADDRID_GEN, 1);
    insert into ADDRESS (addrid, streetnumber, address1, address2, town,
                         state, postcode)
         values (:theaddrid, :ipstreetnumber, :ipaddress1, :ipaddress2,
                 :iptown, :ipstate, :ippostcode);
    thecustid = GEN_ID(CUSTOMER_CUSTID_GEN, 1);
    insert into customer
         (custid, name, telephone, custaddrid, mobile, contact, email, fax,
          abn, termsid, onhold, isactive, comments, custtype, externalcode,
          versionno, invperiod, lcname, defpriceareaid, invoicepersite,
          defreferralid, salesman,
          cardtypeid, cardnumber, nameoncard, expmonth, expyear, securitycode,
          wantsbreakdown,
          salesmanid,
          customer.customermodules,
          customer.docsreceived,
          customer.directoryname,
          customer.creditlimit,
          customer.lastamended,
          customer.whentoinvoice,
          customer.iscustomer,
          customer.issupplier,
          customer.supplierflags,
          customer.rctiagreement,
          customer.gstregisteredsince)
         values (:thecustid, :ipname, :iptelephone, :theaddrid, :ipmobile,
                 :ipcontact, :ipemail, :ipfax, :ipabn, :iptermsid,
                 :iponhold, :ipisactive, :ipcomments, :ipcusttype,
                 :ipexternal, 1, :ipinvperiod, lower(:ipname),
                 :ipdefpriceareaid, :ipinvoicepersite,
                 :ipdefreferralid, :ipsalesman,
                 :ipcardtypeid, :ipcardnumber, :ipnameoncard, :ipexpmonth,
                 :ipexpyear, :ipsecuritycode, :ipwantsbdown, :ipsalesmanid,
                 :ipcustmodules,
                 :ipdocsreceived,
                 :ipdirname,
                 :ipcreditlimit,
                 current_date,
                 :ipwhentoinvoice,
                 :ipiscustomer,
                 :ipissupplier,
                 :ipsupplierflags,
                 :iprctisince,
                 :ipgstregistered);
    thestatus = 0;
    theversionno = 1;
  end
  else begin
    SELECT versionno FROM customer where custid = :ipcustid
           INTO :lversionno;
    if (lversionno != ipversionno)
    then BEGIN
      theversionno = :lversionno;
      thestatus = 1; /* error - record has changed */
    END
    else begin
      lversionno = :lversionno + 1;
      update customer set name = :ipname, telephone = :iptelephone,
                        mobile = :ipmobile, contact = :ipcontact,
                        email = :ipemail,
                        fax = :ipfax,
                        abn = :ipabn,
                        termsid = :iptermsid,
                        onhold = :iponhold,
                        isactive = :ipisactive,
                        comments = :ipcomments,
                        custtype = :ipcusttype,
                        externalcode = :ipexternal,
                        versionno = :lversionno,
                        invperiod = :ipinvperiod,
                        lcname = lower(:ipname),
                        defpriceareaid = :ipdefpriceareaid,
                        invoicepersite = :ipinvoicepersite,
                        defreferralid = :ipdefreferralid,
                        salesman = :ipsalesman,
                        cardtypeid = :ipcardtypeid,
                        cardnumber = :ipcardnumber,
                        nameoncard = :ipnameoncard,
                        expmonth = :ipexpmonth,
                        expyear = :ipexpyear,
                        securitycode = :ipsecuritycode,
                        wantsbreakdown = :ipwantsbdown,
                        salesmanid = :ipsalesmanid,
                        customer.customermodules = :ipcustmodules,
                        customer.docsreceived = :ipdocsreceived,
                        customer.directoryname = :ipdirname,
                        customer.creditlimit = :ipcreditlimit,
                        customer.lastamended = current_date,
                        customer.whentoinvoice = :ipwhentoinvoice,
                        customer.iscustomer = :ipiscustomer,
                        customer.issupplier = :ipissupplier,
                        customer.supplierflags = :ipsupplierflags,
                        customer.rctiagreement = :iprctisince,
                        customer.gstregisteredsince = :ipgstregistered
        where custid = :ipcustid;
      thecustid = :ipcustid;
      theaddrid = :ipaddrid;
      theversionno = :lversionno;
      update address set 
                       streetnumber = :ipstreetnumber,
                       address1 = :ipaddress1, address2 = :ipaddress2,
                       town = :iptown, state = :ipstate, postcode = :ippostcode
        where addrid = :ipaddrid;
      thestatus = 0;
    end
  END
  SUSPEND;
END^


ALTER PROCEDURE SPSAVE_CUSTOMERPAYALLOCATION (
    IPID INTEGER,
    IPCUSTOMERPAYMENTID INTEGER,
    IPINVNO INTEGER,
    IPAMOUNT DECIMAL(15,2),
    IPCREDITNOTEID INTEGER)
RETURNS (
    OPID INTEGER)
AS
begin
  if (ipid = 0) then begin
    opid = GEN_ID(hibernate_sequence, 1);
    insert into customerpaymentallocation
        (customerpaymentallocation.id,
         customerpaymentallocation.customerpaymentid,
         customerpaymentallocation.invno,
         customerpaymentallocation.amount,
         customerpaymentallocation.creditnoteid)
        values
         (:opid,
          :ipcustomerpaymentid,
          :ipinvno,
          :ipamount,
          :ipcreditnoteid);
  end
  else begin
    opid = ipid;
    update customerpaymentallocation
        set customerpaymentallocation.invno = :ipinvno,
            customerpaymentallocation.amount = :ipamount
        where customerpaymentallocation.id = :ipid;
  end
end^


ALTER PROCEDURE SPSAVE_CUSTOMERPAYMENT (
    IPID INTEGER,
    IPCUSTID INTEGER,
    IPPAYMENTDATE DATE,
    IPPAYMENTMETHODID INTEGER,
    IPAMOUNT DECIMAL(15,2),
    IPBATCHID INTEGER,
    IPFLAGS INTEGER)
RETURNS (
    OPID INTEGER)
AS
begin
  if (ipid = 0) then begin
    opid = GEN_ID(hibernate_sequence, 1);
    insert into customerpayment
        (customerpayment.id,
         customerpayment.custid,
         customerpayment.paymentdate,
         customerpayment.paymentmethodid,
         customerpayment.amount,
         customerpayment.paymentbatchid,
         customerpayment.flags)
        values
         (:opid,
          :ipcustid,
          :ippaymentdate,
          :ippaymentmethodid,
          :ipamount,
          :ipbatchid,
          :ipflags);
  end
  else begin
    opid = ipid;
    update customerpayment
        set customerpayment.paymentdate = :ippaymentdate,
            customerpayment.paymentmethodid = :ippaymentmethodid,
            customerpayment.amount = :ipamount,
            customerpayment.paymentbatchid = :ipbatchid,
            customerpayment.flags = :ipflags
        where customerpayment.id = :ipid;
  end
end^


ALTER PROCEDURE SPSAVE_CUSTOMERSITE (
    IPCUSTSITEID INTEGER,
    IPDESCRIPTION CHAR(50),
    IPCONTACT CHAR(50),
    IPPHONE CHAR(30),
    IPCUSTID INTEGER,
    IPISACTIVE INTEGER,
    IPCUSTREF CHAR(100),
    IPORDERID INTEGER,
    IPADDRID INTEGER,
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10),
    IPCOMMENTS CHAR(200),
    IPOFFICENOTES CHAR(200),
    IPWHENTOINVOICE INTEGER,
    IPDEPOTNO CHAR(12),
    IPEMAIL CHAR(50))
RETURNS (
    OPCUSTSITEID INTEGER,
    OPADDRID INTEGER)
AS
BEGIN
    if (ipcustsiteid = 0) then begin
      opcustsiteid = GEN_ID(gencustomersiteid, 1);
      opaddrid = GEN_ID(ADDRESS_ADDRID_GEN, 1);
      insert into ADDRESS (addrid, streetnumber, address1, address2, town, state, postcode)
           values (:opaddrid,
                   :ipstreetnumber,
                   :ipaddress1,
                   :ipaddress2, :iptown,
                   :ipstate, :ippostcode);
      insert into CUSTOMERSITE
         (siteid, description, addrid, contact,
          phone, custid, isactive, custreference,
          orderid, comments, officenotes, whentoinvoice,
          depotno, email)
         values (:opcustsiteid, :ipdescription, :opaddrid, :ipcontact,
                 :ipphone, :ipcustid, :ipisactive, :ipcustref,
                 :iporderid, :ipcomments, :ipofficenotes,
                 :ipwhentoinvoice, :ipdepotno, :ipemail);
    END
    else begin
         update customersite set
                description = :ipdescription,
                contact = :ipcontact,
                phone = :ipphone,
                isactive = :ipisactive,
                custreference = :ipcustref, /* added 4/11/09 !! */
                orderid = :iporderid,
                comments = :ipcomments,
                officenotes = :ipofficenotes,
                whentoinvoice = :ipwhentoinvoice,
                depotno = :ipdepotno,
                email = :ipemail
            where CUSTOMERSITE.SITEID = :ipcustsiteid;
        opcustsiteid = ipcustsiteid;
        opaddrid = ipaddrid;
        update address set
            streetnumber = :ipstreetnumber,
            address1 = :ipaddress1,
            address2 = :ipaddress2,
            town = :iptown,
            state = :ipstate,
            postcode = :ippostcode
            where address.addrid = :ipaddrid;
    end
  
  /* SUSPEND; */
END^


ALTER PROCEDURE SPSAVE_CUSTREGO (
    IPCUSTREGOID INTEGER,
    IPCUSTID INTEGER,
    IPREGO VARCHAR(100),
    IPSEARCHFOR VARCHAR(100))
RETURNS (
    OPCUSTREGOID INTEGER)
AS
begin

  update custregos set
         custregos.rego = :iprego /* save the new version of Rego (it might have new spaces, uppercase etc */
         where custregos.searchon = :ipsearchfor
           and custregos.custid = :ipcustid;

  if (row_count = 0) then begin
   if (ipcustregoid = 0) then begin
    opcustregoid = gen_id(genscraploadid, 1);
    insert into custregos (custregos.custregoid,
         custregos.custid,
         custregos.rego,
         custregos.searchon)
         values
         (:opcustregoid,
          :ipcustid,
          :iprego, 
          :ipsearchfor);
   end
   else begin
    opcustregoid = ipcustregoid;
    update custregos set
         custregos.custid = :ipcustid,
         custregos.rego = :iprego,
         custregos.searchon = :ipsearchfor
         where custregos.custregoid = :ipcustregoid;
   end
  end
  else select custregos.custregoid
         from custregos
        where  custregos.searchon = :ipsearchfor
           and custregos.custid = :ipcustid
          into :opcustregoid;

  suspend;
end^


ALTER PROCEDURE SPSAVE_CUSTRGPRICE (
    IPCUSTID INTEGER,
    IPRGID INTEGER,
    IPDELIVERED DECIMAL(9,2),
    IPPICKUP DECIMAL(9,2))
AS
begin
  update custrgprices set
    custrgprices.deliveredprice = :ipdelivered,
    custrgprices.pickupprice = :ippickup
    where custrgprices.custid = :ipcustid
      and custrgprices.rgid = :iprgid;
  if (row_count = 0)
  then insert into custrgprices
            (custid, rgid, deliveredprice, pickupprice)
        values (:ipcustid, :iprgid, :ipdelivered, :ippickup);
end^


ALTER PROCEDURE SPSAVE_CUSTSALESMAN (
    IPCUSTID INTEGER,
    IPSALESMANID INTEGER,
    IPSALESMANSTARTDATE DATE)
AS
begin
  update customer
        set customer.salesmanid = :ipsalesmanid,
            customer.salesmanstartdate = :ipsalesmanstartdate
        where customer.custid = :ipcustid;
end^


ALTER PROCEDURE SPSAVE_CUSTSITEPRICE (
    IPCUSTSITEID INTEGER,
    IPBINTYPEID INTEGER,
    IPPRICE DECIMAL(9,2),
    IPINCEX INTEGER)
AS
BEGIN
  insert into csiteprice
         (customersiteid,
          bintypeid,
          price,
          incex)
          values
          (:ipcustsiteid,
           :ipbintypeid,
           :ipprice,
           :ipincex);
END^


ALTER PROCEDURE SPSAVE_DCKSAVEDOCKET (
    IPDOCKETID INTEGER,
    IPDOCKETNO INTEGER,
    IPCUSTID INTEGER,
    IPDOBINTYPEID INTEGER,
    IPJOBDATE DATE,
    IPCOMMENTS CHAR(200),
    IPJOBTIME CHAR(50),
    IPCUSTORDERNO CHAR(50),
    IPTIPREF CHAR(50),
    IPBINNO CHAR(50),
    IPDOCKETTYPE INTEGER,
    IPJOBTYPE INTEGER,
    IPCONTACT CHAR(50),
    IPCCTYPE INTEGER,
    IPNAMEONCARD CHAR(50),
    IPCARDNO1 CHAR(4),
    IPCARDNO2 CHAR(4),
    IPCARDNO3 CHAR(4),
    IPCARDNO4 CHAR(4),
    IPEXPMONTH INTEGER,
    IPEXPYEAR INTEGER,
    IPTIPAMOUNT DECIMAL(7,2),
    IPTIPSITEID INTEGER,
    IPEXGSTPRICE DECIMAL(6,2),
    IPINCGSTPRICE DECIMAL(6,2),
    IPDODRIVERID INTEGER,
    IPPUDRIVERID INTEGER,
    IPPAYCOMMENT CHAR(30),
    IPACREF CHAR(30),
    IPDD CHAR(40),
    IPPUBINTYPEID INTEGER,
    IPNEXTDKTID INTEGER,
    IPPREVDKTID INTEGER,
    IPPUDATE DATE,
    IPDKTCOVERS INTEGER,
    IPCCPROCESSED INTEGER,
    IPCOPUBINTYPEID INTEGER,
    IPADDRID INTEGER,
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10))
RETURNS (
    OPDOCKETID INTEGER,
    OPADDRID INTEGER,
    OPDOCKETNO INTEGER)
AS
begin

  if (ipdocketid = 0) then begin
    opaddrid = GEN_ID(ADDRESS_ADDRID_GEN, 1);
    insert into ADDRESS (addrid, streetnumber, address1, address2, town,
                         state, postcode)
         values (:opaddrid, :ipstreetnumber, :ipaddress1, :ipaddress2,
                 :iptown, :ipstate, :ippostcode);
    opdocketid = GEN_ID(GENDOCKETID, 1);
    opdocketno = GEN_ID(gendocketno, 1);
    insert into docket
            (docket.docketid,
             docket.docketno,
             docket.custid,
             docket.dobintypeid,
             docket.jobdate,
             docket.comments,
             docket.jobtime,
             docket.custorderno,
             docket.tipref,
             docket.binno,
             docket.dockettype,
             docket.jobtype,
             docket.addrid,
             docket.contact,
             docket.cctype,
             docket.nameoncard,
             docket.cardno1,
             docket.cardno2,
             docket.cardno3,
             docket.cardno4,
             docket.expmonth,
             docket.expyear,
             docket.tipamount,
             docket.tipsiteid,
             docket.exgstprice,
             docket.incgstprice,
             docket.dodriverid, 
             docket.pudriverid,
             docket.paymentcomment,
             docket.acref,
             docket.despatchdocketno,
             docket.pubintypeid,
             docket.nextdocketid,
             docket.prevdocketid,
             docket.pudate,
             docket.docketcovers,
             docket.ccprocessed,
             docket.copubintypeid
             )
        values(:opdocketid,
            :opdocketno,
            :ipcustid,
            :ipdobintypeid,
            :ipjobdate,
            :ipcomments,
            :ipjobtime,
            :ipcustorderno,
            :iptipref,
            :ipbinno,
            :ipdockettype,
            :ipjobtype,
            :opaddrid,
            :ipcontact,
            :ipcctype,
            :ipnameoncard,
            :ipcardno1,
            :ipcardno2,
            :ipcardno3,
            :ipcardno4,
            :ipexpmonth,
            :ipexpyear,
            :iptipamount,
            :iptipsiteid,
            :ipexgstprice,
            :ipincgstprice,
            :ipdodriverid,
            :ippudriverid,
            :ippaycomment,
            :ipacref,
            :ipdd,
            :ippubintypeid,
            :ipnextdktid,
            :ipprevdktid,
            :ippudate,
            :ipdktcovers,
            :ipccprocessed,
            :ipcopubintypeid
            );
  end
  else begin
    opdocketid = ipdocketid;
    opdocketno = ipdocketno;
    update docket set
         docket.docketno = :ipdocketno,
         docket.custid = :ipcustid,
         docket.dobintypeid = :ipdobintypeid,
         docket.jobdate = :ipjobdate,
         docket.comments = :ipcomments,
         docket.jobtime = :ipjobtime,
         docket.custorderno = :ipcustorderno,
         docket.tipref = :iptipref,
         docket.binno = :ipbinno,
         docket.dockettype = :ipdockettype,
         docket.jobtype = :ipjobtype,
         docket.contact = :ipcontact,
         docket.cctype = :ipcctype,
         docket.nameoncard = :ipnameoncard,
         docket.cardno1 = :ipcardno1,
         docket.cardno2 = :ipcardno2,
         docket.cardno3 = :ipcardno3,
         docket.cardno4 = :ipcardno4,
         docket.expmonth = :ipexpmonth,
         docket.expyear = :ipexpyear,
          docket.tipamount = :iptipamount,
             docket.tipsiteid = :iptipsiteid,
             docket.exgstprice = :ipexgstprice,
             docket.incgstprice = :ipincgstprice,
             docket.dodriverid = :ipdodriverid,
             docket.pudriverid = :ippudriverid,
             docket.paymentcomment = :ippaycomment,
             docket.acref = :ipacref,
             docket.despatchdocketno = :ipdd,
             docket.pubintypeid = :ippubintypeid,
             docket.nextdocketid = :ipnextdktid,
             docket.prevdocketid = :ipprevdktid,
             docket.pudate = :ippudate,
             docket.docketcovers = :ipdktcovers,
             docket.ccprocessed = :ipccprocessed,
             docket.copubintypeid = :ipcopubintypeid
         where docket.docketid = :ipdocketid;
    opaddrid = ipaddrid;
    update address set
                       streetnumber = :ipstreetnumber,
                       address1 = :ipaddress1, address2 = :ipaddress2,
                       town = :iptown, state = :ipstate, postcode = :ippostcode
        where addrid = :ipaddrid;
  end
END^


ALTER PROCEDURE SPSAVE_DEDUCTION (
    IPDEDUCTIONID INTEGER,
    IPDEDUCTIONITEMID INTEGER,
    IPQTY DECIMAL(8,2),
    IPCOMMENTS VARCHAR(500),
    IPKGWEIGHT DECIMAL(15,2),
    IPFIXEDCOST DECIMAL(15,2),
    IPCOSTPERKG DECIMAL(15,2),
    IPFLAGS INTEGER,
    IPSCRAPLOADID INTEGER,
    IPUSERID INTEGER)
RETURNS (
    OPDEDUCTIONID INTEGER)
AS
begin
  update deductions set
        deductions.deductionitemid = :ipdeductionitemid,
        deductions.quantity = :ipqty,
        deductions.comments = :ipcomments,
        deductions.kgweight = :ipkgweight,
        deductions.fixedcost = :ipfixedcost,
        deductions.costperkg = :ipcostperkg,
        deductions.flags = :ipflags,
        deductions.userid = :ipuserid
        where deductions.deductionid = :ipdeductionid;
  if (row_count = 0) then begin
    if (ipdeductionid = 0)
    then opdeductionid = gen_id(genscraploadid, 1);
    else opdeductionid = ipdeductionid;

    insert into deductions
       (deductions.deductionid,
        deductions.deductionitemid,
        deductions.quantity,
        deductions.comments,
        deductions.kgweight,
        deductions.fixedcost,
        deductions.costperkg,
        deductions.flags,
        deductions.scraploadid,
        deductions.userid)
        values
       (:opdeductionid,
        :ipdeductionitemid,
        :ipqty,
        :ipcomments,
        :ipkgweight,
        :ipfixedcost,
        :ipcostperkg,
        :ipflags,
        :ipscraploadid,
        :ipuserid);
  end
  else opdeductionid = ipdeductionid;

end^


ALTER PROCEDURE SPSAVE_DEDUCTIONITEM (
    IPDEDUCTIONITEMSID INTEGER,
    IPDESCRIPTION VARCHAR(100),
    IPFLAGS INTEGER,
    IPACCOUNTNO VARCHAR(50))
RETURNS (
    OPDEDUCTIONITEMSID INTEGER)
AS
begin
  if (ipdeductionitemsid = 0) then begin
    opdeductionitemsid = gen_id(genscraploadid,1);
    insert into deductionitems
      (deductionitems.deductionitemid,
       deductionitems.description,
       deductionitems.flags,
       deductionitems.accountno)
       values
      (:opdeductionitemsid,
       :ipdescription,
       :ipflags,
       :ipaccountno);
  end
  else begin
    opdeductionitemsid = ipdeductionitemsid;
    update deductionitems set
        deductionitems.description = :ipdescription,
        deductionitems.flags = :ipflags,
        deductionitems.accountno = :ipaccountno
        where deductionitems.deductionitemid = :ipdeductionitemsid;
  end

  suspend;
end^


ALTER PROCEDURE SPSAVE_DEPT (
    IPDEPTID INTEGER,
    IPDEPTDESC CHAR(40),
    IPPERMISSIONS BIGINT)
RETURNS (
    OPDEPTID INTEGER)
AS
begin
  if (ipdeptid = 0) then begin
         opdeptid = gen_id(gendeptid, 1);
         insert into department
            (department.deptid,
             department.description,
             department.permissions)
            values
            (:opdeptid,
             :ipdeptdesc,
             :ippermissions);
  end
  else begin
    opdeptid = ipdeptid;
    update department set
            department.description = :ipdeptdesc,
            department.permissions = :ippermissions
           where department.deptid = :ipdeptid;
  end
end^


ALTER PROCEDURE SPSAVE_DRIVER (
    IPDRIVERID SMALLINT,
    IPSHORTNAME CHAR(8),
    IPFULLNAME CHAR(25),
    IPSTARTDATE DATE,
    IPFINISHDATE DATE,
    IPVERSIONNO INTEGER,
    IPMOBILE CHAR(20),
    IPJOBTYPEPRICES CHAR(150),
    IPCOPERCENT DECIMAL(6,2),
    IPADDJOBPERCENT DECIMAL(6,2),
    IPFLAGS INTEGER,
    IPLOGINNAME CHAR(50),
    IPENCPASSWORD CHAR(60),
    IPPINCOLOUR VARCHAR(50))
RETURNS (
    THEDRIVERID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
declare variable lversionno integer;
declare variable lcount smallint;
BEGIN
  thestatus = 0;
  if (ipdriverid = 0) then begin
    select count(*)
        from driver
        where lower(driver.FULLNAME) = lower(:ipfullname)
        into :lcount;
    if (lcount > 0)
    then thestatus = 4;
    else begin
      select count(*)
        from driver
        where lower(driver.SHORTNAME) = lower(:ipshortname)
        into :lcount;
      if (lcount > 0)
      then thestatus = 5;
    end
  end
 
  if (thestatus = 0) then begin
  /* Procedure body */
  execute procedure UPD_EVENT ('lastmaster');
  
  if (ipdriverid = 0) then
  begin
    thedriverid = GEN_ID(DRIVER_DRIVERID_GEN, 1);
    insert into driver
         (driverid, shortname, fullname, startdate, finishdate,
          versionno, mobile, jobtypeprices, copercent,
          addjobpercent,
          driver.flags,
          driver.bwdiloginname,
          driver.pincolour)
         values (:thedriverid, :ipshortname, :ipfullname,
                 :ipstartdate, :ipfinishdate, 1,
                 :ipmobile, :ipjobtypeprices,
                 :ipcopercent,
                 :ipaddjobpercent,
                 :ipflags,
                 :iploginname,
                 :ippincolour);
    theversionno = 1;
    thestatus = 0;
  end
  else begin
    SELECT versionno FROM driver where driverid = :ipdriverid
           INTO :lversionno;
    if (lversionno != ipversionno)
    then BEGIN
      theversionno = :lversionno;
      thestatus = 1; /* error - record has changed */
    END
    else begin
      update driver set shortname = :ipshortname,
                      fullname = :ipfullname,
                      startdate = :ipstartdate,
                      finishdate = :ipfinishdate,
                      versionno = versionno + 1,
                      mobile = :ipmobile,
                      jobtypeprices = :ipjobtypeprices,
                      copercent = :ipcopercent,
                      addjobpercent = :ipaddjobpercent,
                      driver.flags = :ipflags,
                      driver.bwdiloginname = :iploginname,
                      driver.pincolour = :ippincolour
         where driverid = :ipdriverid;
      thedriverid = :ipdriverid;
      theversionno = :lversionno + 1;
      thestatus = 0;
    end
  END
  end /* of thestatus = 0 ie no clashes with existing */
  
  if (ipencpassword != 'X')
  then update driver set driver.encpassword = :ipencpassword
              where driver.driverid = :thedriverid;

  SUSPEND;
end^


ALTER PROCEDURE SPSAVE_DRIVERLOGWEB (
    IPDRIVERID INTEGER,
    IPFORDATE DATE,
    IPREGO CHAR(15),
    IPSTARTKMS INTEGER,
    IPENDKMS INTEGER,
    IPSTARTTIME TIMESTAMP,
    IPENDTIME TIMESTAMP,
    IPFUELCOST DECIMAL(8,2),
    IPFUELLITRES DECIMAL(8,2))
AS
begin
  update driverrecbatch set
    driverrecbatch.startkms = :ipstartkms,
    driverrecbatch.starttime = :ipstarttime,
    driverrecbatch.endkms = :ipendkms,
    driverrecbatch.endtime = :ipendtime,
    driverrecbatch.fuelcost = :ipfuelcost,
    driverrecbatch.fuellitres = :ipfuellitres,
    driverrecbatch.regoweb = :iprego
    where driverrecbatch.ddate = :ipfordate
      and driverrecbatch.driverid = :ipdriverid;
  if (row_count = 0)
  then insert into driverrecbatch
            (driverrecbatch.batchid,
             DRIVERRECBATCH.DDATE,
             DRIVERRECBATCH.DRIVERID,
             DRIVERRECBATCH.VERSIONNO,
             DRIVERRECBATCH.BALANCED,
             DRIVERRECBATCH.STARTTIME,
             DRIVERRECBATCH.ENDTIME,
             DRIVERRECBATCH.TRUCKID,
             DRIVERRECBATCH.STARTKMS,
             DRIVERRECBATCH.ENDKMS,
             DRIVERRECBATCH.FUELCOST,
             driverrecbatch.NUMTOLLS,
             driverrecbatch.losttime,
             driverrecbatch.repairs,
             driverrecbatch.fuellitres,
             driverrecbatch.regoweb
             )
             values
            (GEN_ID(GEN_DRIVERREC, 1),
             :ipfordate,
             :ipdriverid,
             1,
             0,
             :ipstarttime,
             :ipendtime,
             0,
             :ipstartkms,
             :ipendkms,
             :ipfuelcost,
             0,
             0,
             0,
             :ipfuellitres,
             :iprego
             );
end^


ALTER PROCEDURE SPSAVE_DRIVERRECBATCH (
    IPBATCHID INTEGER,
    IPDDATE DATE,
    IPDRIVERID INTEGER,
    IPCHEQTOT DECIMAL(18,2),
    IPCASHTOT DECIMAL(18,2),
    IPVERSIONNO INTEGER,
    IPBALANCED SMALLINT,
    IPSTARTTIME TIMESTAMP,
    IPENDTIME TIMESTAMP,
    IPTRUCKID INTEGER,
    IPSTARTKMS INTEGER,
    IPENDKMS INTEGER,
    IPFUELCOST DECIMAL(18,2),
    IPNUMTOLLS INTEGER,
    IPLOSTTIME DECIMAL(15,2),
    IPREPAIRS DECIMAL(15,2))
RETURNS (
    OPBATCHID INTEGER)
AS
BEGIN
  if (ipbatchid = 0) then begin
     opbatchid = GEN_ID(GEN_DRIVERREC, 1);
     insert INTO DRIVERRECBATCH
            (DRIVERRECBATCH.BATCHID,
             DRIVERRECBATCH.DDATE,
             DRIVERRECBATCH.DRIVERID,
             DRIVERRECBATCH.CHEQUEAMT,
             DRIVERRECBATCH.CASHAMT,
             DRIVERRECBATCH.VERSIONNO,
             DRIVERRECBATCH.BALANCED,
             DRIVERRECBATCH.STARTTIME,
             DRIVERRECBATCH.ENDTIME,
             DRIVERRECBATCH.TRUCKID,
             DRIVERRECBATCH.STARTKMS,
             DRIVERRECBATCH.ENDKMS,
             DRIVERRECBATCH.FUELCOST,
             driverrecbatch.NUMTOLLS,
             driverrecbatch.losttime,
             driverrecbatch.repairs
             )
             values
            (:opbatchid,
             :ipddate,
             :ipdriverid,
             :ipcheqtot,
             :ipcashtot,
             1,
             :ipbalanced,
             :ipstarttime,
             :ipendtime,
             :iptruckid,
             :ipstartkms,
             :ipendkms,
             :ipfuelcost,
             :ipnumtolls,
             :iplosttime,
             :iprepairs
             );
  END
  else BEGIN
    opbatchid = ipbatchid;
    update DRIVERRECBATCH
         set DRIVERRECBATCH.CHEQUEAMT = :ipcheqtot,
             DRIVERRECBATCH.CASHAMT = :ipcashtot,
             DRIVERRECBATCH.VERSIONNO = :ipversionno,
             DRIVERRECBATCH.BALANCED = :ipbalanced,
             DRIVERRECBATCH.STARTTIME = :ipstarttime,
             DRIVERRECBATCH.ENDTIME = :ipendtime,
             DRIVERRECBATCH.TRUCKID = :iptruckid,
             DRIVERRECBATCH.STARTKMS = :ipstartkms,
             DRIVERRECBATCH.ENDKMS = :ipendkms,
             DRIVERRECBATCH.FUELCOST = :ipfuelcost,
             driverrecbatch.NUMTOLLS = :ipnumtolls,
             driverrecbatch.losttime = :iplosttime,
             driverrecbatch.repairs = :iprepairs
         where DRIVERRECBATCH.BATCHID = :ipbatchid;
         
    /* the next thing coming over will be the lines
     * so clear the old ones out here
     */
     /* no - now I split the batch and line save...
    delete from DRIVERRECLINE
         where DRIVERRECLINE.BATCHID = :ipbatchid;
     */
  end
  
  /* maintain the driver to truck link as well */
  execute procedure SPSAVE_TRUCKDRIVER(:ipddate,
          :ipdriverid, :iptruckid);
END^


ALTER PROCEDURE SPSAVE_DRIVERRECBATCHBAL (
    IPBATCHID INTEGER DEFAULT NULL,
    IPBALANCED SMALLINT DEFAULT NULL)
AS
BEGIN
    update DRIVERRECBATCH
         set DRIVERRECBATCH.BALANCED = :ipbalanced
         where DRIVERRECBATCH.BATCHID = :ipbatchid;
END^


ALTER PROCEDURE SPSAVE_DRIVERRECLINE (
    IPBATCHID INTEGER = null,
    IPJOBID INTEGER = null,
    IPCHEQALLOC DECIMAL(18,2) = null,
    IPCASHALLOC DECIMAL(18,2) = null,
    IPDD CHAR(12) = null,
    IPPMID INTEGER = null,
    IPDOBINNOS CHAR(30) = null,
    IPPUBINNOS CHAR(30) = null,
    IPPUWEIGHT DECIMAL(5,3) = null,
    IPPUVOLUME DECIMAL(5,2) = null,
    IPSITEID INTEGER = null,
    IPPRICEAREAID INTEGER = null)
AS
BEGIN
  /* make sure this job is not included in any other batch */
  delete from DRIVERRECLINE
         where DRIVERRECLINE.JOBID = :ipjobid;
         
  insert into DRIVERRECLINE
         (DRIVERRECLINE.BATCHID,
          DRIVERRECLINE.JOBID,
          DRIVERRECLINE.CHEQUEALLOC,
          DRIVERRECLINE.CASHALLOC,
          DRIVERRECLINE.DESPATCHDOCKET,
          DRIVERRECLINE.PAYMETHODID,
          DRIVERRECLINE.DOBINNOS,
          DRIVERRECLINE.PUBINNOS,
          driverrecline.puweight,
          driverrecline.puvolume,
          driverrecline.siteid,
          driverrecline.priceareaid)
   values
         (:ipbatchid,
          :ipjobid,
          :ipcheqalloc,
          :ipcashalloc,
          :ipdd,
          :ippmid,
          :ipdobinnos,
          :ippubinnos,
          :ippuweight,
          :ippuvolume,
          :ipsiteid,
          :ippriceareaid
          );
end^


ALTER PROCEDURE SPSAVE_EMAILLOG (
    IPLOGENTRYID INTEGER,
    IPOBJECTTYPE INTEGER,
    IPOBJECTID INTEGER,
    IPTIMESENT TIMESTAMP,
    IPRECIPIENT CHAR(50),
    IPREADRECT INTEGER,
    IPBYUSER INTEGER)
RETURNS (
    OPLOGENTRYID INTEGER)
AS
begin
  if (iplogentryid = 0) then begin
    oplogentryid = gen_id(genemaillogid, 1);
    insert into emaillog
        (emaillog.logentryid,
         emaillog.objecttype,
         emaillog.objectid,
         emaillog.timesent,
         emaillog.recipient,
         emaillog.readreceiptrecvd,
         emaillog.byuser)
       values
        (:oplogentryid,
         :ipobjecttype,
         :ipobjectid,
         :iptimesent,
         :iprecipient,
         :ipreadrect,
         :ipbyuser);
  end
  else begin
    update emaillog set
         emaillog.readreceiptrecvd = :ipreadrect
         where emaillog.logentryid = :iplogentryid;
    oplogentryid = iplogentryid;
  end
end^


ALTER PROCEDURE SPSAVE_EXTCOMMENT (
    IPID INTEGER,
    IPNEXTID INTEGER,
    IPCOMMENTTYPE INTEGER,
    IPCOMMENT CHAR(200))
AS
begin
  update extcomment set extcomment.comments = :ipcomment
         where extcomment.commenttype = :ipcommenttype
           and extcomment.id = :ipid;
  if (row_count = 0)
  then insert into extcomment
          (extcomment.commenttype,
           extcomment.id,
           extcomment.nextid,
           extcomment.comments)
      values
          (:ipcommenttype,
           :ipid, 
           :ipnextid,
           :ipcomment);
end^


ALTER PROCEDURE SPSAVE_FEE (
    IPFEEID INTEGER DEFAULT NULL,
    IPDESCRIPTION CHAR(20) DEFAULT NULL,
    IPAMOUNT DECIMAL(18,2) DEFAULT NULL,
    IPINCEX SMALLINT DEFAULT NULL,
    IPACCOUNTNO CHAR(12) DEFAULT NULL,
    IPITEMCODE CHAR(12) DEFAULT NULL,
    IPVERSIONNO INTEGER DEFAULT NULL)
RETURNS (
    THEFEEID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
DECLARE VARIABLE LVERSIONNO INTEGER;
BEGIN
  /* Procedure body */

  execute procedure UPD_EVENT ('lastmaster');
  
  if (ipfeeid = 0) then
  begin
    thefeeid = GEN_ID(FEE_FEEID, 1);
    insert into fee
         (feeid, description,
          amount, incex,
          accountno,
          itemcode,
          versionno)
         values (:thefeeid, :ipdescription,
                 :ipamount, :ipincex,
                 :ipaccountno, :ipitemcode, 1);
    theversionno = 1;
    thestatus = 0;
  end
  else begin
    SELECT versionno FROM fee where feeid = :ipfeeid
           INTO :lversionno;
    if (lversionno != ipversionno)
    then BEGIN
      theversionno = :lversionno;
      thestatus = 1; /* error - record has changed */
    END
    else begin
      update fee set description = :ipdescription,
                      amount = :ipamount,
                      incex = :ipincex,
                      accountno = :ipaccountno,
                      itemcode = :ipitemcode,
                      versionno = versionno + 1
         where feeid = :ipfeeid;
      thefeeid = :ipfeeid;
      theversionno = :lversionno + 1;
      thestatus = 0;
    end
  END
  
  SUSPEND;

END^


ALTER PROCEDURE SPSAVE_HOLIDAY (
    IPDAYOFF DATE)
AS
declare variable lday integer;
begin
  select count(holidays.closedon)
         from holidays
         where holidays.closedon = :ipdayoff
         into :LDAY;
  if (lday = 0)
  then insert into holidays
                (holidays.closedon)
        values (:ipdayoff);

end^


ALTER PROCEDURE SPSAVE_HOURSWORKED (
    IPHOURSWORKEDID INTEGER,
    IPJOBID INTEGER,
    IPWORKDATE DATE,
    IPSTARTTIME TIME,
    IPENDTIME TIME,
    IPNUMBEROFMEN INTEGER,
    IPJOBTITLEID INTEGER,
    IPFLAGS INTEGER,
    IPRATE DECIMAL(15,2))
RETURNS (
    OPHOURSWORKEDID INTEGER)
AS
begin
  if (iphoursworkedid = 0) then begin
    ophoursworkedid = gen_id(genhoursworkedid, 1);
    insert into jobhoursworked
              (jobhoursworked.jobhoursworkedid,
               jobhoursworked.jobid,
               jobhoursworked.workdate,
               jobhoursworked.starttime,
               jobhoursworked.endtime,
               jobhoursworked.numberofmen,
               jobhoursworked.jobtitleid,
               jobhoursworked.flags,
               jobhoursworked.rate)
             values
              (:ophoursworkedid,
               :ipjobid,
               :ipworkdate,
               :ipstarttime,
               :ipendtime,
               :ipnumberofmen,
               :ipjobtitleid,
               :ipflags,
               :iprate);
  end
  else begin
    ophoursworkedid = iphoursworkedid;
    update jobhoursworked set
             jobhoursworked.workdate = :ipworkdate,
             jobhoursworked.starttime = :ipstarttime,
             jobhoursworked.endtime = :ipendtime,
             jobhoursworked.numberofmen = :ipnumberofmen,
             jobhoursworked.jobtitleid = :ipjobtitleid,
             jobhoursworked.flags = :ipflags,
             jobhoursworked.rate = :iprate
             where jobhoursworked.jobhoursworkedid = :iphoursworkedid;
  end

  suspend;
end^


ALTER PROCEDURE SPSAVE_INCLUDEDWEIGHT (
    IPPRICEAREAID INTEGER,
    IPBINTYPEID INTEGER,
    IPINCLTONS DECIMAL(6,2),
    IPINCLVOLUME DECIMAL(6,2))
AS
begin
  update includedweight set
        includedweight.includedtons = :ipincltons,
        includedweight.includedvolume = :ipinclvolume
        where includedweight.priceareaid = :ippriceareaid
          and includedweight.bintypeid = :ipbintypeid;
  if (row_count = 0)
  then insert into includedweight
        (includedweight.priceareaid,
         includedweight.bintypeid,
         includedweight.includedtons,
         includedweight.includedvolume)
    values  (
         :ippriceareaid,
         :ipbintypeid,
         :ipincltons,
         :ipinclvolume);
end^


ALTER PROCEDURE SPSAVE_INVBATCH (
    IPINVBATCH INTEGER DEFAULT NULL,
    IPCREATEDDATE TIMESTAMP DEFAULT NULL,
    IPEXPORTEDDATE TIMESTAMP DEFAULT NULL,
    IPFILENAME CHAR(50) DEFAULT NULL,
    IPCOUNT SMALLINT DEFAULT NULL,
    IPINVPERIOD INTEGER DEFAULT NULL,
    IPREFID INTEGER DEFAULT NULL)
RETURNS (
    THEINVBATCH INTEGER)
AS
DECLARE VARIABLE LVERSIONNO INTEGER;
BEGIN
  /* Procedure body */
  if (ipinvbatch = 0) then
  begin
    theinvbatch = GEN_ID(GENINVBATCH, 1);
    insert into invoicebatch
         (invbatchno,
          createddate, exporteddate,
          exportedfilename, exportedcount,
          invperiod, versionno,
          refid)
         values (:theinvbatch,
          :ipcreateddate, :ipexporteddate,
          :ipfilename, :ipcount,
          :ipinvperiod, 1,
          :iprefid);
          /*
    theversionno = 1;
    thestatus = 0;
    */
  end
  else begin
  /*
   theinvbatch = :ipinvbatch;
   SELECT versionno FROM invoicebatch where invbatchno = :ipinvbatch
           INTO :lversionno;
    if (lversionno != ipversionno)
    then BEGIN
      theversionno = :lversionno;
      thestatus = 1;
    END
    else begin
      lversionno = :lversionno + 1;
      */
      update invoicebatch set
           /* createddate = :ipcreateddate, can't change */
           exporteddate = :ipexporteddate,
           exportedfilename = :ipfilename,
           exportedcount = :ipcount,
           /* invperiod = :ipinvperiod,  can't change */
           versionno = versionno + 1,
           refid = :iprefid
         where invbatchno = :ipinvbatch
        ;
      theinvbatch = :ipinvbatch;
        /*
      theversionno = :lversionno;
      thestatus = 0;
    end */
  END
  
  SUSPEND;
END^


ALTER PROCEDURE SPSAVE_INVCOMMENTS (
    IPINVNO INTEGER DEFAULT NULL,
    IPCOMMENTS CHAR(200) DEFAULT NULL)
AS
BEGIN
  update invoice
     set invoice.COMMENTS = :ipcomments
     where invoice.invno = :ipinvno;
END^


ALTER PROCEDURE SPSAVE_INVITEMCODE (
    IPINVNO INTEGER DEFAULT NULL,
    IPLINENO INTEGER DEFAULT NULL,
    IPITEMCODE CHAR(12) DEFAULT NULL)
AS
BEGIN
  update INVLINE
         set INVLINE.ITEMCODE = :ipitemcode
         where INVLINE.INVNO = :ipinvno
           and invline.INVLINENO = :iplineno;
END^


ALTER PROCEDURE SPSAVE_INVLINE (
    IPINVNO INTEGER = null,
    IPLINENO INTEGER = null,
    IPEXGSTVALUE DECIMAL(18,2) = null,
    IPGST DECIMAL(18,2) = null,
    IPTOTALVALUE DECIMAL(18,2) = null,
    IPLINETYPE SMALLINT = null,
    IPJOBID INTEGER = null,
    IPFEEID INTEGER = null,
    IPITEMCODE CHAR(12) = null,
    IPDOJOBID INTEGER = null)
RETURNS (
    ERRSTATUS INTEGER)
AS
declare variable linvno integer;
declare variable luselinetype integer;
BEGIN
  /* this is a 'save once' type record so no need for versionnos */
  errstatus = 0;
  linvno = 0;

  luselinetype = iplinetype;
  
  if (iplinetype = 1) then begin
    /* it must be a from a fee */
    select jobfee.invno from jobfee
       where jobfee.jobid = :ipjobid
         and jobfee.feeid = :ipfeeid
       into :linvno;
  end
  else if (iplinetype = 0 or
           iplinetype = 11 or
           iplinetype = 13) then begin
    /* else a job or a LCT job (which is still a job) */
    select job.invno from job where job.jobid = :ipjobid
           into :linvno;
  end
  else if (iplinetype = 2) then begin
       select tip.invno from tip where tip.id = :ipjobid
           into :linvno;
  end
  else if (iplinetype = 3) then begin /* tipfees */
  /* for tipfees the unique tipfee id is passed in in jobid */
  select tipfee.invno from TIPFEE
       where tipfee.id = :ipjobid
       into :linvno;
  end
  else if (iplinetype = 6) then begin
    /* else a job2 */
    select job2.puinvno from job2 where job2.jobid = :ipjobid
           into :linvno;
  end
  else if (iplinetype = 7) then begin
    /* else an adhoccharge */
    select adhoccharge.invno from adhoccharge where adhoccharge.adhocchargeid = :ipjobid
           into :linvno;
  end
  else if (iplinetype = 8) then begin
    /* else a PU weight line where the drop and pu are invoiced both together after PU job */
    select job2.puinvno from job2 where job2.jobid = :ipjobid
           into :linvno;
  end
  else if (iplinetype = 10) then begin
    /* else an invoice at pick up time but based on delivery job */
    select job.invno from job where job.jobid = :ipjobid
           into :linvno;
  end
  /* else linetype = 11 <-- LCT jobs... */
  /*
  else if (iplinetype = 12) then begin
    select scraploadline.scraploadid, scraploadline.invlineno from scraploadline
           where scraploadline.scraploadlineid = :ipjobid
           into :lid, :linvno;
     * for scrap loads we will leave the invlineno in the :linvno field, this is
     * because the invno is held in the header table, scrapload. And if this is not
     * the first line to be invoiced then the header will already have an invno and
     * therefore if we used the invno to check if this item was already invoiced
     * it would appear like it was invoiced but really it would only be because the
     * invno is being stored in a shared space (shared by all the lines on the load)
     * So I use the invlineno to see if this has already been invoiced.  
    select scrapload.invno from scrapload where scrapload.scraploadid = :lid
           into :linvno;
      
  end
  */
  else if (iplinetype = 14) then begin
    /* frontlift service job invoice line */
    select fl_contractjob.invoicenumber from fl_contractjob where fl_contractjob.contractjobid = :ipjobid
           into :linvno;
  end
  else if (iplinetype = 15) then begin
    /* frontlift weekly hire charge */
    select weeklyhire.invoicenumber
       from weeklyhire
       where weeklyhire.weeklyhireid = :ipjobid
       into :linvno;
  end
  else if (iplinetype = 16) then begin
    /* frontlift excess weight invoice line */
    select fl_contractjob.invoicenumberexcessweight from fl_contractjob where fl_contractjob.contractjobid = :ipjobid
           into :linvno;
  end
  else if (iplinetype = 17) then begin
    /* frontlift delivery job invoice line */
    select fl_contractdetail.deliveryinvoicenumber from fl_contractdetail
           where fl_contractdetail.contractdetailid = :ipjobid
           into :linvno;
  end
  
  if (linvno != 0 and linvno != ipinvno) then begin
      errstatus = 2; /* job or fee is already invoiced */
  end
  else BEGIN
   insert into invline
     (invno,
      invlineno,
      exgstvalue,
      gst,
      totalvalue,
      linetype,
      itemcode)
      values (
      :ipinvno,
      :iplineno,
      :ipexgstvalue,
      :ipgst,
      :iptotalvalue,
      :luselinetype,
      :ipitemcode
      );
   /* if (ipfeeid > 0) then begin */
   if (iplinetype = 1) then begin
     update JOBFEE
             set jobfee.invno = :ipinvno,
                 jobfee.INVLINE = :iplineno
             where jobfee.jobid = :ipjobid
               and jobfee.feeid = :ipfeeid;
   end
   else if (iplinetype = 0 or
            iplinetype = 11 or
            iplinetype = 13) then begin
    update job 
             set job.INVNO = :ipinvno,
                 job.INVLINENO = :iplineno
             where job.jobid = :ipjobid;
    update invcomment
            set invcomment.invno = :ipinvno,
                invcomment.invlineno = :iplineno
            where invcomment.jobid = :ipjobid;
    /* special for linetype 13 (invoice for delivery at delivert then weight at PU)
     * is that we have to do job2 as well
     */
    if (iplinetype = 13)
    then update job2 set job2.puinvoiceable = 2,  /* 2 = job has been invoiced */
       job2.PUINVNO = :ipinvno,  /* need to set these fields so that the  */
       job2.PUINVLINENO = :iplineno  /* delete invoice sp can find them */
            where job2.jobid = :ipjobid;
   end
   else if (iplinetype = 2) then begin
    update tip
             set tip.INVNO = :ipinvno,
                 tip.INVLINENO = :iplineno
             where tip.id = :ipjobid;
   end
   else if (iplinetype = 3) then begin /* only tipfees left */
    /* note that here the unique index is by tipfee.id
     * and that number is passed in jobid (not in feeid
     * as that has to hold the actual fee.feeid)
     */
     update TIPFEE
             set tipfee.invno = :ipinvno,
                 tipfee.INVLINENO = :iplineno
             where tipfee.id = :ipjobid;
   end
   else if (iplinetype = 6) then begin
    update job2
             set job2.PUINVNO = :ipinvno,
                 job2.PUINVLINENO = :iplineno,
                 job2.puinvoiceable = 2  /* 2 = job has been invoiced */
             where job2.jobid = :ipjobid;
   end
   else if (iplinetype = 7) then begin
    update adhoccharge
             set adhoccharge.invno = :ipinvno,
                 adhoccharge.invlineno = :iplineno,
                 adhoccharge.invoiceable = 2  /* 2 = job has been invoiced */
             where adhoccharge.adhocchargeid = :ipjobid;
   end
   else if (iplinetype = 8) then begin
    /* else a PU weight line where the drop and pu are invoiced both together after PU job */
    update job2
             set job2.PUINVNO = :ipinvno,
                 job2.PUINVLINENO = :iplineno,
                 job2.puinvoiceable = 2  /* 2 = job has been invoiced */
             where job2.jobid = :ipjobid;
    update invcomment
            set invcomment.invno = :ipinvno,
                invcomment.invlineno = :iplineno
            where invcomment.jobid = :ipjobid;
    /* and we also have to do the drop side of things but for this case the drop job
     * gets a negative line number - it's a long story
     */
    update job
             set job.INVNO = :ipinvno,
                 job.INVLINENO = (0 - :iplineno)
             where job.jobid = :ipdojobid;
    update invcomment
            set invcomment.invno = :ipinvno,
                invcomment.invlineno = (0 - :iplineno)
            where invcomment.jobid = :ipdojobid;
  end
  else if (iplinetype = 10) then begin
    update job 
             set job.INVNO = :ipinvno,
                 job.INVLINENO = :iplineno
             where job.jobid = :ipjobid;
    update invcomment
            set invcomment.invno = :ipinvno,
                invcomment.invlineno = :iplineno
            where invcomment.jobid = :ipjobid;
    /*
    update job2
    set job2.puinvoiceable = 2,  // 2 = job has been invoiced
        job2.PUINVNO = :ipinvno,  // need to set these fields so that the
        job2.PUINVLINENO = :iplineno  // delete invoice sp can find them
             where job2.jobid = :ipjobid;
     */
   end
   /*
   else if (iplinetype = 12) then begin
     update scraploadline set scraploadline.invlineno = :iplineno
           where scraploadline.scraploadlineid = :ipjobid;
     update scrapload set scrapload.invno = :ipinvno
           where scrapload.scraploadid = :lid;
   end
   */
   else if (iplinetype = 14) then begin
     update fl_contractjob
            set fl_contractjob.invoicenumber = :ipinvno,
                fl_contractjob.invoicelinenumber = :iplineno
            where fl_contractjob.contractjobid = :ipjobid;
   end
   else if (iplinetype = 15) then begin
     update weeklyhire
            set weeklyhire.invoicenumber = :ipinvno,
                weeklyhire.invoicelinenumber = :iplineno
            where weeklyhire.weeklyhireid = :ipjobid;
   end
   else if (iplinetype = 16) then begin
     update fl_contractjob
            set fl_contractjob.invoicenumberexcessweight = :ipinvno,
                fl_contractjob.invoicelinenumberExcessWeight = :iplineno
            where fl_contractjob.contractjobid = :ipjobid;
   end
   else if (iplinetype = 17) then begin
     update fl_contractdetail
            set fl_contractdetail.deliveryinvoicenumber = :ipinvno,
                fl_contractdetail.deliveryinvoicelinenumber = :iplineno
            where fl_contractdetail.contractdetailid = :ipjobid;
   end

   errstatus = 0;
  end
  suspend;

end^


ALTER PROCEDURE SPSAVE_INVLINECHG (
    IPINVNO INTEGER DEFAULT NULL,
    IPINVLINENO INTEGER DEFAULT NULL,
    IPEXGST DECIMAL(18,2) DEFAULT NULL,
    IPGST DECIMAL(18,2) DEFAULT NULL,
    IPTOTAL DECIMAL(18,2) DEFAULT NULL)
AS
BEGIN
  update invline set
         invline.EXGSTVALUE = :ipexgst,
         invline.GST = :ipgst,
         INVLINE.TOTALVALUE = :iptotal
         where invline.INVNO = :ipinvno
           and INVLINE.INVLINENO = :ipinvlineno;
END^


ALTER PROCEDURE SPSAVE_INVLINECOMMENT (
    IPJOBID INTEGER,
    IPCOMMENT CHAR(201),
    IPINVNO INTEGER,
    IPINVLINENO INTEGER)
AS
begin
  if (ipcomment = '') then begin
    delete from invcomment
            where invcomment.jobid = :ipjobid;
  end
  else begin
   update invcomment
     set invcomment.comment = :ipcomment,
         invcomment.invno = :ipinvno,
         invcomment.invlineno = :ipinvlineno
     where invcomment.jobid = :ipjobid;
   if (row_count = 0)
   then insert into invcomment
        (invcomment.jobid,
         invcomment.comment,
         invcomment.invno,
         invcomment.invlineno)
        values (:ipjobid,
                :ipcomment,
                :ipinvno,
                :ipinvlineno);
  end
end^


ALTER PROCEDURE SPSAVE_INVOICE (
    IPINVBATCH INTEGER = null,
    IPCUSTID INTEGER = null,
    IPINVDATE DATE = null,
    IPDUEDATE DATE = null,
    IPBILLADDRID INTEGER = null,
    IPCOMMENTS CHAR(200) = null,
    IPDESIREDINVNO INTEGER = null)
RETURNS (
    OPINVNO INTEGER,
    ERRSTATUS INTEGER)
AS
declare variable lcount integer;
BEGIN
  select COUNT(invbatchno) from invoicebatch
     where invoicebatch.invbatchno = :ipinvbatch
     into :lcount;
  if (lcount = 0) then begin
    errstatus = 3;  /* no invoice batch record */
  END
  else begin

    if (ipdesiredinvno != 0)
    then opinvno = ipdesiredinvno;
    else opinvno = GEN_ID(GENINVOICENO, 1);

    select count(*)
           from INVOICE
           where invoice.invno = :opinvno
           into :LCOUNT;
    if (lcount = 0)
    then select count(*)
            from bookinvno
            where bookinvno.invno = :opinvno
            into :LCOUNT;

    while (LCOUNT > 0) do
    begin
         opinvno = GEN_ID(GENINVOICENO, 1);
         select count(*)
           from INVOICE
           where invoice.invno = :opinvno
           into :LCOUNT;
         if (lcount = 0)
         then select count(*)
            from bookinvno
            where bookinvno.invno = :opinvno
            into :LCOUNT;
    end
    
    insert into invoice
         (invno, invbatchid,
          custid, invdate,
          duedate, billaddrid,
          invoice.COMMENTS,
          invoice.paidinfull,
          invoice.paidsofar
          )
         values (
          :opinvno, :ipinvbatch,
          :ipcustid, :ipinvdate,
          :ipduedate, :ipbilladdrid,
          :ipcomments,
          0,
          0
          );
     errstatus = 0; /* a good save */
  end
  SUSPEND;
END^


ALTER PROCEDURE SPSAVE_INVOICECHG (
    IPINVNO INTEGER DEFAULT NULL,
    IPNEWCUSTID INTEGER DEFAULT NULL)
AS
BEGIN
  update invoice
     set invoice.CUSTID = :ipnewcustid
     where invoice.INVNO = :ipinvno;
END^


ALTER PROCEDURE SPSAVE_INVOICEPAIDDETS (
    IPINVNO INTEGER,
    IPPAIDINFULL INTEGER,
    IPPAIDSOFAR DECIMAL(18,2))
AS
begin
  update invoice
     set invoice.paidinfull = :ippaidinfull,
         invoice.paidsofar = :ippaidsofar
     where invoice.invno = :ipinvno;
end^


ALTER PROCEDURE SPSAVE_JOB (
    IPJOBID INTEGER,
    IPJOBDATE DATE,
    IPORDERID INTEGER,
    IPBINTYPEIDOUT INTEGER,
    IPBINSOUT INTEGER,
    IPBINTYPEIDIN INTEGER,
    IPBINSIN INTEGER,
    IPDRIVERID INTEGER,
    IPCONTACT CHAR(30),
    IPJOBTIME CHAR(10),
    IPCOMMENTS CHAR(200),
    IPPRICEAREAID INTEGER,
    IPPRICE DECIMAL(18,4),
    IPINCEX SMALLINT,
    IPORDERDAYSEQNO SMALLINT,
    IPJOBTYPE SMALLINT,
    IPJOBSTATUS INTEGER,
    IPCUSTREFERENCE CHAR(100),
    IPVERSIONNO INTEGER,
    IPNJOBTIME TIMESTAMP,
    IPASBESTOSBINS INTEGER,
    IPLASTAMENDED TIMESTAMP,
    IPCUSTID INTEGER,
    IPINVNO INTEGER,
    IPINVLINENO INTEGER,
    IPINVOICEABLE INTEGER,
    IPOFFICENOTES CHAR(200),
    IPDOBINNOS CHAR(60),
    IPPUBINNOS CHAR(60),
    IPVWJOBSEQNO INTEGER,
    IPDESPATCHDOCKET CHAR(12) CHARACTER SET ASCII,
    IPFROMSITEID INTEGER,
    IPEPA CHAR(12) CHARACTER SET ASCII,
    IPWTD CHAR(12) CHARACTER SET ASCII,
    IPTOSITEID INTEGER,
    IPFULLE SMALLINT,
    IPPAYMETHODID INTEGER,
    IPBTRELOCATE INTEGER,
    IPRELOCCOUNT INTEGER,
    IPINVRELOC INTEGER,
    IPCLOBBER SMALLINT,
    IPBINFORMATOUT INTEGER,
    IPBINFORMATIN INTEGER,
    IPBINFORMATREL INTEGER,
    IPISPAID SMALLINT,
    IPMATERIALID INTEGER,
    IPUSERID INTEGER,
    IPTELEPHONE CHAR(30),
    IPPRIORITYLEVEL INTEGER,
    IPRGWEIGHT DECIMAL(6,2),
    IPRGID INTEGER,
    IPSITEBINS INTEGER,
    IPORDERPLACEDBY CHAR(30),
    IPPUWEIGHT DECIMAL(5,3),
    IPINTEGERDD INTEGER,
    IPWHENTOINVOICE INTEGER,
    IPTIPATSITEID INTEGER)
RETURNS (
    THEJOBID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
declare variable loldjobdate date;
declare variable loldstatus integer;
declare variable lfromsiteid integer;
declare variable ltositeid integer;
declare variable lfulle smallint;
declare variable lbintypeidout integer;
declare variable lbintypeidin integer;
declare variable lmoveiddo integer;
declare variable lmoveidpu integer;
declare variable lbinsout integer;
declare variable lbinsin integer;
BEGIN
  
  /* Procedure body */
  if (ipjobid = 0) then begin
    thejobid = GEN_ID(JOB_JOBID_GEN, 1);
    insert into job (orderid,
                     jobid,
                     bintypeid_out,
                     bins_out,
                     bintypeid_in,
                     bins_in,
                     jobdate,
                     driverid,
                     contact,
                     jobtime,
                     comments,
                     priceareaid,
                     job.extaxprice,
                     incex,
                     orderdayseqno,
                     jobtype,
                     jobstatus,
                     custreference,
                     versionno,
                     njobtime,
                     asbestosbins,
                     dtentered,
                     dtlastamended,
                     custid,
                     invno,
                     invlineno,
                     invoiceable,
                     officenotes,
                     dobinnos,
                     pubinnos,
                     vwjobseqno,
                     job.despatchdocket,
                     job.fromsiteid,
                     job.epa,
                     job.wtd,
                     JOB.TOSITEID,
                     job.FULLE,
                     job.PAYMETHODID,
                     job.BINTYPERELOCATE,
                     job.BINS_RELOCATE,
                     job.INVOICERELOCATE,
                     JOB.BINFORMATOUT,
                     job.BINFORMATIN,
                     job.BINFORMATREL,
                     job.PAYMREFERENCE,
                     job.ISPAID,
                     job.materialid,
                     JOB.USERID,
                     job.telephone,
                     job.PRIORITYLEVEL,
                     job.rgweight, 
                     job.rgid,
                     job.sitebins,
                     job.orderplacedby,
                     job.puweight,
                     job.whentoinvoice,
                     job.jobdetailsdone   /* this is the site the bins were tipped at */
                     )
         values (:iporderid,
                 :thejobid,
                 :ipbintypeidout,
                 :ipbinsout,
                 :ipbintypeidin,
                 :ipbinsin,
                 :ipjobdate,
                 :ipdriverid,
                 :ipcontact,
                 :ipjobtime,
                 :ipcomments,
                 :ippriceareaid,
                 :ipprice,
                 :ipincex,
                 :iporderdayseqno,
                 :ipjobtype,
                 :ipjobstatus,
                 :ipcustreference,
                 1,
                 :ipnjobtime,
                 :ipasbestosbins,
                 current_timestamp,
                 current_timestamp,
                 :ipcustid,
                 :ipinvno,
                 :ipinvlineno,
                 :ipinvoiceable,
                 :ipofficenotes,
                 :ipdobinnos,
                 :ippubinnos,
                 :ipvwjobseqno,
                 
                 :ipdespatchdocket,
                 :ipfromsiteid,
                 :ipepa,
                 :ipwtd,
                 :iptositeid,
                 :ipfulle,
                 :ippaymethodid,
                 :ipbtrelocate,
                 :ipreloccount,
                 :ipinvreloc,
                 :ipbinformatout,
                 :ipbinformatin,
                 :ipbinformatrel,
                 '',
                 :ipispaid,
                 :ipmaterialid,
                 :ipuserid,
                 :iptelephone,
                 :ipprioritylevel,
                 :iprgweight, 
                 :iprgid,
                 :ipsitebins,
                 :iporderplacedby,
                 :ippuweight,
                 :ipwhentoinvoice,
                 :iptipatsiteid
                 );
    theversionno = 1;
    thestatus = 0;
  end
  else BEGIN
     SELECT versionno FROM job where jobid = :ipjobid
           INTO :theversionno;
    /* validate the versionno only if we are not clobbering */
    if (:ipclobber = 0 and theversionno != ipversionno)
    then BEGIN
      thestatus = 1; /* error - record has changed */
    END
    else begin
      /* save these as we need them for the move stuff */
      if (ipjobtype != 5) /* ignore relocate type jobs */
      then SELECT job.JOBDATE, job.JOBSTATUS, job.FROMSITEID, job.TOSITEID,
             job.FULLE,
             job.BINTYPEID_OUT, job.BINTYPEID_IN, job.MOVEIDDO,
             job.MOVEIDPU, job.BINS_OUT, job.BINS_IN
             from job
             where job.jobid = :ipjobid
             into :loldjobdate,
                  :loldstatus,
                  :lfromsiteid,
                  :ltositeid,
                  :lfulle,
                  :lbintypeidout,
                  :lbintypeidin,
                  :lmoveiddo,
                  :lmoveidpu,
                  :lbinsout,
                  :lbinsin ;
                  
      update job set 
                 bintypeid_out = :ipbintypeidout,
                 bins_out = :ipbinsout,
                 bintypeid_in = :ipbintypeidin,
                 bins_in = :ipbinsin,
                 jobdate = :ipjobdate,
                 driverid = :ipdriverid,
                 contact = :ipcontact,
                 jobtime = :ipjobtime,
                 comments = :ipcomments,
                 priceareaid = :ippriceareaid,
                 job.extaxprice = :ipprice,
                 incex = :ipincex,
                 orderdayseqno = :iporderdayseqno,
                 jobtype = :ipjobtype,
                 jobstatus = :ipjobstatus,
                 custreference = :ipcustreference,
                 versionno = versionno + 1,
                 njobtime = :ipnjobtime,
                 asbestosbins = :ipasbestosbins,
                 dtlastamended = :iplastamended,
                 custid = :ipcustid,
                 /* these two taken out as invno and invlineno are only ever changed
                  * by the save_invline sp and the danger of having them here is that
                  * they will clobber real values
                  */
                 /* invno = :ipinvno, */
                 /* invlineno = :ipinvlineno, */
                 invoiceable = :ipinvoiceable,
                 officenotes = :ipofficenotes,
                 dobinnos = :ipdobinnos,
                 pubinnos = :ippubinnos,
                 vwjobseqno = :ipvwjobseqno,
                 
                 job.despatchdocket = :ipdespatchdocket,
                 job.fromsiteid = :ipfromsiteid,
                 job.epa = :ipepa,
                 job.wtd = :ipwtd,
                 JOB.TOSITEID = :iptositeid,
                 job.fulle = :ipfulle,
                 JOB.PAYMETHODID = :ippaymethodid,
                 job.BINTYPERELOCATE = :ipbtrelocate,
                 job.BINS_RELOCATE = :ipreloccount,
                 job.INVOICERELOCATE = :ipinvreloc,
                 job.BINFORMATOUT = :ipbinformatout,
                 job.BINFORMATIN = :ipbinformatin,
                 job.BINFORMATREL = :ipbinformatrel,
                 job.PAYMREFERENCE = '',
                 job.ISPAID = :ipispaid,
                 job.MATERIALID = :ipmaterialid,
                 job.userid = :ipuserid,
                 job.telephone = :iptelephone,
                 job.prioritylevel = :ipprioritylevel,
                 job.rgweight = :iprgweight,
                 job.rgid = :iprgid,
                 job.sitebins = :ipsitebins,
                 job.orderplacedby = :iporderplacedby,
                 job.puweight = :ippuweight,
                 job.whentoinvoice = :ipwhentoinvoice,
                 job.jobdetailsdone = :iptipatsiteid
        where jobid = :ipjobid;
      thejobid = :ipjobid;
      theversionno = :ipversionno + 1;
      thestatus = 0;
      
      if (ipjobtype != 5) /* ignore relocate type jobs */
      then EXECUTE PROCEDURE SPSAVE_JOBMV
              (ipjobid,
               loldjobdate,
               ipjobdate,
               loldstatus,
               ipjobstatus,
               lfromsiteid,
               ipfromsiteid,
               ltositeid,
               iptositeid,
               lfulle,
               ipfulle,
               lbintypeidout,
               lbintypeidin,
               ipbintypeidout,
               ipbintypeidin,
               lmoveiddo,
               lmoveidpu,
               lbinsout,
               ipbinsout,
               lbinsin,
               ipbinsin);
    end
  end

  /* if we store integer despatch dockets then I need to save an integer version
   * of the despatch docket into the job2 record. All this just to get a report
   * by despatch docket working
   */
  if (ipintegerdd = 1 and trim(ipdespatchdocket) != '') then begin
    BEGIN
      lbinsin = CAST(ipdespatchdocket AS INTEGER);
      WHEN ANY DO lbinsin = 0;
    END
    update job2
             set job2.idespatchdocketno = :lbinsin
             where job2.jobid = :thejobid;
    if (row_count = 0)
    then insert into job2
        (job2.jobid, job2.idespatchdocketno)
        values (:thejobid, :lbinsin);
   end

   /* if the pu weight or pu volume is > 0 then we need to make sure that the
    * job is set to be invoiced (if it is the invoice at pick up type
    */
   if (/* :ippuweight != 0 and    */
       :ipbinsin > 0 and  /* it must be a pick up style job */
       (:ipwhentoinvoice = 1 or :ipwhentoinvoice = 2)) then begin
    /* what is the current value of the invoiceable field - we
     * don't want to change it back to 'tobeinvoiced' if it is
     * already invoiced so here I find it first and check it
     */
    select job2.puinvoiceable
          from job2
          where job2.jobid = :ipjobid
          into :loldstatus;
          /* 2 == has been invoiced - we don't want to set it back to invoiceable if it has already been invoiced */
    if (loldstatus is null or loldstatus != 2) then begin
      update job2
        set job2.puinvoiceable = 1  /* 1 == eJob2Invoiceable.ToBeInvoiced */
        where job2.jobid = :thejobid;
      if (row_count = 0) then
        insert into job2
          (job2.jobid, puinvoiceable)
          values
          (:thejobid, 1);
    end
  end

  SUSPEND;
  
end^


ALTER PROCEDURE SPSAVE_JOB2GPS (
    IPJOBID INTEGER,
    IPIMGNUMBER INTEGER,
    IPLAT DECIMAL(11,6),
    IPLONG DECIMAL(11,6))
AS
begin
/* this is for when the photo details were in the job2 table
  update job2 set job2.photolatitude = :iplat,
                  job2.photolongitude = :iplong
            where job2.jobid = :ipjobid;
  if (row_count = 0)
  then insert into job2 (job2.jobid,
             job2.photolatitude,
             job2.photolongitude)
              values (:ipjobid,
                      :iplat,
                      :iplong);
   */
   update jobbinphotos set
        jobbinphotos.photolatitude = :iplat, 
        jobbinphotos.photolongitude = :iplong
        where jobbinphotos.jobid = :ipjobid
          and jobbinphotos.imgnumber = :ipimgnumber;
   if (row_count = 0)
   then insert into jobbinphotos
            (jobbinphotos.jobid,
             jobbinphotos.imgnumber,
             jobbinphotos.photolatitude,
             jobbinphotos.photolongitude)
            values
            (:ipjobid,
             :ipimgnumber,
             :iplat,
             :iplong);
end^


ALTER PROCEDURE SPSAVE_JOB2INVVALS (
    IPJOBID INTEGER,
    IPINVWEIGHT DECIMAL(5,3),
    IPINVRATE DECIMAL(6,2))
AS
begin
  update job2
      set job2.invoicedpuweight = :ipinvweight,
          job2.invoicedprice = :ipinvrate
    where job2.jobid = :ipjobid;
end^


ALTER PROCEDURE SPSAVE_JOB2PHOTOTIME (
    IPJOBID INTEGER,
    IPIMGNUMBER INTEGER,
    IPCOMMENT CHAR(100),
    IPTIMECAPTURED TIMESTAMP)
AS
begin

 /* this is when we only allowed one photo per job and the details were kept in the job2 table

 update job2 set job2.phototime = current_timestamp

           where job2.jobid = :ipjobid;

 if (row_count = 0)

 then insert into job2 (job2.jobid,

            job2.phototime)

             values (:ipjobid,

                     current_timestamp);

    */

 update jobbinphotos set

       jobbinphotos.phototime = :iptimecaptured,

       jobbinphotos.comments = :ipcomment

       where jobbinphotos.jobid = :ipjobid

         and jobbinphotos.imgnumber = :ipimgnumber;

  if (row_count = 0)

  then insert into jobbinphotos

           (jobbinphotos.jobid,

            jobbinphotos.imgnumber,

            jobbinphotos.phototime,

            jobbinphotos.comments)

           values

           (:ipjobid,

            :ipimgnumber,

            :iptimecaptured,

            :ipcomment);

end^


ALTER PROCEDURE SPSAVE_JOB2WEB (
    IPJOBID INTEGER,
    IPTIMESIGNED TIMESTAMP,
    IPPERSONSIGNED CHAR(50),
    IPBINLOCATION CHAR(50),
    IPINSTRUCTEDBY CHAR(50))
AS
begin
  update job2 set job2.timesigned = :iptimesigned,
                  job2.personwhosigned = :ippersonsigned,
                  job2.binlocation = :ipbinlocation,
                  job2.instructedby = :ipinstructedby
            where job2.jobid = :ipjobid;
  if (row_count = 0)
  then insert into job2 (job2.jobid,
             job2.timesigned,
             job2.personwhosigned,
             job2.binlocation,
             job2.instructedby)
              values (:ipjobid,
                      :iptimesigned,
                      :ippersonsigned,
                      :ipbinlocation,
                      :ipinstructedby);
end^


ALTER PROCEDURE SPSAVE_JOBBINCOMPANY (
    IPJOBID INTEGER,
    IPBINCOMPANYID INTEGER,
    IPBUYPRICE INTEGER,
    IPORDERDAYSEQNO INTEGER,
    IPJOBSTATUS INTEGER)
AS
begin
  update job set
     job.driverid = :ipbincompanyid,
     job.rgid = :ipbuyprice,
     job.orderdayseqno = :iporderdayseqno,
     job.jobstatus = :ipjobstatus
     where job.jobid = :ipjobid;
  
  execute procedure UPD_EVENT ('lastjob');
end^


ALTER PROCEDURE SPSAVE_JOBBINNOS (
    IPJOBID INTEGER = null,
    IPDIRECTION SMALLINT = null,
    IPBINNO CHAR(8) = null)
AS
BEGIN
  /* 28/10/2010 - I changed the order of these statements (the upd_event call
   * use to be first). This was to try and stop a deadlock that Orange are
   * having
   */

  insert into jobbins
    (JOBBINS.JOBID, JOBBINS.DIRECTION, JOBBINS.CBINNO)
    values (:ipjobid, :ipdirection, :ipbinno);  

  execute procedure UPD_EVENT ('lastjob');
end^


ALTER PROCEDURE SPSAVE_JOBDD (
    IPJOBID INTEGER = null,
    IPDDNO CHAR(12) CHARACTER SET ASCII = null,
    IPINTEGERDD INTEGER = null)
AS
declare variable lint integer;
BEGIN
 if (ipjobid < 0) then begin
    /* this is for truck and dog loads */
    update truckanddog set
        truckanddog.docketno = :ipddno
        where truckanddog.truckanddogid = (0 - :ipjobid);
 end
 else begin
  update job set
                 job.DESPATCHDOCKET = :ipddno,
                 job.DTLASTAMENDED = current_timestamp
        where jobid = :ipjobid;

  /* if we store integer despatch dockets then I need to save an integer version
   * of the despatch docket into the job2 record. All this just to get a report
   * by despatch docket working
   */
  /* I use to check that the despatch docket number was not "" before doing this
   * but this meant that if the user removed the dd number (by clearing the dd field
   * for instance) then the job2 record was left with the old number, I think now
   * that it should be reset to 0 in this case
   */
  if (ipintegerdd = 1) then begin  /* and ipddno != '') then begin */
    BEGIN
      lint = CAST(ipddno AS INTEGER);
      WHEN ANY DO lint = 0;
    END
    update job2
             set job2.idespatchdocketno = :lint
             where job2.jobid = :ipjobid;
    if (row_count = 0)
    then insert into job2
        (job2.jobid, job2.idespatchdocketno)
        values (:ipjobid, :lint);
   end
  end

  execute procedure UPD_EVENT ('lastjob');
end^


ALTER PROCEDURE SPSAVE_JOBDDEMAIL (
    IPJOBID INTEGER,
    IPDDEMAIL CHAR(60))
AS
begin
  update jobmoneypaid set jobmoneypaid.emailaddress = :ipddemail
         where jobmoneypaid.jobid = :ipjobid;

  if (row_count = 0)
  then insert into jobmoneypaid (jobmoneypaid.jobid, jobmoneypaid.emailaddress)
            values (:ipjobid, :ipddemail);
end^


ALTER PROCEDURE SPSAVE_JOBDONEWEB (
    IPJOBID INTEGER,
    IPNEWSTATUS INTEGER)
AS
declare variable loldstatus integer;
declare variable lorderid integer;
begin
  select job.jobstatus, job.orderid
       from job
       where job.jobid = :ipjobid
       into :loldstatus,  :lorderid;
  execute procedure spsave_jobstatus (:ipjobid, :loldstatus, :ipnewstatus, :lorderid, 3)
       returning_values :loldstatus;
end^


ALTER PROCEDURE SPSAVE_JOBDRIVER (
    IPJOBID INTEGER = null,
    IPNEWDRIVER INTEGER = null,
    IPSEQNO INTEGER = null)
AS
BEGIN
      update job set
                 job.driverid = :ipnewdriver,
                 job.ORDERDAYSEQNO = :ipseqno,
                 job.DTLASTAMENDED = current_timestamp
        where job.jobid = :ipjobid;

        /* now we need a second update _to the same record_ just to make sure the
         * 'sent to driver' flag is cleared. If we make all driverwatch customers
         * go to firebird server 2.5 I could use one of the new bit wise functions
         * but making everybody update their server software is a bit much just to
         * avoid one read operation
         */
        update job set
                 /* clear the 'sent to mobile device' flag */
                 job.prioritylevel = job.prioritylevel - 8192
        where job.jobid = :ipjobid
          and ((job.prioritylevel / 8192 / 2) - (job.prioritylevel / 8192 / 2.0)) != 0;

      execute procedure UPD_EVENT ('lastjob');
END^


ALTER PROCEDURE SPSAVE_JOBEPAWTD (
    IPJOBID INTEGER,
    IPEPA CHAR(12),
    IPWTD CHAR(12))
AS
begin
  update job set
                 job.epa = :ipepa,
                 job.wtd = :ipwtd
        where jobid = :ipjobid;
  execute procedure UPD_EVENT ('lastjob');
end^


ALTER PROCEDURE SPSAVE_JOBEVENTTIMES (
    IPID INTEGER,
    IPEVENTTYPE INTEGER,
    IPEVENTTIME TIMESTAMP,
    IPOBJECTID INTEGER,
    IPINFO CHAR(60))
RETURNS (
    OPID INTEGER)
AS
begin
  if (ipid = 0) then begin
    opid = GEN_ID(BINMVID, 1);
    insert into jobeventtimes (jobeventtimes.id,
             jobeventtimes.eventtype,
             jobeventtimes.eventtime,
             jobeventtimes.objectid,
             jobeventtimes.info)
           values (:opid,
             :ipeventtype,
             :ipeventtime,
             :ipobjectid,
             :ipinfo);
  end
  else begin
    opid = ipid;
    update jobeventtimes set
             jobeventtimes.eventtype = :ipeventtype,
             jobeventtimes.eventtime = :ipeventtime,
             jobeventtimes.objectid = :ipobjectid,
             jobeventtimes.info = :ipinfo
         where jobeventtimes.id = :ipid;
  end

  suspend;
end^


ALTER PROCEDURE SPSAVE_JOBFEE (
    IPJOBID INTEGER = null,
    IPFEEID INTEGER = null,
    IPAMOUNT DECIMAL(18,2) = null,
    IPINCEX SMALLINT = null,
    IPINVNO INTEGER = null,
    IPINVLINENO INTEGER = null)
RETURNS (
    THEFEEID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
declare variable lversionno integer;
BEGIN
    insert into jobfee
         (jobid, feeid,
          amount, incex,
          invno, invline)
         values (:ipjobid, :ipfeeid, 
                 :ipamount, :ipincex,
                 :ipinvno, :ipinvlineno
                );
    execute procedure UPD_EVENT ('lastjob');
END^


ALTER PROCEDURE SPSAVE_JOBINVOICEABLE (
    IPJOBID INTEGER DEFAULT NULL,
    IPINVOICEABLE INTEGER DEFAULT NULL)
AS
BEGIN
  update job set
                 job.INVOICEABLE = :ipinvoiceable
        where jobid = :ipjobid;

  execute procedure UPD_EVENT ('lastjob');
END^


ALTER PROCEDURE SPSAVE_JOBMV (
    IPJOBID INTEGER DEFAULT NULL,
    IPOLDMVDATE DATE DEFAULT NULL,
    IPNEWMVDATE DATE DEFAULT NULL,
    IPOLDSTATUS INTEGER DEFAULT NULL,
    IPNEWSTATUS INTEGER DEFAULT NULL,
    IPOLDFROMSITEID INTEGER DEFAULT NULL,
    IPNEWFROMSITEID INTEGER DEFAULT NULL,
    IPOLDTOSITEID INTEGER DEFAULT NULL,
    IPNEWTOSITEID INTEGER DEFAULT NULL,
    IPOLDFULLE SMALLINT DEFAULT NULL,
    IPNEWFULLE SMALLINT DEFAULT NULL,
    IPOLDBINTYPEIDOUT INTEGER DEFAULT NULL,
    IPOLDBINTYPEIDIN INTEGER DEFAULT NULL,
    IPBINTYPEIDOUT INTEGER DEFAULT NULL,
    IPBINTYPEIDIN INTEGER DEFAULT NULL,
    IPMOVEIDDO INTEGER DEFAULT NULL,
    IPMOVEIDPU INTEGER DEFAULT NULL,
    IPOLDBINSOUT INTEGER DEFAULT NULL,
    IPBINSOUT INTEGER DEFAULT NULL,
    IPOLDBINSIN INTEGER DEFAULT NULL,
    IPBINSIN INTEGER DEFAULT NULL)
AS
DECLARE VARIABLE LDATE DATE;
DECLARE VARIABLE LFROMMVID INTEGER;
DECLARE VARIABLE LTOMVID INTEGER;
DECLARE VARIABLE LFULLBINS INTEGER;
DECLARE VARIABLE LEMPTYBINS INTEGER;
BEGIN
if (ipoldmvdate != ipnewmvdate or
    ipoldstatus != ipnewstatus or
    ipoldfromsiteid != ipnewfromsiteid or
    ipoldtositeid != ipnewtositeid or
    ipoldbintypeidout != ipbintypeidout or
    ipoldbintypeidin != ipbintypeidin or
    ipoldfulle != ipnewfulle OR
    IPOLDBINSOUT != IPBINSOUT or
    ipoldbinsin != ipbinsin
    )
then begin
    /* remove the old binmv records (which will update sitesoh)
     * no need to check if the job has a from or to site defined
     * because if it didn't it wouldn't have a from and to moveid
     */

    if (ipmoveiddo != 0) then
      execute procedure spdel_binmv(ipmoveiddo);

    if (ipmoveidpu != 0) then
      execute procedure spdel_binmv(ipmoveidpu);

    /* and reset the job details */
    update job set job.MOVEIDDO = 0, job.MOVEIDPU = 0
             where job.JOBID = :ipjobid;

 if (ipnewstatus = 3 and
      (ipnewfromsiteid != 0 or ipnewtositeid != 0)
      )
  then begin

    /* we only have to do the sitesoh stuff if the movement date is
     * since the last stocktake, so here I get the stocktake date
     */
    select first 1 STOCKTAKE_BINTYPE_DATES.SDATE
         from STOCKTAKE_BINTYPE_DATES
         order by STOCKTAKE_BINTYPE_DATES.SDATE desc
         into :ldate;

    /* if there is a drop off as part of this job then make a binmv record
     * up for it.
     */
    if (ipbinsout > 0 and ipnewfromsiteid != 0) then begin
      lfrommvid = GEN_ID(binmvid, 1);
      insert into binmv (BINMV.BINMVID,
            binmv.movedate,
            binmv.BINTYPEID,
            BINMV.FROMSITEID,
            BINMV.OUTEMPTY,
            BINMV.OUTFULL,
            BINMV.TOSITEID,
            BINMV.INEMPTY,
            BINMV.INFULL,
            BINMV.jobid)
        values (:lfrommvid,
         :ipnewmvdate,
         :ipbintypeidout,
         :ipnewfromsiteid,
         :ipbinsout,  /* these are empty bins - we only drop off empty bins */
         0,  /* no full bins dropped off */
         0,
         0,
         0,
         :ipjobid
         );
       if (ipnewmvdate > ldate) then begin
         /* update sitesoh as well */
         EXECUTE PROCEDURE adjustsitesoh (
            ipbintypeidout,
            ipnewfromsiteid,
            0,
            0 - ipbinsout);
       end
     end  /* of handling the drop off side of things */
     else lfrommvid = 0;

     /* if there is a drop off as part of this job then make a binmv record
     * up for it.
     */
    if (ipbinsin > 0 and ipnewtositeid != 0) then begin
      ltomvid = GEN_ID(binmvid, 1);
      /* for pick ups we need to know if the bins were left full or empty
       * at the storage site
       */
      if (ipnewfulle = 1) then begin
        lfullbins = ipbinsin;
        lemptybins = 0;
      end
      else begin
        lfullbins = 0;
        lemptybins = ipbinsin;
      end
      insert into binmv (BINMV.BINMVID,
            binmv.movedate,
            binmv.BINTYPEID,
            BINMV.FROMSITEID,
            BINMV.OUTEMPTY,
            BINMV.OUTFULL,
            BINMV.TOSITEID,
            BINMV.INEMPTY,
            BINMV.INFULL,
            binmv.jobid)
        values (:ltomvid,
         :ipnewmvdate,
         :ipbintypeidin,
         0,
         0,
         0,
         :ipnewtositeid,
         :lemptybins,
         :lfullbins,
         :ipjobid
         );
       if (ipnewmvdate > ldate) then begin
         /* update sitesoh as well */
         EXECUTE PROCEDURE adjustsitesoh (
            ipbintypeidin,
            ipnewtositeid,
            lfullbins,
            lemptybins);
       end
     end  /* of handling the pick up side of things */
     else ltomvid = 0;

     /* finally save the moveids in case this job is modified again later */
     update job set
          moveiddo = :lfrommvid,
          moveidpu = :ltomvid
          where job.jobid = :ipjobid;

  end /* of the new status is 'done' */

END  /* of something has changed (ie old != new) */

END^


ALTER PROCEDURE SPSAVE_JOBPAYDETAILS (
    IPDOJOBID INTEGER,
    IPPAYDETID INTEGER,
    IPPAYMETHODID INTEGER,
    IPREFERENCE CHAR(40),
    IPISPAID SMALLINT,
    IPNAMEONCARD CHAR(40),
    IPEXPMONTH SMALLINT,
    IPEXPYEAR SMALLINT,
    IPSECCODE CHAR(6),
    IPPUJOBID INTEGER,
    IPPAYAGAINST SMALLINT,
    IPCARDTYPEID INTEGER,
    IPCARDNUMBER CHAR(60),
    IPRGSOID INTEGER,
    IPRECEIVEDBY CHAR(40),
    IPRECEIVEDON DATE)
RETURNS (
    OPID INTEGER)
AS
declare variable lorderid integer;
declare variable lcustid integer;
declare variable lmeanspaid integer;
BEGIN
  if (ippaydetid = 0 or ippaydetid = -1)
  then begin
    opid = GEN_ID(genpaydetid, 1);
    
    insert into jobpaydetails
           (jobpaydetails.PAYDETID,
            jobpaydetails.REFERENCE,
            jobpaydetails.ISPAID,
            jobpaydetails.NAMEONCARD,
            jobpaydetails.EXPMONTH,
            jobpaydetails.EXPYEAR,
            jobpaydetails.SECURITYCODE,
            jobpaydetails.PAYMETHODID,
            jobpaydetails.PAIDAGAINST,
            jobpaydetails.cardtypeid,
            jobpaydetails.cardnumber,
            jobpaydetails.receivedby,
            jobpaydetails.entereddate,
            jobpaydetails.jobid)
           values (:opid,
           :ipreference,
           :ipispaid,
           :ipnameoncard,
           :ipexpmonth,
           :ipexpyear,
           :ipseccode,
           :ippaymethodid,
           :ippayagainst,
           :ipcardtypeid,
           :ipcardnumber,
           :ipreceivedby,
           :ipreceivedon,
           :ipdojobid);
    end
    else begin
      update jobpaydetails set
        jobpaydetails.REFERENCE = :ipreference,
        jobpaydetails.ISPAID = :ipispaid,
        jobpaydetails.NAMEONCARD = :ipnameoncard,
        jobpaydetails.EXPMONTH = :ipexpmonth,
        jobpaydetails.expyear = :ipexpyear,
        jobpaydetails.SECURITYCODE = :ipseccode,
        jobpaydetails.PAYMETHODID = :ippaymethodid,
        jobpaydetails.PAIDAGAINST = :ippayagainst,
        jobpaydetails.cardtypeid = :ipcardtypeid,
        jobpaydetails.cardnumber = :ipcardnumber,
        jobpaydetails.receivedby = :ipreceivedby,
        jobpaydetails.entereddate = :ipreceivedon,
        jobpaydetails.jobid = :ipdojobid
         where jobpaydetails.PAYDETID = :ippaydetid;
      opid = ippaydetid;
    end
    
    if (ipdojobid != 0)
    then update job set
         job.PAYDETID = :opid,
         job.ispaid = :ipispaid
         where job.jobid = :ipdojobid;
    if (ippujobid != 0)
    then update job set
         job.PUPAYDETID = :opid,
         job.ispaid = :ipispaid
         where job.jobid = :ippujobid;
    if (iprgsoid != 0)
    then update rgsalesorder set
         rgsalesorder.paydetid = :opid
         where rgsalesorder.rgsoid = :iprgsoid;

    /* if this is a credit card payment method then update the customer with the details */
    select paymethod.meanspaid
           from paymethod
           where paymethod.paymethodid = :ippaymethodid
           into :lmeanspaid;
    /* if (ippaymethodid = 4 or ippaymethodid = 1240) then begin   special for WM Waste ! */
    if (bin_and(lmeanspaid, 2) > 0) then begin /* bit 2 set means it is a CC payment method */
        if (ipdojobid != 0) then begin
          select job.orderid from job where job.jobid = :ipdojobid into :lorderid;
          select sorder.custid from sorder where sorder.orderid = :lorderid into :lcustid;
        end
        else if (ippujobid != 0) then begin
          select job.orderid from job where job.jobid = :ippujobid into :lorderid;
          select sorder.custid from sorder where sorder.orderid = :lorderid into :lcustid;
        end
        else if (iprgsoid != 0)
        then select rgsalesorder.custid from rgsalesorder where rgsalesorder.rgsoid = :iprgsoid into :lcustid;
        update customer set
            customer.cardtypeid = :ipcardtypeid,
            customer.cardnumber = :ipcardnumber,  /* :ipreference, */
            customer.nameoncard = :ipnameoncard,
            customer.expmonth = :ipexpmonth,
            customer.expyear = :ipexpyear,
            customer.securitycode = :ipseccode
            where customer.custid = :lcustid;
    end
  
end^


ALTER PROCEDURE SPSAVE_JOBPAYMETHOD (
    IPJOBID INTEGER = null,
    IPOLDPMID INTEGER = null,
    IPNEWPMID INTEGER = null,
    IPOLDREF CHAR(20) = null,
    IPNEWREF CHAR(20) = null,
    IPOLDISPAID SMALLINT = null,
    IPNEWISPAID SMALLINT = null)
RETURNS (
    OPTHESTATUS INTEGER,
    OPTHEVERSIONNO INTEGER)
AS
declare variable lref char(20);
declare variable lispaid smallint;
BEGIN
    SELECT PAYMETHODID, paymreference, ispaid
           FROM job where jobid = :ipjobid
           INTO :opthestatus, :LREF, :LISPAID;
    if (opthestatus is null) then opthestatus = 0;
    if (LREF is null) then LREF = '';
    if (LISPAID is null) then LISPAID = 0;
    if (opthestatus != ipoldpmid or
        LREF != ipoldref or
        LISPAID != ipoldispaid
       )
    then BEGIN
      opthestatus = 1; /* error - record has changed */
    END
    else begin
      update job set
                 paymethodid = :ipnewpmid,
                 /* dtlastamended = current_timestamp, */
                 job.PAYMREFERENCE = :ipnewref,
                 job.ISPAID = :ipnewispaid,
                 versionno = versionno + 1
        where jobid = :ipjobid;
      opthestatus = 0; /* a good save */
    end
  SUSPEND;

  execute procedure UPD_EVENT ('lastjob');
end^


ALTER PROCEDURE SPSAVE_JOBPUINVOICEABLE (
    IPJOBID INTEGER,
    IPINVOICEME INTEGER)
AS
declare variable lpuinvoiceable integer;
begin
    /* what is the current value of the invoiceable field - we
     * don't want to change it back to 'tobeinvoiced' if it is
     * already invoiced so here I find it first and check it
     */
  select job2.puinvoiceable
     from job2
     where job2.jobid = :ipjobid
     into :lpuinvoiceable;
     /* 2 = has been invoiced */
  if (lpuinvoiceable = 2)
  then ipinvoiceme = 2;
    
  update job2
      set job2.puinvoiceable = :ipinvoiceme
      where job2.jobid = :ipjobid;
  if (row_count = 0) then
    insert into job2
        (job2.jobid, puinvoiceable)
        values
        (:ipjobid, :ipinvoiceme);
       
end^


ALTER PROCEDURE SPSAVE_JOBPUWEIGHT (
    IPJOBID INTEGER,
    IPPUWEIGHT DECIMAL(5,3),
    IPINVOICEME INTEGER,
    IPSITEID INTEGER,
    IPPRICEAREAID INTEGER)
AS
declare variable lpuinvoiceable integer;
declare variable lpuvolume decimal(5,3);
begin

  lpuvolume = 0;

  /* a negative jobid signals the puweight field is really a volume */
  if (ipjobid < 0) then begin
    ipjobid = 0 - ipjobid; /* make it positive again */
    lpuvolume = ippuweight;
    ippuweight = 0;

    update job
      set job.rgid = :lpuvolume * 100.0  /* the rgid fields doubles as the pu volume */
    where job.jobid = :ipjobid;
  end
  else update job
            set job.puweight = :ippuweight
        where job.jobid = :ipjobid;

    /* what is the current value of the invoiceable field - we
     * don't want to change it back to 'tobeinvoiced' if it is
     * already invoiced so here I find it first and check it
     */
  select job2.puinvoiceable
     from job2
     where job2.jobid = :ipjobid
     into :lpuinvoiceable;
     /* 2 = has been invoiced */
  if (lpuinvoiceable = 2)
  then ipinvoiceme = 2;
    
  update job2
      set job2.puinvoiceable = :ipinvoiceme,
          job2.siteid = :ipsiteid,
          job2.priceareaid = :ippriceareaid
      where job2.jobid = :ipjobid;
  if (row_count = 0) then
    insert into job2
        (job2.jobid, puinvoiceable, siteid, priceareaid)
        values
        (:ipjobid, :ipinvoiceme, :ipsiteid, :ippriceareaid);
       
end^


ALTER PROCEDURE SPSAVE_JOBRMBREAKDOWN (
    IPJOBID INTEGER,
    IPRMGROUPID INTEGER,
    IPPERCENT INTEGER)
AS
begin
  insert into jobrmbreakdown
        (jobrmbreakdown.jobid,
         jobrmbreakdown.rmgroupid,
         jobrmbreakdown.percent)
        values
        (:ipjobid,
         :iprmgroupid,
         :ippercent);
end^


ALTER PROCEDURE SPSAVE_JOBSENTTODEVICE (
    IPJOBID INTEGER)
AS
begin
  update job set job.prioritylevel = job.prioritylevel + 8192
          where job.jobid = :ipjobid
            and ((job.prioritylevel / 8192 / 2) - (job.prioritylevel / 8192 / 2.0)) = 0;
  if (row_count > 0)
  then execute procedure UPD_EVENT ('lastjob');
end^


ALTER PROCEDURE SPSAVE_JOBSTATUS (
    IPJOBID INTEGER = null,
    IPOLDSTATUS INTEGER = null,
    IPNEWSTATUS INTEGER = null,
    IPORDERID INTEGER = null,
    IPDONE INTEGER = null)
RETURNS (
    OPTHESTATUS INTEGER)
AS
declare variable lcount integer;
declare variable ljobdate date;
declare variable lfromsiteid integer;
declare variable ltositeid integer;
declare variable lfulle smallint;
declare variable lbintypeidout integer;
declare variable lbintypeidin integer;
declare variable lmoveiddo integer;
declare variable lmoveidpu integer;
declare variable lbinsout integer;
declare variable lbinsin integer;
BEGIN
     
    SELECT jobstatus FROM job where jobid = :ipjobid
           INTO :opthestatus;
    if (opthestatus != ipoldstatus)
    then BEGIN
      opthestatus = 1; /* error - record has changed */
    END
    else begin
     opthestatus = 0; /* a good save */
     if (ipoldstatus != ipnewstatus) then begin
      opthestatus = 0; /* a good save */
      update job set
                 jobstatus = :ipnewstatus,
                 dtlastamended = current_timestamp
        where jobid = :ipjobid;
      opthestatus = 0; /* a good save */
      
      /* also update the sitesoh as the status of this job is changing*/
      SELECT job.JOBDATE, job.FROMSITEID, job.TOSITEID, job.FULLE,
             job.BINTYPEID_OUT, job.BINTYPEID_IN, job.MOVEIDDO,
             job.MOVEIDPU, job.BINS_OUT, job.BINS_IN
             from job
             where job.jobid = :ipjobid
             into :ljobdate,
                  :lfromsiteid,
                  :ltositeid,
                  :lfulle,
                  :lbintypeidout,
                  :lbintypeidin,
                  :lmoveiddo,
                  :lmoveidpu,
                  :lbinsout,
                  :lbinsin ;
      EXECUTE PROCEDURE SPSAVE_JOBMV
              (ipjobid,
               ljobdate,
               ljobdate,
               ipoldstatus,
               ipnewstatus,
               lfromsiteid,
               lfromsiteid,
               ltositeid,
               ltositeid,
               lfulle,
               lfulle,
               lbintypeidout,
               lbintypeidin,
               lbintypeidout,
               lbintypeidin,
               lmoveiddo,
               lmoveidpu,
               lbinsout,
               lbinsout,
               lbinsin,
               lbinsin);
      
      /* now we work out if the order this job is in is closed */
      /* don't bother trying this if this job wasn't set to
       * done
       */
      if (ipnewstatus = ipdone or ipnewstatus = 6)  /* 6 = cancelled */
      then select count(jobid)
           from job
           where job.ORDERID = :iporderid
             and job.JOBSTATUS != :ipdone
             and job.jobstatus != 6 /* cancelled */
           into :lcount;
       else lcount = 1;
       if (lcount = 0)
       then
          /* this order has no incomplete jobs so mark the
           * order as complete
           */
           update sorder set
               sorder.complete = 1
               where sorder.ORDERID = :iporderid;
        ELSE
            update sorder set
               sorder.complete = 0
               where sorder.ORDERID = :iporderid;
               
      opthestatus = 0; /* a good save */
      execute procedure UPD_EVENT ('lastjob');
      
    end
  end
  
  SUSPEND;
end^


ALTER PROCEDURE SPSAVE_JOBSWCODE (
    IPJOBSWCODEID INTEGER,
    IPJOBID INTEGER,
    IPSWCODESID INTEGER,
    IPUNITS DECIMAL(15,2),
    IPFLAGS INTEGER)
RETURNS (
    OPJOBSWCODEID INTEGER)
AS
begin
  if (ipjobswcodeid = 0) then begin
     opjobswcodeid = gen_id(genjobswcodeid, 1);
     insert into jobswcode
        (jobswcode.jobswcodeid,
         jobswcode.jobid,
         jobswcode.swcodesid,
         jobswcode.units,
         jobswcode.flags)
        values
        (:opjobswcodeid,
         :ipjobid,
         :ipswcodesid,
         :ipunits,
         :ipflags);
  end
  else begin
    opjobswcodeid = ipjobswcodeid;
    update jobswcode set
       jobswcode.swcodesid = :ipswcodesid,
       jobswcode.units = :ipunits,
       jobswcode.flags = :ipflags
       where jobswcode.jobswcodeid = :ipjobswcodeid;
  end
end^


ALTER PROCEDURE SPSAVE_JOBTIPDOCKET (
    IPTIPDOCKETID INTEGER,
    IPTIPDOCKETNO INTEGER,
    IPCTIPDOCKETNO CHAR(20),
    IPJOBID INTEGER,
    IPTIPSITEID INTEGER,
    IPTIPDATE DATE,
    IPM3TIPPED DECIMAL(8,2),
    IPWEIGHTTIPPED DECIMAL(8,2),
    IPRATE DECIMAL(8,2),
    IPFLAGS INTEGER,
    IPMATERIALID INTEGER)
RETURNS (
    OPTIPDOCKETID INTEGER)
AS
begin
  if (iptipdocketid = 0) then begin
    optipdocketid = gen_id(gentipdocketid, 1);
    insert into jobtipdocket
         (jobtipdocket.tipdocketid,
          jobtipdocket.tipdocketno,
          jobtipdocket.ctipdocketno,
          jobtipdocket.jobid,
          jobtipdocket.tipsiteid,
          jobtipdocket.tipdate,
          jobtipdocket.m3tipped,
          jobtipdocket.weighttipped,
          jobtipdocket.rate,
          jobtipdocket.flags,
          jobtipdocket.materialid)
         values
         (:optipdocketid,
          :iptipdocketno,
          :ipctipdocketno,
          :ipjobid,
          :iptipsiteid,
          :iptipdate,
          :ipm3tipped,
          :ipweighttipped,
          :iprate,
          :ipflags,
          :ipmaterialid);
  end
  else begin
    optipdocketid = iptipdocketid;

    update jobtipdocket set
            jobtipdocket.tipdocketno = :iptipdocketno,
            jobtipdocket.ctipdocketno = :ipctipdocketno,
            jobtipdocket.tipsiteid = :iptipsiteid,
            jobtipdocket.tipdate = :iptipdate,
            jobtipdocket.m3tipped = :ipm3tipped,
            jobtipdocket.weighttipped = :ipweighttipped,
            jobtipdocket.rate = :iprate,
            jobtipdocket.flags = :ipflags,
            jobtipdocket.materialid = :ipmaterialid
            where jobtipdocket.tipdocketid = :iptipdocketid;
  end

  suspend;
end^


ALTER PROCEDURE SPSAVE_JOBWEB (
    IPJOBID INTEGER,
    IPDD CHAR(12),
    IPDOBINNOS CHAR(60),
    IPFROMSITEID INTEGER,
    IPPUBINNOS CHAR(60),
    IPTOSITEID INTEGER,
    IPMATERIALID INTEGER,
    IPRGWEIGHT DECIMAL(15,2),
    IPDRIVERID INTEGER)
AS
begin
  update job set
                 /* job.jobstatus = :ipjobstatus, */
                 job.versionno = versionno + 1,
                 job.dobinnos = :ipdobinnos,
                 job.pubinnos = :ippubinnos,
                 job.despatchdocket = :ipdd,
                 job.fromsiteid = :ipfromsiteid,
                 /* job.wtd = :iptipdocketno, */
                 JOB.TOSITEID = :iptositeid,
                 job.MATERIALID = :ipmaterialid,
                 /* job.jobdetailsdone = :iptipatsiteid, */
                 /* job.bins_relocate = :iptipcost * 100 */
                 job.rgweight = :iprgweight,
                 job.driverid = :ipdriverid
        where jobid = :ipjobid;

  execute procedure UPD_EVENT ('lastjob');
end^


ALTER PROCEDURE SPSAVE_JOBWHENTOINVOICE (
    IPDOJOBID INTEGER,
    IPPUJOBID INTEGER,
    IPWHENTOINVOICE INTEGER)
AS
begin
  update job set job.whentoinvoice = :ipwhentoinvoice
       where job.jobid = :ipdojobid;
  if (ippujobid != 0)
  then update job set job.whentoinvoice = :ipwhentoinvoice
       where job.jobid = :ippujobid;
end^


ALTER PROCEDURE SPSAVE_LOADEDINVOICE (
    IPINVBATCH INTEGER DEFAULT NULL,
    IPINVNO INTEGER DEFAULT NULL,
    IPCUSTID INTEGER DEFAULT NULL,
    IPINVDATE DATE DEFAULT NULL,
    IPDUEDATE DATE DEFAULT NULL,
    IPBILLADDRID INTEGER DEFAULT NULL)
RETURNS (
    OPINVNO INTEGER,
    ERRSTATUS INTEGER)
AS
DECLARE VARIABLE LINVNO INTEGER;
DECLARE VARIABLE LCOUNT INTEGER;
BEGIN
  /* this is not for normal use - only when loading
   * from Version 1
   */
       insert into invoice
         (invno, invbatchid,
          custid, invdate,
          duedate, billaddrid
          )
         values (
          :ipinvno, :ipinvbatch,
          :ipcustid, :ipinvdate,
          :ipduedate, :ipbilladdrid
          );
END^


ALTER PROCEDURE SPSAVE_LOADINVBATCH (
    IPINVBATCH INTEGER DEFAULT NULL,
    IPCREATEDDATE TIMESTAMP DEFAULT NULL,
    IPEXPORTEDDATE TIMESTAMP DEFAULT NULL,
    IPFILENAME CHAR(50) DEFAULT NULL,
    IPCOUNT SMALLINT DEFAULT NULL,
    IPINVPERIOD INTEGER DEFAULT NULL)
RETURNS (
    THEINVBATCH INTEGER)
AS
DECLARE VARIABLE LVERSIONNO INTEGER;
BEGIN
  /* this is just for the load from Version 1 - not
   * for normal use
   */
  insert into INVOICEBATCH
         (
           INVOICEBATCH.INVBATCHNO,
           createddate,
           exporteddate,
           exportedfilename,
           exportedcount,
           invperiod,
           versionno)
       values (
           :ipinvbatch,
           :ipcreateddate,
           :ipexporteddate,
           :ipfilename,
           :ipcount,
           :ipinvperiod,
           1);
END^


ALTER PROCEDURE SPSAVE_MARKTIPASOKAYED (
    IPTIPID INTEGER,
    IPOKAYEDTPINVOICE SMALLINT,
    IPPRICE DECIMAL(15,2))
AS
begin
  update tip set tip.okayedtoinvoice = :ipokayedtpinvoice,
                 tip.price = :ipprice
         where tip.id = :iptipid;
end^


ALTER PROCEDURE SPSAVE_MATERIAL (
    IPID INTEGER = null,
    IPDESCRIPTION CHAR(40) = null,
    IPPERTON DECIMAL(18,2) = null,
    IPPERCUBE DECIMAL(18,2) = null,
    IPACCOUNTNO CHAR(25) = null,
    IPITEMCODE CHAR(12) = null,
    IPWASTECATEGORYID INTEGER = null,
    IPFLAGS INTEGER = null,
    IPPINCOLOUR VARCHAR(255) = null,
    IPMINWEIGHT DECIMAL(6,2) = null,
    IPMINWEIGHTFEE DECIMAL(6,2) = null)
RETURNS (
    THEID INTEGER)
AS
BEGIN
  /* Procedure body */

  execute procedure UPD_EVENT ('lastmaster');
  
  if (ipid = 0) then
  begin
    theid = GEN_ID(GEN_MATERIALID, 1);
    insert into material
         (id, description,
          priceperton, pricepercubicmetre,
          accountno, itemcode,
          wastecategoryid,
          material.flags,
          material.pincolour,
          material.minimumweight,
          material.minimumweightfee)
         values (:theid, :ipdescription,
                 :ipperton, :ippercube,
                 :ipaccountno, :ipitemcode,
                 :ipwastecategoryid,
                 :ipflags,
                 :ippincolour,
                 :ipminweight,
                 :ipminweightfee);
  end
  else begin
    
      update MATERIAL set description = :ipdescription,
                      priceperton = :ipperton,
                      pricepercubicmetre = :ippercube,
                      accountno = :ipaccountno,
                      itemcode = :ipitemcode,
                      wastecategoryid = :ipwastecategoryid,
                      material.flags = :ipflags,
                      material.pincolour = :ippincolour,
                      material.minimumweight = :ipminweight,
                      material.minimumweightfee = :ipminweightfee
         where id = :ipid;
      theid = ipid;
  END
  
  SUSPEND;

end^


ALTER PROCEDURE SPSAVE_MATERIALPRICE (
    IPTIPSITEID INTEGER,
    IPCUSTID INTEGER,
    IPMATERIALID INTEGER,
    IPDELIVEREDPRICE DECIMAL(15,2),
    IPPICKUPPRICE DECIMAL(15,2))
AS
begin
  update materialprices set
    materialprices.deliveredprice = :ipdeliveredprice,
    materialprices.pickupprice = :ippickupprice
    where materialprices.tipsiteid = :iptipsiteid
      and materialprices.custid = :ipcustid
      and materialprices.materialid = :ipmaterialid;
  IF (ROW_COUNT = 0)
  THEN insert into materialprices
        (materialprices.tipsiteid,
         materialprices.custid,
         materialprices.materialid,
         materialprices.deliveredprice,
         materialprices.pickupprice)
         values (
         :iptipsiteid,
         :ipcustid,
         :ipmaterialid,
         :ipdeliveredprice,
         :ippickupprice);
end^


ALTER PROCEDURE SPSAVE_MATERIALPRICE_PERM3 (
    IPTIPSITEID INTEGER,
    IPCUSTID INTEGER,
    IPMATERIALID INTEGER,
    IPM3PRICE DECIMAL(15,2))
AS
begin
  update materialprices set
    materialprices.deliveredprice = :ipm3price
    where materialprices.tipsiteid = :iptipsiteid
      and materialprices.custid = :ipcustid
      and materialprices.materialid = :ipmaterialid;
  IF (ROW_COUNT = 0)
  THEN insert into materialprices
        (materialprices.tipsiteid,
         materialprices.custid,
         materialprices.materialid,
         materialprices.deliveredprice)
         values (
         :iptipsiteid,
         :ipcustid,
         :ipmaterialid,
         :ipm3price);
end^


ALTER PROCEDURE SPSAVE_MATERIALPRICE_PERTON (
    IPTIPSITEID INTEGER,
    IPCUSTID INTEGER,
    IPMATERIALID INTEGER,
    IPPERTONPRICE DECIMAL(15,2))
AS
begin
  update materialprices set
    materialprices.pickupprice = :ippertonprice
    where materialprices.tipsiteid = :iptipsiteid
      and materialprices.custid = :ipcustid
      and materialprices.materialid = :ipmaterialid;
  IF (ROW_COUNT = 0)
  THEN insert into materialprices
        (materialprices.tipsiteid,
         materialprices.custid,
         materialprices.materialid,
         materialprices.pickupprice)
         values (
         :iptipsiteid,
         :ipcustid,
         :ipmaterialid,
         :ippertonprice);
end^


ALTER PROCEDURE SPSAVE_MLIST (
    IPID INTEGER,
    IPMLISTID INTEGER,
    IPDESC CHAR(50),
    IPDESC2 CHAR(50),
    IPDESC3 CHAR(30))
RETURNS (
    OPID INTEGER)
AS
begin
  if (ipid = 0) then begin
    opid = GEN_ID(genmlistidid, 1);
    insert into mlist
        (id, listid, description, desc2, desc3)
       values (:opid,
               :ipmlistid,
               :ipdesc,
               :ipdesc2, 
               :ipdesc3);
  end
  else begin
    opid = ipid;
    update mlist set
        description = :ipdesc,
        desc2 = :ipdesc2,
        desc3 = :ipdesc3
      where mlist.id = :ipid;
  end
end^


ALTER PROCEDURE SPSAVE_MODULESETTINGS (
    IPMODULE INTEGER,
    IPSETTINGS BIGINT)
AS
begin
  update modulesettings
       set modulesettings.settings = :ipsettings
       where modulesettings.module = :ipmodule;
  IF (ROW_COUNT = 0)
  then insert into modulesettings
            (modulesettings.module, modulesettings.settings)
            values (:ipmodule, :ipsettings);
end^


ALTER PROCEDURE SPSAVE_MONEYCOLLECTEDEMAIL (
    IPJOBID INTEGER,
    IPEMAILADDR CHAR(60))
AS
begin
  update jobmoneypaid set
    jobmoneypaid.emailaddress = :ipemailaddr
    where jobmoneypaid.jobid = :ipjobid;
  if (row_count = 0)
  then insert into jobmoneypaid
        (jobmoneypaid.jobid,
         jobmoneypaid.emailaddress)
         values
        (:ipjobid,
         :ipemailaddr);
end^


ALTER PROCEDURE SPSAVE_MONEYCOLLECTEDWEB (
    IPJOBID INTEGER,
    IPPAYMETHODID1 INTEGER,
    IPAMOUNT1 DECIMAL(15,2),
    IPPAYMETHODID2 INTEGER,
    IPAMOUNT2 DECIMAL(15,2),
    IPEMAILADDR CHAR(60),
    IPFORDATE DATE,
    IPDRIVERID INTEGER,
    IPNAMEONCARD CHAR(40),
    IPISPAID SMALLINT,
    IPEXPMONTH SMALLINT,
    IPEXPYEAR SMALLINT,
    IPSECCODE CHAR(6),
    IPCARDTYPEID INTEGER,
    IPCARDNUMBER CHAR(60),
    IPSAVECCDETAILS INTEGER)
AS
declare variable lpaydetid integer;
declare variable lpupaydetid integer;
declare variable ldrivername char(12);
begin
  update jobmoneypaid set
    jobmoneypaid.paymethodid1 = :ippaymethodid1,
    jobmoneypaid.amount1 = :ipamount1,
    jobmoneypaid.paymethodid2 = :ippaymethodid2,
    jobmoneypaid.amount2 = :ipamount2,
    jobmoneypaid.emailaddress = :ipemailaddr,
    jobmoneypaid.ddate = :ipfordate,
    jobmoneypaid.driverid = :ipdriverid
    where jobmoneypaid.jobid = :ipjobid;
  if (row_count = 0)
  then insert into jobmoneypaid
        (jobmoneypaid.jobid,
         jobmoneypaid.paymethodid1,
         jobmoneypaid.amount1,
         jobmoneypaid.paymethodid2,
         jobmoneypaid.amount2,
         jobmoneypaid.emailaddress,
         jobmoneypaid.ddate,
         jobmoneypaid.driverid)
         values
        (:ipjobid,
         :ippaymethodid1,
         :ipamount1,
         :ippaymethodid2,
         :ipamount2,
         :ipemailaddr,
         :ipfordate,
         :ipdriverid);

  /* and also try and update the main jobpaydetails */
  select job.paydetid, job.pupaydetid
         from job
         where job.jobid = :ipjobid
         into :lpaydetid, :lpupaydetid;
  if (lpaydetid is null or lpaydetid = 0)
  then lpaydetid = lpupaydetid;

  if (ipsaveccdetails = 1 and lpaydetid is not null and lpaydetid > 0)
  then begin
    select driver.shortname from driver
           where driver.driverid = :ipdriverid
           into :ldrivername;
    if (ldrivername is null)
    then ldrivername = '';

    update jobpaydetails
            set jobpaydetails.paymethodid = :ippaymethodid1,
                jobpaydetails.ispaid = :ipispaid,
                jobpaydetails.nameoncard = :ipnameoncard,
                jobpaydetails.EXPMONTH = :ipexpmonth,
                jobpaydetails.expyear = :ipexpyear,
                jobpaydetails.SECURITYCODE = :ipseccode,
                jobpaydetails.cardtypeid = :ipcardtypeid,
                jobpaydetails.cardnumber = :ipcardnumber,
                jobpaydetails.receivedby = :ldrivername
                /* jobpaydetails.cardnumber = :ipcardnumber */
            where jobpaydetails.paydetid = :lpaydetid
              and jobpaydetails.ispaid = 0; /* don't update if already marked as paid */
  end
end^


ALTER PROCEDURE SPSAVE_MORECOMMENTS (
    IPCOMMENTSID INTEGER,
    IPCOMMENTS CHAR(2000),
    IPCRMCONTACTID INTEGER)
RETURNS (
    OPMORECOMMENTSID INTEGER)
AS
begin
  if (ipcommentsid < 0) then begin
    /* this section was added to cope with the various things that just use this table to save
     * lots of text. These will have an morecommentsid < 0
     */
    update crmmorecomments
       set crmmorecomments.comments = :ipcomments
       where crmmorecomments.morecommentsid = :ipcommentsid;
    if (row_count = 0)
    then INSERT INTO crmmorecomments
         (morecommentsid, comments)
         VALUES (:ipcommentsid, :ipcomments);
    opmorecommentsid = 0;
  end
  else begin
    /* this is the normal section - for real more comments... */
  if (not exists(SELECT morecommentsid FROM crmmorecomments WHERE crmmorecomments.morecommentsid = :ipcommentsid))
  then begin
    /* no morecomments exist with the ipcommentsid so create a new one */
    opmorecommentsid = gen_id(gen_morecommentsid, 1);
    INSERT INTO crmmorecomments
         (morecommentsid, comments)
         VALUES (:opmorecommentsid, :ipcomments);
    /* if we have provided a contact id to link to then make the link */
    if (ipcrmcontactid > 0)
    then update crmcontacts
        set crmcontacts.morecommentsid = :opmorecommentsid
        where crmcontacts.contactid = :ipcrmcontactid;
  end
  else begin
    /* else just update whatever is there, no need to update crmcontacts link */
    update crmmorecomments
       set crmmorecomments.comments = :ipcomments
       where crmmorecomments.morecommentsid = :ipcommentsid;
    opmorecommentsid = ipcommentsid;
  end
  end
end^


ALTER PROCEDURE SPSAVE_MULTIDAYRUNSHEET (
    IPID INTEGER,
    IPCREATEDON DATE,
    IPRUNNAME CHAR(50),
    IPDRIVERID INTEGER,
    IPFLAGS INTEGER,
    IPACTIVE INTEGER)
RETURNS (
    OPID INTEGER)
AS
BEGIN
  
  if (ipid <= 0) then
  begin
    opid = GEN_ID(MAPID, 1);
    insert into multidayrunsheets
         (id, createdon,
          runname, driverid,
          flags, active)
         values (:opid, :ipcreatedon,
                 :iprunname, :ipdriverid,
                 :ipflags, :ipactive);
  end
  else begin
    update multidayrunsheets set runname = :iprunname,
                      driverid = :ipdriverid,
                      flags = :ipflags,
                      active = :ipactive
         where id = :ipid;
    opid = :ipid;
  END
  
  SUSPEND;

END^


ALTER PROCEDURE SPSAVE_MULTIDAYRUNSHEETJOB (
    IPRUNSHEETID INTEGER,
    IPSORTORDER INTEGER,
    IPJOBID INTEGER)
RETURNS (
    OPID INTEGER)
AS
BEGIN
  
  delete from multidayrunsheetjobs where multidayrunsheetjobs.jobid = :ipjobid;

  opid = GEN_ID(MAPID, 1);
  insert into multidayrunsheetjobs
         (id, runsheetid,
          sortorder, jobid)
         values (:opid, :iprunsheetid,
                 :ipsortorder, :ipjobid);
  
  SUSPEND;

END^


ALTER PROCEDURE SPSAVE_NEWDDNO (
    IPNEWDDNO INTEGER)
AS
begin
  /* these two aren't allowed in stored proc */
  /* ALTER SEQUENCE GENINVOICENO RESTART WITH :IPNEWINVNO; */
  /* SET GENERATOR GENINVOICENO TO :IPNEWINVNO; */
  IPNEWDDNO = GEN_ID (GENAUTODDNO,
         IPNEWDDNO - GEN_ID (GENAUTODDNO,0) );
end^


ALTER PROCEDURE SPSAVE_NEWFLDDNO (
    IPNEWFLDDNO INTEGER)
AS
begin

    ipnewflddno = GEN_ID (genflddno ,
         ipnewflddno - GEN_ID (genflddno,0) );
end^


ALTER PROCEDURE SPSAVE_NEWINVNO (
    IPNEWINVNO INTEGER DEFAULT NULL)
AS
BEGIN
  /* these two aren't allowed in stored proc */
  /* ALTER SEQUENCE GENINVOICENO RESTART WITH :IPNEWINVNO; */
  /* SET GENERATOR GENINVOICENO TO :IPNEWINVNO; */
  IPNEWINVNO = GEN_ID (GENINVOICENO,
         IPNEWINVNO - GEN_ID (GENINVOICENO,0) );
END^


ALTER PROCEDURE SPSAVE_NEWOUTGOINGDKTNO (
    IPNEWDDNO INTEGER)
AS
begin
  IPNEWDDNO = GEN_ID (genoutgoingdktno,
         IPNEWDDNO - GEN_ID (genoutgoingdktno,0) );
end^


ALTER PROCEDURE SPSAVE_NEWPINVNO (
    IPNEWINVNO INTEGER = null)
AS
BEGIN
  /* these two aren't allowed in stored proc */
  /* ALTER SEQUENCE GENINVOICENO RESTART WITH :IPNEWINVNO; */
  /* SET GENERATOR GENINVOICENO TO :IPNEWINVNO; */
  IPNEWINVNO = GEN_ID (genacctsaleno,
         IPNEWINVNO - GEN_ID (genacctsaleno,0) );
END^


ALTER PROCEDURE SPSAVE_NEWTIPDDNO (
    IPDDSEQUENCE INTEGER,
    IPNEWTIPDDNO INTEGER)
AS
begin
  if (ipddsequence = 0) then
    ipnewtipddno = GEN_ID (gentipddno ,
         ipnewtipddno - GEN_ID (gentipddno,0) );
  else ipnewtipddno = GEN_ID (gentipddnoseq2 ,
         ipnewtipddno - GEN_ID (gentipddnoseq2,0) );
end^


ALTER PROCEDURE SPSAVE_NOORDER (
    IPID INTEGER,
    IPDDATE DATE,
    IPTTIME TIMESTAMP,
    IPUSERID INTEGER,
    IPREASONID INTEGER,
    IPREASONTEXT CHAR(50),
    IPREFERRALID INTEGER,
    IPSUBURB CHAR(50),
    IPNOORDTYPE INTEGER,
    IPCOMMENT CHAR(100),
    IPPRICEQUOTED DECIMAL(10,2),
    IPBINTYPEID INTEGER,
    IPPRICEAREAID INTEGER,
    IPBINCOUNT INTEGER,
    IPFLAGS INTEGER)
RETURNS (
    OPID INTEGER)
AS
begin
  if (ipid = 0) then begin
    opid = GEN_ID(gennoorderid, 1);
    insert into noorder
        (id, ddate, ttime, userid, reasonid, reasontext, referralid,
         suburb, noordtype,
         NOORDER.comments,
         noorder.pricequoted,
         noorder.bintypeid,
         noorder.priceareaid,
         noorder.bincount,
         noorder.flags
         )
        values (
            :opid, 
            :ipddate,
            :ipttime,
            :ipuserid,
            :ipreasonid,
            :ipreasontext,
            :ipreferralid,
            :ipsuburb,
            :ipnoordtype,
            :ipcomment,
            :ippricequoted,
            :ipbintypeid,
            :ippriceareaid,
            :ipbincount,
            :ipflags
            );
  end
  else begin
    opid = ipid;
    update noorder set
        noorder.ddate = :ipddate, 
        noorder.ttime = :ipttime, 
        noorder.userid = :ipuserid,
        noorder.reasonid = :ipreasonid,
        noorder.reasontext = :ipreasontext,
        noorder.referralid = :ipreferralid,
        noorder.suburb = :ipsuburb,
        noorder.noordtype = :ipnoordtype,
         NOORDER.comments = :ipcomment,
         noorder.pricequoted = :ippricequoted,
         noorder.bintypeid = :ipbintypeid,
         noorder.priceareaid = :ippriceareaid,
         noorder.bincount = :ipbincount,
         noorder.flags = :ipflags
       where noorder.id = :ipid;
  end

  /* we also have to update the callcount for this entry */
  if (ipnoordtype = 0) then /* missed order */
      execute procedure spsave_callcounts (ipddate, ipuserid, 0, 0, 0, 1, 0);
  else /* must be a general enquiry */
      execute procedure spsave_callcounts (ipddate, ipuserid, 0, 0, 0, 0, 1);
end^


ALTER PROCEDURE SPSAVE_ORDER (
    IPORDERID INTEGER,
    IPCUSTID INTEGER,
    IPINVTYPE INTEGER,
    IPBYBINNO INTEGER,
    IPCOMPLETE INTEGER,
    IPADDRID INTEGER,
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10),
    IPBILLADDRID INTEGER,
    IPBILLADDRESS1 CHAR(30),
    IPBILLADDRESS2 CHAR(30),
    IPBILLTOWN CHAR(30),
    IPBILLSTATE CHAR(30),
    IPBILLPOSTCODE CHAR(10),
    IPVERSIONNO INTEGER,
    IPCUSTTYPE INTEGER,
    IPREFERRALID INTEGER,
    IPFIRSTJOB DATE,
    IPWKNOFIRST INTEGER,
    IPWKNOLAST INTEGER,
    IPCLOBBER SMALLINT,
    IPFAXNO CHAR(30),
    IPEMAIL CHAR(50),
    IPUSERID INTEGER,
    IPCUSTSITEID INTEGER,
    IPJOBNO CHAR(20))
RETURNS (
    OPTHEORDERID INTEGER,
    OPTHEADDRID INTEGER,
    OPTHEBILLADDRID INTEGER,
    OPTHEVERSIONNO INTEGER,
    OPTHESTATUS INTEGER)
AS
declare variable LVERSIONNO integer;
declare variable LLOOP integer;
declare variable LSTREETNUMBER char(10);
declare variable LADDRESS1 char(30);
declare variable LADDRESS2 char(30);
declare variable LTOWN char(30);
declare variable LSTATE char(30);
declare variable LPOSTCODE char(10);
declare variable LLAT numeric(18,12);
declare variable LLONG numeric(18,12);
BEGIN
  opthestatus = 0;
  
  /* see explanation in spsave_job as to why this has
   * been commented out
   */
  /* execute procedure UPD_EVENT ('lastjob'); */
  
  /* Procedure body */
  if (ipclobber = 0 and iporderid != 0) then begin
    SELECT versionno FROM sorder where orderid = :iporderid
           INTO :lversionno;
  END
  else lversionno = :ipversionno;

  if (lversionno != ipversionno)
  then BEGIN
      optheversionno = :lversionno;
      opthestatus = 1; /* error - record has changed */
  end
  else begin
    /* set it now as it has already been checked */
    optheversionno = :lversionno;

      if (ipaddrid = 0) then begin
        optheaddrid = GEN_ID(ADDRESS_ADDRID_GEN, 1);
        insert into ADDRESS (addrid, streetnumber, address1, address2, town, state, postcode)
           values (:optheaddrid,
                   :ipstreetnumber,
                   :ipaddress1,
                   :ipaddress2, :iptown,
                   :ipstate, :ippostcode);
      end
      else BEGIN
        /* we need to see if the address has changed, if it has then we wipe
         * out the GPS coordinates for the address which forces the address
         * to be geocoded the next time it is plotted on a map
         */
        select address.streetnumber, address.address1, address.address2,
               address.town, address.state, address.postcode,
               address.gpslatitude, address.gpslongitude
               from address
               where address.addrid = :ipaddrid
               into :lstreetnumber, :laddress1, :laddress2,
                    :ltown, :lstate, :lpostcode,
                    :llat, :llong;
        if (:lstreetnumber != :ipstreetnumber or
            :laddress1 != :ipaddress1 or
            :laddress2 != :ipaddress2 or
            :ltown != :iptown or
            :lstate != :ipstate or
            :lpostcode != :ippostcode)
        then begin
          llat = 0;
          llong = 0;
        end

        update address set
            streetnumber = :ipstreetnumber,
            address1 = :ipaddress1,
            address2 = :ipaddress2,
            town = :iptown,
            state = :ipstate,
            postcode = :ippostcode,
            address.gpslatitude = :llat,
            address.gpslongitude = :llong
            where address.addrid = :ipaddrid;
        optheaddrid = :ipaddrid;
      END
                 
    if (:ipbilladdress1 != '' or :ipbilladdress2 != '' or
        :ipbilltown != '' or :ipbillstate != '' or :ipbillpostcode != '')
    then begin
      if (ipbilladdrid = 0) then begin
        opthebilladdrid = GEN_ID(ADDRESS_ADDRID_GEN, 1);
        insert into ADDRESS (addrid, streetnumber, address1, address2, town, state, postcode)
           values (:opthebilladdrid, :ipstreetnumber,
                   :ipbilladdress1,
                   :ipbilladdress2, :ipbilltown,
                   :ipbillstate, :ipbillpostcode);
      end
      else BEGIN
        update address set
            streetnumber = :ipstreetnumber,
            address1 = :ipbilladdress1,
            address2 = :ipbilladdress2,
            town = :ipbilltown,
            state = :ipbillstate,
            postcode = :ipbillpostcode
            where address.addrid = :ipbilladdrid;
        opthebilladdrid = :ipbilladdrid;
      END

    END
    else BEGIN
      if (ipbilladdrid != 0) then begin
        /* find and delete it as it is all blanks now */
        DELETE FROM address WHERE addrid = :ipbilladdrid;
        opthebilladdrid = 0; /* no bill address */
      end
    end

    if (iporderid = 0) then begin
      optheorderid = GEN_ID(ORDER_ORDERID_GEN, 1);
      insert into SORDER
         (orderid, custid, entrydate, deladdrid, billaddrid, complete,
          invtype, bybinno, versionno, custtype, referralid,
          firstjobdate,
          faxno,
          email,
          userid,
          customersiteid,
          cjobno)
         values (:optheorderid, :ipcustid, current_date, :optheaddrid,
                 :opthebilladdrid, :ipcomplete, :ipinvtype, :ipbybinno,
                 1, :ipcusttype, :ipreferralid,
                 :ipfirstjob,
                 :ipfaxno,
                 :ipemail,
                 :ipuserid,
                 :ipcustsiteid,
                 :ipjobno);
      /* if there is a customer site specified for this order then make sure
       * that the site also points back to this order
       */
      if (ipcustsiteid != 0)
      then update customersite set
                  customersite.ORDERID = :optheorderid
                  where customersite.SITEID = :ipcustsiteid;
    END
    else begin
         update sorder set
            custid = :ipcustid,
            complete = :ipcomplete,
            invtype = :ipinvtype,
            bybinno = :ipbybinno,
            deladdrid = :optheaddrid,
            billaddrid = :opthebilladdrid,
            versionno = versionno + 1,
            custtype = :ipcusttype,
            referralid = :ipreferralid,
            firstjobdate = :ipfirstjob,
            faxno = :ipfaxno,
            email = :ipemail,
            userid = :ipuserid,
            customersiteid = :ipcustsiteid,
            cjobno = :ipjobno
            where sorder.orderid = :iporderid;
        optheorderid = iporderid;
    end
    
    /* and save the week numbers... */
    /* clear the old first */
    delete from ORDERWEEKS
        where orderweeks.orderid = :optheorderid;
    lloop = ipwknofirst;
    while (lloop <= ipwknolast) do begin
      insert into orderweeks
                (orderweeks.orderid, orderweeks.weekno)
         values (:optheorderid, :lloop);
      lloop = lloop + 1;
    end

    
    /* and now update our special table which helps us search by address */
    execute procedure spsave_addrfind (
         :optheorderid,
         :iptown,
         :ipaddress1,
         :ipstreetnumber,
         :optheaddrid);

  end  /* of not invalid versionno */
  
  SUSPEND;
END^


ALTER PROCEDURE SPSAVE_ORDERPLACEDBY (
    IPJOBID INTEGER,
    IPPLACEDBY CHAR(30),
    IPENTITYID INTEGER,
    IPUSERID INTEGER)
AS
begin
  update job set
                 job.orderplacedby = :ipplacedby,
                 job.DTLASTAMENDED = current_timestamp
          where job.jobid = :ipjobid;
  execute procedure UPD_EVENT ('lastjob');
end^


ALTER PROCEDURE SPSAVE_PAYMETHOD (
    IPPAYMETHODID INTEGER,
    IPDESCRIPTION CHAR(6),
    IPACCT SMALLINT,
    IPMEANSPAID SMALLINT,
    IPVERSIONNO INTEGER,
    IPISCHEQUE SMALLINT,
    IPISCASH SMALLINT,
    IPSURCHARGE DECIMAL(4,1))
RETURNS (
    OPPAYMETHODID INTEGER)
AS
begin
  if (ippaymethodid = 0) then begin
    oppaymethodid = gen_id(genpaymethodid, 1);
    insert into paymethod
        (paymethod.paymethodid,
         paymethod.description,
         paymethod.acct,
         paymethod.meanspaid,
         paymethod.versionno,
         paymethod.ischeque,
         paymethod.iscash,
         paymethod.surcharge)
         values
         (:oppaymethodid,
          :ipdescription,
          :ipacct,
          :ipmeanspaid,
          :ipversionno,
          :ipischeque,
          :ipiscash,
          :ipsurcharge);
  end
  else begin
    oppaymethodid = ippaymethodid;
    update paymethod
        set paymethod.description = :ipdescription,
         paymethod.acct = :ipacct,
         paymethod.meanspaid = :ipmeanspaid,
         paymethod.versionno = :ipversionno,
         paymethod.ischeque = :ipischeque,
         paymethod.iscash = :ipiscash,
         paymethod.surcharge = :ipsurcharge
         where paymethod.paymethodid = :ippaymethodid;
  end
end^


ALTER PROCEDURE SPSAVE_PINVBATCH (
    IPINVBATCH INTEGER = null,
    IPCREATEDDATE TIMESTAMP = null,
    IPEXPORTEDDATE TIMESTAMP = null,
    IPFILENAME CHAR(50) = null,
    IPCOUNT SMALLINT = null,
    IPINVPERIOD INTEGER = null,
    IPREFID INTEGER = null,
    IPBATCHTYPE INTEGER = null)
RETURNS (
    THEINVBATCH INTEGER)
AS
declare variable lversionno integer;
BEGIN
  /* Procedure body */
  if (ipinvbatch <= 0) then
  begin
    if (ipinvbatch = -1) then begin
      /* -1 flags that we do not want to add to any existing batch - always
       * start a new batch
       */
      theinvbatch = 0;
    end
    else begin
      /* is there already an un-exported batch on this day ? */
      select pinvoicebatch.pinvbatchno
           from pinvoicebatch
           where pinvoicebatch.createddate = :ipcreateddate
             and pinvoicebatch.exportedcount = 0
             and pinvoicebatch.batchtype = :ipbatchtype
            rows 1
            into :theinvbatch;
    end
    if (theinvbatch = 0 or theinvbatch is null)
    then begin
     theinvbatch = GEN_ID(GENPINVBATCHNO, 1);
     insert into PINVOICEBATCH
         (pinvbatchno,
          createddate, exporteddate,
          exportedfilename, exportedcount,
          invperiod, versionno,
          refid,
          PINVOICEBATCH.batchtype)
         values (:theinvbatch,
          :ipcreateddate, :ipexporteddate,
          :ipfilename, :ipcount,
          :ipinvperiod, 1,
          :iprefid,
          :ipbatchtype);
          /*
    theversionno = 1;
    thestatus = 0;
    */
    end
  end
  else begin
  /*
   theinvbatch = :ipinvbatch;
   SELECT versionno FROM invoicebatch where invbatchno = :ipinvbatch
           INTO :lversionno;
    if (lversionno != ipversionno)
    then BEGIN
      theversionno = :lversionno;
      thestatus = 1;
    END
    else begin
      lversionno = :lversionno + 1;
      */
      update PINVOICEBATCH set
           /* createddate = :ipcreateddate, can't change */
           exporteddate = :ipexporteddate,
           exportedfilename = :ipfilename,
           exportedcount = :ipcount,
           /* invperiod = :ipinvperiod,  can't change */
           versionno = versionno + 1,
           refid = :iprefid,
           batchtype = :ipbatchtype
         where pinvoicebatch.pinvbatchno = :ipinvbatch
        ;
      theinvbatch = :ipinvbatch;
        /*
      theversionno = :lversionno;
      thestatus = 0;
    end */
  END
  
  SUSPEND;
END^


ALTER PROCEDURE SPSAVE_PINVLINE (
    IPPINVID INTEGER = null,
    IPLINENO INTEGER = null,
    IPEXGSTVALUE DECIMAL(18,2) = null,
    IPGST DECIMAL(18,2) = null,
    IPTOTALVALUE DECIMAL(18,2) = null,
    IPLINETYPE SMALLINT = null,
    IPJOBID INTEGER = null,
    IPFEEID INTEGER = null,
    IPITEMCODE CHAR(12) = null,
    IPINVNO INTEGER = null)
RETURNS (
    ERRSTATUS INTEGER)
AS
declare variable linvno integer;
declare variable luselinetype integer;
declare variable lid integer;
BEGIN
  /* this is a 'save once' type record so no need for versionnos */
  errstatus = 0;
  linvno = 0;

  luselinetype = iplinetype;
  
  /* linetype:
   * 0 is ScrapLoad
   */

  if (iplinetype = 0) then begin
    select scraploadlinenh.scrapload_id, scraploadlinenh.invlineno from scraploadlinenh
           where scraploadlinenh.scraploadlineid = :ipjobid
           into :lid, :linvno;
     /* for scrap loads we will leave the invlineno in the :linvno field, this is
     * because the invno is held in the header table, scrapload. And if this is not
     * the first line to be invoiced then the header will already have an invno and
     * therefore if we used the invno to check if this item was already invoiced
     * it would appear like it was invoiced but really it would only be because the
     * invno is being stored in a shared space (shared by all the lines on the load)
     * So I use the invlineno to see if this has already been invoiced.  
    select scrapload.invno from scrapload where scrapload.scraploadid = :lid
           into :linvno;
     */
  end
  else if (iplinetype = 2) then begin
    select deductionlinenh.scrapload_id, deductionlinenh.invlineno
           from deductionlinenh
           where deductionlinenh.deductionid = :ipjobid
           into :lid, :linvno;
  end
  else if (iplinetype = 3) then begin
    select scraploadlinelevynh.scraploadline_id, scraploadlinelevynh.invlineno
           from scraploadlinelevynh
           where scraploadlinelevynh.slllid = :ipjobid
           into :lid, :linvno;
  end
  
  if (linvno is not null and linvno != 0) then begin
      errstatus = 2;  /* job or fee is already invoiced */
  end
  else BEGIN
   insert into pinvline
     (pinvid,
      invlineno,
      exgstvalue,
      gst,
      totalvalue,
      linetype,
      itemcode)
      values (
      :ippinvid,
      :iplineno,
      :ipexgstvalue,
      :ipgst,
      :iptotalvalue,
      :luselinetype,
      :ipitemcode
      );
   if (iplinetype = 0) then begin
     update scraploadlinenh set scraploadlinenh.invlineno = :iplineno
           where scraploadlinenh.scraploadlineid = :ipjobid;
     update scraploadnh set scraploadnh.purchaseinvid = :ippinvid,
           scraploadnh.invno = :ipinvno
           where scraploadnh.scraploadid = :lid;
   end
   else if (iplinetype = 2) then begin
     update deductionlinenh set deductionlinenh.invlineno = :iplineno
            where deductionlinenh.deductionid = :ipjobid; 
     update scraploadnh set scraploadnh.purchaseinvid = :ippinvid,
           scraploadnh.invno = :ipinvno
           where scraploadnh.scraploadid = :lid;
   end
   else if (iplinetype = 3) then begin
     update scraploadlinelevynh set scraploadlinelevynh.invlineno = :iplineno
            where scraploadlinelevynh.slllid = :ipjobid;
   end

   errstatus = 0;
  end
  suspend;

end^


ALTER PROCEDURE SPSAVE_PINVOICE (
    IPINVBATCH INTEGER = null,
    IPCUSTID INTEGER = null,
    IPINVDATE DATE = null,
    IPDUEDATE DATE = null,
    IPBILLADDRID INTEGER = null,
    IPCOMMENTS CHAR(200) = null,
    IPDESIREDINVNO INTEGER = null)
RETURNS (
    OPPINVID INTEGER,
    OPINVNO INTEGER,
    ERRSTATUS INTEGER)
AS
declare variable lcount integer;
BEGIN
  select COUNT(pinvbatchno) from pinvoicebatch
     where pinvoicebatch.pinvbatchno = :ipinvbatch
     into :lcount;
  if (lcount = 0) then begin
    errstatus = 3;  /* no invoice batch record */
  END
  else begin

    oppinvid = gen_id(genpinvid, 1);

    if (ipdesiredinvno != 0)
    then opinvno = ipdesiredinvno;
    else opinvno = GEN_ID(genacctsaleno, 1);
    
    insert into pinvoice
         (pinvoice.pinvid,
          invno, pinvoice.pinvbatchid,
          custid, invdate,
          duedate, billaddrid,
          pinvoice.COMMENTS,
          pinvoice.paidinfull,
          pinvoice.paidsofar
          )
         values (
         :oppinvid,
          :opinvno, :ipinvbatch,
          :ipcustid, :ipinvdate,
          :ipduedate, :ipbilladdrid,
          :ipcomments,
          0,
          0
          );
     errstatus = 0; /* a good save */
  end
  SUSPEND;
END^


ALTER PROCEDURE SPSAVE_PRICE (
    IPCUSTID INTEGER DEFAULT NULL,
    IPPRICEAREAID INTEGER DEFAULT NULL,
    IPBINTYPEID INTEGER DEFAULT NULL,
    IPPRICE DECIMAL(18,2) DEFAULT NULL,
    IPFIXED SMALLINT DEFAULT NULL,
    IPOLDPRICE DECIMAL(18,2) DEFAULT NULL,
    IPOLDFIXED SMALLINT DEFAULT NULL,
    IPCLOBBER SMALLINT DEFAULT NULL,
    IPINCEX SMALLINT DEFAULT NULL,
    IPOLDINCEX SMALLINT DEFAULT NULL)
RETURNS (
    THESTATUS INTEGER)
AS
DECLARE VARIABLE LPRICE DECIMAL(18, 2);
DECLARE VARIABLE LFIXED SMALLINT;
DECLARE VARIABLE LINCEX SMALLINT;
BEGIN
  select prices.price, PRICES.FIXED, prices.incex
        from prices
         where prices.CUSTID = :ipcustid
           and prices.PRICEAREAID = :ippriceareaid
           and prices.BINTYPEID = :ipbintypeid
        into :lprice, :lfixed, :lincex;
  if (row_count = 1) then BEGIN
    if (ipclobber = 0 and
        (lprice <> ipoldprice or
         lfixed <> ipoldfixed or
         lincex <> ipoldincex))
    then thestatus = 1;
    else BEGIN
      if (ipprice = 0.00)
      then delete from prices
             where prices.CUSTID = :ipcustid
               and prices.PRICEAREAID = :ippriceareaid
               and prices.BINTYPEID = :ipbintypeid;
      else update prices set
             prices.price = :ipprice,
             prices.fixed = :ipfixed,
             PRICES.INCEX = :ipincex
             where prices.CUSTID = :ipcustid
               and prices.PRICEAREAID = :ippriceareaid
               and prices.BINTYPEID = :ipbintypeid;
      thestatus = 0;
    end
  END
  else begin
    if (ipprice <> 0.00) then begin
      insert into prices
             (custid, priceareaid, bintypeid,
              price, fixed, incex)
        values (:ipcustid, :ippriceareaid, :ipbintypeid,
              :ipprice, :ipfixed, :ipincex);
    end
    thestatus = 0;
  end
  
  SUSPEND;
  
END^


ALTER PROCEDURE SPSAVE_PRICEAREA (
    IPPRICEAREAID INTEGER,
    IPDESCRIPTION CHAR(30),
    IPDEFAULTAREA INTEGER,
    IPASBESTOSAREA INTEGER,
    IPVERSIONNO INTEGER,
    IPSORTORDER INTEGER,
    IPACTIVE INTEGER,
    IPCHARGESFORPU INTEGER)
RETURNS (
    THEPRICEAREAID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
declare variable lversionno integer;
BEGIN
  /* make sure all the other pricearea defaultarea and asbestos flags
   * are unset if this one is becoming thedefaultarea or asbestoas
   * area
   */
  if (ipdefaultarea = 1) then
  begin
    update pricearea set defaultarea = 0;
  end
  if (ipasbestosarea = 1) then
  begin
    update pricearea set asbestosarea = 0;
  end
  
  /* Procedure body */
  if (ippriceareaid = 0) then
  begin
    thepriceareaid = GEN_ID(PRICEAREA_PRICEAREAID_GEN, 1);
    insert into pricearea
         (priceareaid, description, defaultarea, asbestosarea,
          versionno, sortorder, isactive,
          chargesforpu  /*, includedweight, includedvolume,
          tipsiteid, priceperton, pricepercube */
          )
         values (:thepriceareaid, :ipdescription, :ipdefaultarea,
                 :ipasbestosarea, 1, :ipsortorder, :ipactive,
                 :ipchargesforpu
                 /*
                 :ipincludedweight,
                 :ipincludedvolume,
                 :iptipsiteid,
                 :ippriceperton,
                 :ippricepercube
                 */
                 );
    thestatus = 0;
    theversionno = 1;
  end
  else begin
    thepriceareaid = :ippriceareaid;
    SELECT versionno FROM pricearea where priceareaid = :ippriceareaid
           INTO :lversionno;
    if (lversionno != ipversionno)
    then BEGIN
      theversionno = :lversionno;
      thestatus = 1; /* error - record has changed */
    END
    else begin
       lversionno = :lversionno + 1;
       update pricearea set description = :ipdescription,
                         defaultarea = :ipdefaultarea,
                         asbestosarea = :ipasbestosarea,
                         versionno = :lversionno,
                         sortorder = :ipsortorder,
                         isactive = :ipactive,
                         chargesforpu = :ipchargesforpu
                         /*
                         includedweight = :ipincludedweight,
                         includedvolume = :ipincludedvolume,
                         tipsiteid = :iptipsiteid,
                         priceperton = :ippriceperton,
                         pricepercube = :ippricepercube
                         */
          where priceareaid = :ippriceareaid;
    
       theversionno = :lversionno;
       thestatus = 0;
    end
  END
  
  SUSPEND;
  
  execute procedure UPD_EVENT ('lastmaster');
END^


ALTER PROCEDURE SPSAVE_RECYCLEDGOOD (
    IPRGID INTEGER,
    IPDESCRIPTION CHAR(40),
    IPDELIVEREDPRICE DECIMAL(8,2),
    IPPUPRICE DECIMAL(8,2),
    IPACCOUNTNO CHAR(25),
    IPITEMCODE CHAR(12),
    IPSHORTDESC CHAR(10))
RETURNS (
    OPRGID INTEGER)
AS
begin
  if (iprgid = 0) then begin
         oprgid = gen_id(genrgid, 1);
         insert into recycledgoods
            (recycledgoods.rgid, recycledgoods.description,
             recycledgoods.deliveredincprice,
             recycledgoods.pickupincprice,
             recycledgoods.accountno,
             recycledgoods.itemcode,
             recycledgoods.shortdesc)
            values
            (:oprgid, :ipdescription,
             :ipdeliveredprice,
             :ippuprice,
             :ipaccountno,
             :ipitemcode,
             :ipshortdesc);
  end
  else begin
    oprgid = iprgid;
    update recycledgoods set
            recycledgoods.description = :ipdescription,
            recycledgoods.deliveredincprice = :ipdeliveredprice,
            recycledgoods.pickupincprice = :ippuprice,
            recycledgoods.accountno = :ipaccountno, 
            recycledgoods.itemcode = :ipitemcode,
            recycledgoods.shortdesc = :ipshortdesc
           where recycledgoods.rgid = :iprgid;
  end
end^


ALTER PROCEDURE SPSAVE_REFERRAL (
    IPREFERRALID INTEGER DEFAULT NULL,
    IPDESCRIPTION CHAR(20) DEFAULT NULL,
    IPVERSIONNO INTEGER DEFAULT NULL)
RETURNS (
    THEREFERRALID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
DECLARE VARIABLE LVERSIONNO INTEGER;
BEGIN
  /* Procedure body */
  if (ipreferralid = 0) then
  begin
    thereferralid = GEN_ID(GEN_REFERRALID, 1);
    insert into referral
         (referralid, description, versionno)
         values (:thereferralid, :ipdescription, 1);
    theversionno = 1;
    thestatus = 0;
  end
  else begin
   thereferralid = :ipreferralid;
   SELECT versionno FROM REFERRAL where referralid = :ipreferralid
           INTO :lversionno;
    if (lversionno != ipversionno)
    then BEGIN
      theversionno = :lversionno;
      thestatus = 1; /* error - record has changed */
    END
    else begin
      lversionno = :lversionno + 1;
      update REFERRAL set
           description = :ipdescription,
           versionno = :lversionno
         where referralid = :ipreferralid
        ;
      theversionno = :lversionno;
      thestatus = 0;
    end
  END
  
  SUSPEND;
  
  execute procedure UPD_EVENT ('lastmaster');
END^


ALTER PROCEDURE SPSAVE_RGROORDER (
    IPORDERID INTEGER,
    IPRGSOID INTEGER)
AS
begin
  update rgsalesorder set rgsalesorder.orderid = :iporderid
        where rgsalesorder.rgsoid = :iprgsoid;
end^


ALTER PROCEDURE SPSAVE_RGSORDER (
    IPRGSOID INTEGER,
    IPORDERNO INTEGER,
    IPCUSTID INTEGER,
    IPRGID INTEGER,
    IPTONS DECIMAL(8,2),
    IPDELIVERYTYPE SMALLINT,
    IPINCPRICE DECIMAL(8,2),
    IPSTREETNUMBER CHAR(10),
    IPADDRESS1 CHAR(30),
    IPADDRESS2 CHAR(30),
    IPTOWN CHAR(30),
    IPSTATE CHAR(30),
    IPPOSTCODE CHAR(10),
    IPDRIVERNOTES CHAR(200),
    IPOFFICENOTES CHAR(200),
    IPCUSTREF CHAR(20),
    IPCONTACT CHAR(30),
    IPPHONE CHAR(30),
    IPCOMPLETE SMALLINT,
    IPEMAIL CHAR(50),
    IPFAX CHAR(30),
    IPUSERID INTEGER,
    IPORDERID INTEGER,
    IPDELIVERYDATE DATE,
    IPMYOBJOBNO CHAR(50),
    IPGROSSWEIGHT DECIMAL(8,2),
    IPTAREWEIGHT DECIMAL(8,2),
    IPSURCHARGE DECIMAL(6,2),
    IPCASHROUNDING DECIMAL(5,2))
RETURNS (
    OPRGSOID INTEGER)
AS
declare variable laddrid integer;
begin
  if (iprgsoid = 0) then begin
    oprgsoid = gen_id(gensoorderid,  1);
    if (ipstreetnumber != '' or
        ipaddress1 != '' or
        ipaddress2 != '' or
        iptown != '' or
        ipstate != '' or
        ippostcode != '')
    then begin
      laddrid = GEN_ID(ADDRESS_ADDRID_GEN, 1);
      insert into ADDRESS
           (addrid, streetnumber, address1, address2, town, state, postcode)
           values (:laddrid,
                   :ipstreetnumber,
                   :ipaddress1,
                   :ipaddress2, :iptown,
                   :ipstate, :ippostcode);
    end
    else laddrid = 0;
    insert into rgsalesorder
            (rgsalesorder.rgsoid,
             rgsalesorder.orderno,
             rgsalesorder.custid,
             rgsalesorder.rgid,
             rgsalesorder.tons,
             rgsalesorder.deliverytype,
             rgsalesorder.incprice,
             rgsalesorder.drivernotes,
             rgsalesorder.officenotes,
             rgsalesorder.customerreference,
             rgsalesorder.contactname,
             rgsalesorder.contactphone,
             rgsalesorder.addrid,
             rgsalesorder.complete,
             rgsalesorder.email,
             rgsalesorder.fax,
             rgsalesorder.userid,
             rgsalesorder.orderid,
             rgsalesorder.deliverydate,
             rgsalesorder.myobjobno,
             rgsalesorder.grossweight, 
             rgsalesorder.tareweight,
             rgsalesorder.surcharge,
             rgsalesorder.cashrounding)
             values
            (:oprgsoid, 
             :IPORDERNO,
             :IPCUSTID,
             :IPRGID,
             :IPTONS,
             :IPDELIVERYTYPE,
             :IPINCPRICE,
             :IPDRIVERNOTES,
             :IPOFFICENOTES,
             :IPCUSTREF,
             :IPCONTACT,
             :IPPHONE,
             :LADDRID,
             :ipcomplete,
             :ipemail,
             :ipfax,
             :ipuserid,
             :iporderid,
             :ipdeliverydate,
             :ipmyobjobno,
             :ipgrossweight,
             :iptareweight,
             :ipsurcharge,
             :ipcashrounding
             );
  end
  else begin
    oprgsoid = iprgsoid;
    update rgsalesorder set
        rgsalesorder.orderno = :iporderno,
        rgsalesorder.custid = :ipcustid, 
        rgsalesorder.rgid = :iprgid,
        rgsalesorder.tons = :iptons, 
        rgsalesorder.deliverytype = :ipdeliverytype,
        rgsalesorder.incprice = :ipincprice,
             rgsalesorder.drivernotes = :ipdrivernotes,
             rgsalesorder.officenotes = :ipofficenotes,
             rgsalesorder.customerreference = :ipcustref,
             rgsalesorder.contactname = :ipcontact,
             rgsalesorder.contactphone = :ipphone,
             /* rgsalesorder.deliverydate = :ipdeliverydate, */
             /* rgsalesorder.deliveryctime = :ipdeliveryctime, */
             /* rgsalesorder.deliveryntime = :ipdeliveryntime */
             rgsalesorder.complete = :ipcomplete,
             rgsalesorder.email = :ipemail, 
             rgsalesorder.fax = :ipfax, 
             rgsalesorder.userid = :ipuserid,
             rgsalesorder.orderid = :iporderid,
             rgsalesorder.deliverydate = :ipdeliverydate,
             rgsalesorder.myobjobno = :ipmyobjobno,
             rgsalesorder.grossweight = :ipgrossweight,
             rgsalesorder.tareweight = :iptareweight,
             rgsalesorder.surcharge = :ipsurcharge,
             rgsalesorder.cashrounding = :ipcashrounding
         where rgsalesorder.rgsoid = :iprgsoid;

     select rgsalesorder.addrid
           from rgsalesorder
           where rgsalesorder.rgsoid = :iprgsoid
           into :LADDRID;
      if (LADDRID != 0)
      then update address set
            streetnumber = :ipstreetnumber,
            address1 = :ipaddress1,
            address2 = :ipaddress2,
            town = :iptown,
            state = :ipstate,
            postcode = :ippostcode
            where address.addrid = :laddrid;
      else if (ipstreetnumber != '' or
        ipaddress1 != '' or
        ipaddress2 != '' or
        iptown != '' or
        ipstate != '' or
        ippostcode != '')
      then begin
        laddrid = GEN_ID(ADDRESS_ADDRID_GEN, 1);
        insert into ADDRESS
           (addrid, streetnumber, address1, address2, town, state, postcode)
           values (:laddrid,
                   :ipstreetnumber,
                   :ipaddress1,
                   :ipaddress2, :iptown,
                   :ipstate, :ippostcode);
         update rgsalesorder set rgsalesorder.addrid = :laddrid
                where rgsalesorder.rgsoid = :iprgsoid;
    end
  end
END^


ALTER PROCEDURE SPSAVE_RMGROUP (
    IPID INTEGER,
    IPDESCRIPTION CHAR(40),
    IPSHORTDESC CHAR(60),
    IPTOTONS DECIMAL(8,3))
RETURNS (
    THEID INTEGER)
AS
begin
  if (ipid = 0) then
  begin
    theid = GEN_ID(GEN_rmgroupid, 1);
    insert into rmgroup
         (rmgroupid, description, shortdesc, totons)
         values (:theid, :ipdescription, :ipshortdesc, :iptotons);
  end
  else begin
      update rmgroup set
                      rmgroup.description = :ipdescription,
                      rmgroup.shortdesc = :ipshortdesc,
                      rmgroup.totons = :iptotons
         where rmgroup.rmgroupid = :ipid;
      theid = ipid;
  END
  
  execute procedure UPD_EVENT ('lastmaster');
end^


ALTER PROCEDURE SPSAVE_SALESMAN (
    IPSALESMANID INTEGER,
    IPNAME CHAR(40),
    IPTELEPHONE CHAR(12),
    IPEMAIL CHAR(50),
    IPISACTIVE INTEGER,
    IPINITPERCUBE DECIMAL(6,2),
    IPPERCUBE DECIMAL(6,2),
    IPINITPERCENT DECIMAL(6,2),
    IPPERCENT DECIMAL(6,2))
RETURNS (
    OPSALESMANID INTEGER)
AS
begin
  if (ipsalesmanid = 0) then begin
    opsalesmanid = GEN_ID(gen_salesmanid, 1);
    insert into salesman
         (salesmanid, name, telephone, email, isactive,
          salesman.initialpercube,
          salesman.percube,
          salesman.initialpercent,
          salesman.percent)
         values (:opsalesmanid, :ipname, :iptelephone,
                 :ipemail, :ipisactive,
                 :ipinitpercube,
                 :ippercube,
                 :ipinitpercent,
                 :ippercent
                 );
  end
  else begin
    update salesman
        set salesman.name = :ipname,
            salesman.telephone = :iptelephone,
            salesman.email = :ipemail,
            salesman.isactive = :ipisactive,
            salesman.initialpercube = :ipinitpercube,
            salesman.percube = :ippercube,
            salesman.initialpercent = :ipinitpercent,
            salesman.percent = :ippercent
        where salesman.salesmanid = :ipsalesmanid;
    opsalesmanid = ipsalesmanid;
  end
end^


ALTER PROCEDURE SPSAVE_SITE (
    IPSITEID INTEGER = null,
    IPDESCRIPTION CHAR(20) = null,
    IPTIPSITE INTEGER = null,
    IPVERSIONNO INTEGER = null,
    IPDEFAULTSITE INTEGER = null,
    IPINCLUDEDWEIGHT DECIMAL(5,3) = null,
    IPINCLUDEDVOLUME DECIMAL(4,1) = null,
    IPPRICEPERTON DECIMAL(6,2) = null,
    IPPRICEPERCUBE DECIMAL(6,2) = null)
RETURNS (
    THESITEID INTEGER,
    THEVERSIONNO INTEGER,
    THESTATUS INTEGER)
AS
declare variable lversionno integer;
BEGIN
  /* Procedure body */
  execute procedure UPD_EVENT ('lastmaster');
  
  /* make sure all the other site defaultsite flags
   * are unset if this one is becoming thedefaultsite
   */
  if (ipdefaultsite = 1) then
  begin
    update site set defaultsite = 0;
  end
  
  if (ipsiteid = 0) then
  begin
    thesiteid = GEN_ID(site_siteID_GEN, 1);
    insert into site
         (siteid, description, tipsite, versionno, defaultsite,
          site.includedweight,
          site.includedvolume,
          site.priceperton,
          site.pricepercube
         )
         values (:thesiteid, :ipdescription, :iptipsite,
                 1, :ipdefaultsite,
                 :ipincludedweight,
                 :ipincludedvolume,
                 :ippriceperton,
                 :ippricepercube
                 );
    theversionno = 1;
    thestatus = 0;
  end
  else begin
    SELECT versionno FROM site where siteid = :ipsiteid
           INTO :lversionno;
    if (lversionno != ipversionno)
    then BEGIN
      theversionno = :lversionno;
      thestatus = 1; /* error - record has changed */
    END
    else begin
      update site set description = :ipdescription,
                      tipsite = :iptipsite,
                      versionno = versionno + 1,
                      defaultsite = :ipdefaultsite,
                      site.includedweight = :ipincludedweight,
                      site.includedvolume = :ipincludedvolume,
                      site.priceperton = :ippriceperton,
                      site.pricepercube = :ippricepercube
         where siteid = :ipsiteid;
      thesiteid = :ipsiteid;
      theversionno = :lversionno + 1;
      thestatus = 0;
    end
  END
  
  SUSPEND;
END^


ALTER PROCEDURE SPSAVE_SITEBININVOICE (
    IPJOBID INTEGER,
    IPFROMDATE DATE,
    IPTODATE DATE,
    IPBINTYPEID INTEGER,
    IPBINCOUNT INTEGER,
    IPINVNO INTEGER,
    IPINVLINENO INTEGER)
AS
begin
  insert into sitebininvoices
               (jobid, fromdate, todate,
                bintypeid, bincount,
                invno, invlineno)
        values (:ipjobid, :ipfromdate, :iptodate,
                :ipbintypeid,  :ipbincount,
                :ipinvno, :ipinvlineno);
end^


ALTER PROCEDURE SPSAVE_SITEFOREMAN (
    IPCUSTSITEID INTEGER,
    IPFOREMANID INTEGER,
    IPNAME CHAR(40),
    IPCONTACTNUMBER CHAR(30))
RETURNS (
    OPFOREMANID INTEGER)
AS
begin
  if (ipforemanid = 0) then begin
    opforemanid = GEN_ID(gen_foremanid, 1);
    insert into siteforeman
            (customersiteid, foremanid, name, contactnumber)
        values (:ipcustsiteid, :opforemanid, :ipname, :ipcontactnumber);
  end
  else begin
    opforemanid = ipforemanid;
    update siteforeman
        set siteforeman.name = :ipname,
            siteforeman.contactnumber = :ipcontactnumber
        where siteforeman.customersiteid = :ipcustsiteid
          and siteforeman.foremanid = :ipforemanid;
  end

end^


ALTER PROCEDURE SPSAVE_SMS (
    IPSMSTYPE SMALLINT DEFAULT NULL,
    IPID INTEGER DEFAULT NULL,
    IPMESSAGE CHAR(160) DEFAULT NULL,
    IPSUCCESSFUL INTEGER DEFAULT NULL,
    IPMOBILE CHAR(20) DEFAULT NULL)
AS
BEGIN
  insert into SMS
         (smstype, id, textmessage, timesent,
          successfullysent, mobile)
         values (:ipsmstype,
                 :ipid,
                 :ipmessage,
                 current_timestamp,
                 :ipsuccessful,
                 :ipmobile
                );
END^


ALTER PROCEDURE SPSAVE_SMSCOUNT (
    IPFORDATE DATE,
    IPMSGCOUNT INTEGER)
AS
begin
  insert into smssent
        (smssent.formonth,
         smssent.msgcount)
         values
        (:ipfordate,
         :ipmsgcount);
end^


ALTER PROCEDURE SPSAVE_SMSTEMPLATE (
    IPID INTEGER DEFAULT NULL,
    IPDESCRIPTION CHAR(30) CHARACTER SET ASCII DEFAULT NULL,
    IPTHETEXT CHAR(170) CHARACTER SET ASCII DEFAULT NULL)
RETURNS (
    THEID INTEGER)
AS
BEGIN
  /* Procedure body */
  if (ipid = 0) then
  begin
    theid = GEN_ID(SMSID, 1);
    insert into SMSTEMPLATE
         (id, description,
          thetext)
         values (:theid, :ipdescription,
                 :ipthetext);
  end
  else begin
      update SMSTEMPLATE set
                         description = :ipdescription,
                      thetext = :ipthetext
         where SMSTEMPLATE.id = :ipid;
      theid = ipid;
  END
END^


ALTER PROCEDURE SPSAVE_STAKE_BINLINE (
    IPDATE DATE DEFAULT NULL,
    IPBINTYPEID INTEGER DEFAULT NULL,
    IPTOTALBINS INTEGER DEFAULT NULL,
    IPBINSAVAIL INTEGER DEFAULT NULL,
    IPSITEID INTEGER DEFAULT NULL,
    IPBINSAVAILEMPTY INTEGER DEFAULT NULL)
AS
BEGIN
/* this is done in a separate call - transaction ?
  delete from STOCKTAKE_BINTYPE_LINES
         where STOCKTAKE_BINTYPE_LINES.SDATE = :ipdate
           and STOCKTAKE_BINTYPE_LINES.BINTYPEID = :ipbintype
           and STOCKTAKE_BINTYPE_LINES.SITEID = :ipsiteid;
  */
 
  insert into STOCKTAKE_BINTYPE_LINES
         (sdate, bintypeid, totalbins, binsavailablefull,
          siteid, binsavailableempty )
         values (:ipdate, :ipbintypeid, :iptotalbins,
                  :ipbinsavail, :ipsiteid, :ipbinsavailempty);
              
END^


ALTER PROCEDURE SPSAVE_STAKE_BINTYPE (
    IPDATE DATE DEFAULT NULL,
    IPCOMMENT CHAR(40) DEFAULT NULL)
AS
DECLARE VARIABLE LCOUNT SMALLINT;
BEGIN
  select count(sdate)
      from STOCKTAKE_BINTYPE_DATES
      where STOCKTAKE_BINTYPE_DATES.SDATE = :ipdate
      into :LCOUNT;
  if (lcount = 1) THEN
    update STOCKTAKE_BINTYPE_DATES
       set STOCKTAKE_BINTYPE_DATES.SCOMMENT = :ipcomment
       where STOCKTAKE_BINTYPE_DATES.SDATE = :ipdate;
  ELSE
    insert into STOCKTAKE_BINTYPE_DATES
         (sdate, scomment)
         values (:ipdate, :ipcomment);
         
  /* the way the stocktakes are saved is that the lines are
   * saved first so this means the lines are already in place
   * when this header is saved - this allows us to call the
   * proc that recalculates the sitesoh figures
   */
   EXECUTE PROCEDURE SPCALC_SITESOH;

END^


ALTER PROCEDURE SPSAVE_STREET (
    IPSTREETID INTEGER,
    IPSTREETNAME CHAR(45),
    IPMAPREF CHAR(5),
    IPPAGENO INTEGER,
    IPSUBURBID INTEGER,
    IPDESIGNATOR CHAR(3))
RETURNS (
    OPSTREETID INTEGER)
AS
declare variable lstreetname char(45);
declare variable somestreetid integer;
BEGIN

  if (ipstreetid = 0) then begin
    lstreetname = lower(ipstreetname);
    /* is it really a new one - or just the same street with a different map reference ? */
    select streets.streetid
           from streets
           where streets.lcstreetname = :lstreetname
             and streets.suburbid = :ipsuburbid
             into somestreetid;
    if (row_count = 0) then begin
      opstreetid = gen_id(genstreetid, 1);
      insert into streets
       (streets.STREETID, streets.STREETNAME,
        streets.SUBURBID, streets.MAPREFERENCE,
        streets.PAGENUMBER,
        streets.designator,
        streets.lcstreetname)
        values
       (:opstreetid, :ipstreetname,
        :ipsuburbid, :ipmapref,
        :ippageno,
        :ipdesignator,
        lower(:ipstreetname));
    end
    else opstreetid = 0;
  end
  else begin
    update streets
      set streets.streetname = :ipstreetname,
          streets.SUBURBID = :ipsuburbid,
          streets.MAPREFERENCE = :ipmapref,
          streets.PAGENUMBER = :ippageno,
          streets.designator = :ipdesignator,
          streets.lcstreetname = lower(:ipstreetname)
      where streets.streetid = :ipstreetid;
      opstreetid = ipstreetid;
  end
END^


ALTER PROCEDURE SPSAVE_SUBURB (
    IPSUBURB VARCHAR(40) CHARACTER SET ASCII,
    IPPOSTCODE VARCHAR(5) CHARACTER SET ASCII,
    IPSTATE VARCHAR(30) CHARACTER SET ASCII,
    IPORIGSUBURB VARCHAR(40) CHARACTER SET ASCII,
    IPORIGPOSTCODE VARCHAR(5) CHARACTER SET ASCII,
    IPORIGSTATE VARCHAR(30) CHARACTER SET ASCII,
    IPLONG BIGINT,
    IPLAT BIGINT,
    IPFIREANTAREA INTEGER)
AS
BEGIN
  
  update SUBURBS set SUBURBS.SUBURBNAME = :ipsuburb,
         SUBURBS.POSTCODE = :ippostcode,
         SUBURBS.STATE = :ipstate,
         SUBURBS.lcname = lower(:ipsuburb),
         SUBURBS.LONGITUDE = :iplong,
         SUBURBS.LATITUDE = :iplat,
         suburbs.fireantarea = :ipfireantarea
         where SUBURBS.SUBURBNAME = :iporigsuburb
           and SUBURBS.POSTCODE = :iporigpostcode
           and SUBURBS.STATE = :iporigstate;
  if (row_count = 0) then BEGIN
    update SUBURBS set SUBURBS.LONGITUDE = :iplong,
                       SUBURBS.LATITUDE = :iplat,
                       suburbs.fireantarea = :ipfireantarea
         where SUBURBS.lcname = lower(:ipsuburb)
           and SUBURBS.POSTCODE = :ippostcode
           and SUBURBS.STATE = :ipstate;
  
     if (row_count = 0)
     then insert into SUBURBS (SUBURBS.SUBURBNAME,
                          SUBURBS.POSTCODE,
                          SUBURBS.STATE,
                          SUBURBS.lcname,
                          SUBURBS.LONGITUDE,
                          SUBURBS.LATITUDE,
                          suburbs.SUBURBID,
                          suburbs.fireantarea
                          )
       values (:ipsuburb, :ippostcode,
               :ipstate, lower(:ipsuburb),
               :iplong, :iplat,
               GEN_ID(gensuburbid, 1),
               :ipfireantarea);
  end
  
END^


ALTER PROCEDURE SPSAVE_SWCODE (
    IPSWCODEID INTEGER,
    IPSWCODENO CHAR(12),
    IPDESCRIPTION CHAR(150),
    IPSERVICETYPE CHAR(40),
    IPBINTYPEID INTEGER,
    IPBINFORMATID INTEGER,
    IPPRICEPER INTEGER,
    IPRATE DECIMAL(8,2),
    IPFLAGS INTEGER,
    IPSORTORDER INTEGER)
RETURNS (
    OPSWCODEID INTEGER)
AS
begin
  if (ipswcodeid = 0) then begin
    opswcodeid = gen_id(genswcodeid, 1);
    insert into swcodes
       (swcodes.swcodesid,
        swcodes.swcodeno,
        swcodes.desclong,
        swcodes.servicetype,
        swcodes.bintypeid,
        swcodes.binformatid,
        swcodes.pricedper,
        swcodes.rate,
        swcodes.flags,
        swcodes.sortorder)
       values
       (:opswcodeid,
        :ipswcodeno,
        :ipdescription,
        :ipservicetype,
        :ipbintypeid,
        :ipbinformatid,
        :ippriceper,
        :iprate,
        :ipflags,
        :ipsortorder);
  end
  else begin
    opswcodeid = ipswcodeid;
    update swcodes set
       swcodes.swcodeno = :ipswcodeno,
       swcodes.desclong = :ipdescription,
       swcodes.servicetype = :ipservicetype,
       swcodes.bintypeid = :ipbintypeid,
       swcodes.binformatid = :ipbinformatid,
       swcodes.pricedper = :ippriceper,
       swcodes.rate = :iprate,
       swcodes.flags = :ipflags,
       swcodes.sortorder = :ipsortorder
       where swcodes.swcodesid = :ipswcodeid;
  end
end^


ALTER PROCEDURE SPSAVE_SWORDER (
    IPSWORDERID INTEGER,
    IPREQUESTDATE DATE,
    IPORDEREDSWCODEID INTEGER,
    IPDELIVEREDSWCODEID INTEGER,
    IPDEPTCODE CHAR(12),
    IPMAXIMO CHAR(30),
    IPPROJECTID CHAR(30),
    IPBINSORDERED INTEGER,
    IPJOBID INTEGER,
    IPCUSTID INTEGER,
    IPORDERID INTEGER,
    IPDEPOTNO CHAR(12),
    IPREQUESTORPH CHAR(30),
    IPJOBTYPE INTEGER,
    IPREQUESTOR CHAR(30),
    IPSITEPERSON CHAR(30),
    IPSITENUMBER CHAR(30),
    IPUNITS DECIMAL(15,2))
RETURNS (
    OPSWORDERID INTEGER)
AS
begin
  if (ipsworderid = 0) then begin
    opsworderid = gen_id(gensworderid,1);
    insert into sworder
        (sworder.sworderid,
         sworder.requestdate,
         sworder.swcodeid,
         sworder.deliveredswcodeid,
         sworder.deptcode,
         sworder.maximoworkorderno,
         sworder.projectid,
         sworder.binsordered,
         sworder.jobid,
         sworder.custid,
         sworder.orderid,
         sworder.depotno,
         sworder.requestorphone,
         sworder.jobtype,
         sworder.requestor,
         sworder.sitecontactperson,
         sworder.sitecontactnumber,
         sworder.units)
        values
        (:opsworderid,
         :iprequestdate,
         :iporderedswcodeid,
         :ipdeliveredswcodeid,
         :ipdeptcode,
         :ipmaximo,
         :ipprojectid,
         :ipbinsordered,
         :ipjobid,
         :ipcustid,
         :iporderid,
         :ipdepotno,
         :iprequestorph,
         :ipjobtype,
         :iprequestor,
         :ipsiteperson,
         :ipsitenumber,
         :ipunits);
  end
  else begin
    opsworderid = ipsworderid;
    update sworder set
       sworder.requestdate = :iprequestdate,
       sworder.swcodeid = :iporderedswcodeid,
       sworder.deliveredswcodeid = :ipdeliveredswcodeid,
       sworder.deptcode = :ipdeptcode,
       sworder.maximoworkorderno = :ipmaximo,
       sworder.projectid = :ipprojectid,
       sworder.binsordered = :ipbinsordered,
       sworder.jobid = :ipjobid,
       sworder.custid = :ipcustid,
       sworder.orderid = :iporderid,
       sworder.depotno = :ipdepotno,
       sworder.requestorphone = :iprequestorph,
       sworder.jobtype = :ipjobtype,
       sworder.requestor = :iprequestor,
       sworder.sitecontactperson = :ipsiteperson,
       sworder.sitecontactnumber = :ipsitenumber,
       sworder.units = :ipunits
      where sworder.sworderid = :ipsworderid;
  end
end^


ALTER PROCEDURE SPSAVE_SYSDATA (
    IPSUBJECT INTEGER,
    IPDATA CHAR(200),
    IPDTIME TIMESTAMP)
AS
begin

    update sysdata set sysdata.dtfield = :ipdtime,
             sysdata.data = :ipdata
         where sysdata.subject = :ipsubject;
    if (row_count = 0)
    then insert into sysdata
                (subject, data, dtfield)
             values (:ipsubject,
                     :ipdata,
                     :ipdtime);

end^


ALTER PROCEDURE SPSAVE_SYSFLAG (
    IPSUBJECT CHAR(25) DEFAULT NULL,
    IPVALUE CHAR(140) DEFAULT NULL)
AS
DECLARE VARIABLE  cnt INTEGER;
BEGIN
  /* Procedure body */
  /*
  if (:ipvalue = '') then begin
    delete from sysflag where subject = :ipsubject;
  end
  else begin
  */
    select count (*) from sysflag where subject = :ipsubject into :cnt;
    if (:cnt = 0) then begin
      insert into sysflag
         (subject, data)
         values (:ipsubject, :ipvalue);
    end
    else
      update sysflag set data = :ipvalue
        where subject = :ipsubject;
        
    execute procedure UPD_EVENT ('lastmaster');

END^


ALTER PROCEDURE SPSAVE_TAREWT (
    IPREGO CHAR(20),
    IPTAREWT DECIMAL(12,2),
    IPTRAILERREGO CHAR(20))
AS
begin
  if (iptarewt != 0) then begin
    update tarewt set
           tarewt.thetarewt = :iptarewt,
           tarewt.trailerrego = :iptrailerrego
          where tarewt.rego = :iprego;
    if (row_count = 0) then begin
      insert into tarewt
       (tarewt.rego,
        tarewt.thetarewt,
        tarewt.trailerrego)
       values (
        :iprego,
        :iptarewt,
        :iptrailerrego);
    end
  end
end^


ALTER PROCEDURE SPSAVE_TIP (
    IPTIPID INTEGER,
    IPDDATE DATE,
    IPTIMEIN TIMESTAMP,
    IPTIMEOUT TIMESTAMP,
    IPCUSTID INTEGER,
    IPREGO CHAR(20),
    IPBYCUBIC SMALLINT,
    IPCUBICMETRES DECIMAL(18,1),
    IPGROSSWEIGHT DECIMAL(18,2),
    IPTAREWEIGHT DECIMAL(18,2),
    IPPAYMETHODID INTEGER,
    IPPRICE DECIMAL(18,2),
    IPPAYMENTID INTEGER,
    IPINVNO INTEGER,
    IPINVLINENO INTEGER,
    IPISPAID SMALLINT,
    IPMATERIALID INTEGER,
    IPVERSIONNO INTEGER,
    IPTIPSITEID INTEGER,
    IPCLOBBER SMALLINT,
    IPCOMMENTS CHAR(200),
    IPPAYREF CHAR(20),
    IPGROSSWEIGHT2 DECIMAL(18,2),
    IPCAMEFROM CHAR(30),
    IPDUMPEDIN CHAR(30),
    IPOKAYEDTOINVOICE SMALLINT,
    IPTAREWEIGHT2 DECIMAL(12,2),
    IPTRAILERREGO CHAR(20),
    IPTIPDDNO INTEGER,
    IPMYOBJOBNO CHAR(30),
    IPCUSTREF CHAR(30),
    IPBINJOBID INTEGER,
    IPEPAENTRYPURPOSEID INTEGER,
    IPEPASUBWASTESTREAMID INTEGER,
    IPEPAVEHICLETYPECODE CHAR(20),
    IPEPAWASTESTREAMID INTEGER,
    IPEPAWASTETYPEID INTEGER,
    IPEPAAPPROVALNUMBER CHAR(30),
    IPFLAGS INTEGER,
    IPFIXEDVALUEEX DECIMAL(8,2),
    IPFIXEDVALUEGST DECIMAL(8,2),
    IPSURCHARGE DECIMAL(6,2),
    IPCASHROUNDING DECIMAL(5,2))
RETURNS (
    OPTHETIPID INTEGER,
    OPTHEVERSIONNO INTEGER,
    OPTHESTATUS INTEGER,
    OPTIPDDNO INTEGER,
    OPTRANNO INTEGER)
AS
BEGIN
  if (iptipid = 0) then BEGIN
    opthetipid = GEN_ID(GENTIPID, 1);
    if (iptipddno = 0)
    then optipddno = GEN_ID(GENTIPDDNO, 1);
    else optipddno = iptipddno;
    optranno = GEN_ID(tiptrannumber, 1);
    insert into tip
         (id,
          ddate,
          timein,
          timeout,
          custid,
          rego,
          bycubic,
          cubicmetres,
          grossweight,
          tareweight,
          paymethodid,
          price,
          paymentid,
          invno,
          invlineno,
          ispaid,
          materialid,
          versionno,
          tipsiteid,
          comments,
          payreference,
          grossweight2,
          camefrom,
          dumpedin,
          tipddno,
          okayedtoinvoice,
          tareweight2,
          trailerrego ,
          tip.myobjobno,
          tip.customerreference,
          tip.binjobid,
          tip.epaentrypurposeid,
          tip.epasubwastestreamid,
          tip.epavehicletypecode,
          tip.epawastestreamid,
          tip.epawastetypeid,
          tip.epaapprovalnumber,
          tip.flags,
          TIP.transactionnumber,
          tip.fixedvalueexgst,
          tip.fixedvaluegst,
          tip.surcharge,
          tip.cashrounding
          )
    values
          (:opthetipid,
          :ipddate,
          :iptimein,
          :iptimeout,
          :ipcustid,
          :iprego,
          :ipbycubic,
          :ipcubicmetres,
          :ipgrossweight,
          :iptareweight,
          :ippaymethodid,
          :ipprice,
          :ippaymentid,
          :ipinvno,
          :ipinvlineno,
          :ipispaid,
          :ipmaterialid,
          1,
          :iptipsiteid,
          :ipcomments,
          :ippayref,
          :ipgrossweight2,
          :ipcamefrom,
          :ipdumpedin,
          :optipddno,
          :ipokayedtoinvoice,
          :iptareweight2,
          :iptrailerrego,
          :ipmyobjobno,
          :ipcustref,
          :ipbinjobid,
          :ipepaentrypurposeid,
          :ipepasubwastestreamid,
          :ipepavehicletypecode,
          :ipepawastestreamid,
          :ipepawastetypeid,  
          :ipepaapprovalnumber,
          :ipflags,
          :optranno,
          :ipfixedvalueex,
          :ipfixedvaluegst,
          :ipsurcharge,
          :ipcashrounding
          );
    optheversionno = 1;
    opthestatus = 0;
  END
  else begin
    opthetipid = iptipid;
    optipddno = :iptipddno;
    optranno = -1;
    /*
    SELECT versionno, tipddno FROM tip where tip.id = :iptipid
           INTO :lversionno, :optipddno;
    if (ipclobber = 0 and lversionno != ipversionno)
    then BEGIN
      optheversionno = :lversionno;
      opthestatus = 1; // error - record has changed
    END
    else begin
    */
      update tip set
          tip.ddate = :ipddate,
          tip.timein = :iptimein,
          tip.timeout = :iptimeout,
          tip.CUSTID = :ipcustid,
          tip.rego = :iprego,
          tip.BYCUBIC = :ipbycubic,
          tip.CUBICMETRES = :ipcubicmetres,
          tip.GROSSWEIGHT = :ipgrossweight,
          tip.TAREWEIGHT = :iptareweight,
          tip.PAYMETHODID = :ippaymethodid,
          tip.PRICE = :ipprice,
          tip.PAYMENTID = :ippaymentid,
          tip.INVNO = :ipinvno,
          tip.INVLINENO = :ipinvlineno,
          tip.ISPAID = :ipispaid,
          tip.MATERIALID = :ipmaterialid,
          tip.versionno = tip.versionno + 1,
          tip.TIPSITEID = :iptipsiteid,
          tip.COMMENTS = :ipcomments,
          tip.PAYREFERENCE = :ippayref,
          tip.GROSSWEIGHT2 = :ipgrossweight2,
          tip.camefrom = :ipcamefrom,
          tip.dumpedin = :ipdumpedin,
          tip.okayedtoinvoice = :ipokayedtoinvoice,
          tip.tareweight2 = :iptareweight2,
          tip.trailerrego = :iptrailerrego,
          tip.tipddno = :iptipddno,
          tip.myobjobno = :ipmyobjobno,
          tip.customerreference = :ipcustref,
          tip.binjobid = :ipbinjobid,
          tip.epaentrypurposeid = :ipepaentrypurposeid,
          tip.epasubwastestreamid = :ipepasubwastestreamid,
          tip.epavehicletypecode = :ipepavehicletypecode,
          tip.epawastestreamid = :ipepawastestreamid,
          tip.epawastetypeid = :ipepawastetypeid,
          TIP.epaapprovalnumber = :ipepaapprovalnumber,
          tip.flags = :ipflags,
          tip.fixedvalueexgst = :ipfixedvalueex,
          tip.fixedvaluegst = :ipfixedvaluegst,
          tip.surcharge = :ipsurcharge,
          tip.cashrounding = :ipcashrounding
         where tip.id = :iptipid;
      /* optheversionno = :lversionno + 1;  */
      opthestatus = 0;
    /* end */
  END

  execute procedure spsave_tarewt (
         :iprego,
         :iptareweight,
         :iptrailerrego);
  if (iptrailerrego != '')
  then execute procedure spsave_tarewt (
         :iptrailerrego,
         :iptareweight2,
         '');
         
  SUSPEND;
end^


ALTER PROCEDURE SPSAVE_TIPFEE (
    IPID INTEGER DEFAULT NULL,
    IPFEEID INTEGER DEFAULT NULL,
    IPTIPID INTEGER DEFAULT NULL,
    IPEXAMOUNT DECIMAL(18,2) DEFAULT NULL,
    IPINCEX SMALLINT DEFAULT NULL,
    IPINVNO INTEGER DEFAULT NULL,
    IPINVLINENO INTEGER DEFAULT NULL,
    IPINCAMOUNT DECIMAL(18,2) DEFAULT NULL)
RETURNS (
    OPTHEID INTEGER)
AS
BEGIN
  if (ipid = 0)
  then optheid = GEN_ID(TIPFEEID, 1);
  else optheid = ipid;
  Insert into TIPFEE
         (id, feeid, tipid,
          examount, incex,
          invno, invlineno,
          incamount)
          values
         (:optheid, :ipfeeid, :iptipid,
          :ipexamount, :ipincex,
          :ipinvno, :ipinvlineno,
          :ipincamount);
END^


ALTER PROCEDURE SPSAVE_TIPOUTGOING (
    IPTIPOUTGOINGID INTEGER,
    IPDDATE DATE,
    IPOUTMATERIALID INTEGER,
    IPGROSSWEIGHT DECIMAL(8,2),
    IPTAREWEIGHT DECIMAL(8,2),
    IPCUBICMETRES DECIMAL(5,2),
    IPTIMEOUT TIMESTAMP,
    IPDOCKETNO INTEGER,
    IPTIPSITEID INTEGER,
    IPREGO CHAR(20),
    IPTOTIPSITEID INTEGER,
    IPFLAGS INTEGER,
    IPMYOBJOBNO CHAR(50))
RETURNS (
    OPTIPOUTGOINGID INTEGER)
AS
begin
  if (iptipoutgoingid = 0) then begin
    optipoutgoingid = gen_id(gentipoutgoing, 1);
    insert into tipoutgoing
            (tipoutgoing.outgoingid,
             tipoutgoing.ddate,
             tipoutgoing.outmaterialid,
             tipoutgoing.tareweight,
             tipoutgoing.grossweight,
             tipoutgoing.cubicmetres,
             tipoutgoing.timeout,
             tipoutgoing.docketno,
             tipoutgoing.tipsiteid,
             tipoutgoing.rego,
             tipoutgoing.totipsiteid,
             tipoutgoing.flags,
             tipoutgoing.myobjobno)
         values
            (:optipoutgoingid,
             :ipddate,
             :ipoutmaterialid,
             :iptareweight,   
             :ipgrossweight,
             :ipcubicmetres,
             :iptimeout,
             :ipdocketno,
             :iptipsiteid,
             :iprego,
             :iptotipsiteid,
             :ipflags,
             :ipmyobjobno);
  end

  else begin
    optipoutgoingid = iptipoutgoingid;
    update tipoutgoing set
        tipoutgoing.ddate = :ipddate,
        tipoutgoing.outmaterialid = :ipoutmaterialid,
        tipoutgoing.tareweight = :iptareweight,
        tipoutgoing.grossweight = :ipgrossweight,
        tipoutgoing.cubicmetres = :ipcubicmetres,
        tipoutgoing.timeout = :iptimeout,
        tipoutgoing.docketno = :ipdocketno,
        tipoutgoing.tipsiteid = :iptipsiteid,
        tipoutgoing.rego = :iprego,
        tipoutgoing.totipsiteid = :iptotipsiteid,
        tipoutgoing.flags = :ipflags,
        tipoutgoing.myobjobno = :ipmyobjobno
        where tipoutgoing.outgoingid = :iptipoutgoingid;
  end
  suspend;
end^


ALTER PROCEDURE SPSAVE_TIPSITE (
    IPID INTEGER,
    IPDESCRIPTION CHAR(40),
    IPRULES CHAR(1000),
    IPDEFTOTIPSITEID INTEGER,
    IPFLAGS INTEGER,
    IPEPLNUMBER VARCHAR(40))
RETURNS (
    THEID INTEGER)
AS
begin
  if (ipid = 0) then
  begin
    theid = GEN_ID(GEN_tipsiteid, 1);
    insert into tipsite
         (tipsiteid, description, rules, tipsite.defdesttipsiteid,
          tipsite.flags, tipsite.eplnumber)
         values (:theid, :ipdescription, :iprules, :ipdeftotipsiteid,
                 :ipflags, :ipeplnumber);
  end
  else begin
      update tipsite set
                      description = :ipdescription,
                      rules = :iprules,
                      tipsite.defdesttipsiteid = :ipdeftotipsiteid,
                      tipsite.flags = :ipflags,
                      tipsite.eplnumber = :ipeplnumber
         where tipsite.tipsiteid = :ipid;
      theid = ipid;
  END
  
  execute procedure UPD_EVENT ('lastmaster');
end^


ALTER PROCEDURE SPSAVE_TRUCK (
    IPID INTEGER = null,
    IPDESCRIPTION CHAR(30) CHARACTER SET ASCII = null,
    IPVEHICLEID CHAR(12) CHARACTER SET ASCII = null)
RETURNS (
    THEID INTEGER)
AS
BEGIN
  /* Procedure body */
  if (ipid = 0) then
  begin
    theid = GEN_ID(GENTRUCKID, 1);
    insert into TRUCK
         (truckid, description, vehicleid)
         values (:theid, :ipdescription, :ipvehicleid);
  end
  else begin
      update TRUCK set
                      description = :ipdescription,
                      vehicleid = :ipvehicleid
         where TRUCK.TRUCKID = :ipid;
      theid = ipid;
  END
  
  execute procedure UPD_EVENT ('lastmaster');
END^


ALTER PROCEDURE SPSAVE_TRUCKANDDOG2 (
    IPTRUCKANDDOGID INTEGER,
    IPJOBDATE DATE,
    IPTRAVELFROM CHAR(50),
    IPTRAVELTO CHAR(50),
    IPDOCKETNO CHAR(20),
    IPCOMMENT CHAR(200),
    IPDRIVERID INTEGER,
    IPJOBSTATUS INTEGER,
    IPDOGTRUCKID INTEGER,
    IPORDERDAYSEQNO INTEGER)
RETURNS (
    OPTRUCKANDDOGID INTEGER)
AS
begin
  if (iptruckanddogid = 0) then begin
    optruckanddogid = gen_id(gentruckanddog, 1);
    insert into truckanddog
        (truckanddog.truckanddogid,
         truckanddog.jobdate,
         truckanddog.travelfrom,
         truckanddog.travelto,
         truckanddog.docketno,
         truckanddog.comment,
         truckanddog.driverid,
         truckanddog.jobstatus,
         truckanddog.dogtruckid,
         truckanddog.orderdayseqno)
       values
        (:optruckanddogid,
         :ipjobdate,
         :iptravelfrom,
         :iptravelto,
         :ipdocketno,
         :ipcomment,
         :ipdriverid,
         :ipjobstatus,
         :ipdogtruckid,
         :optruckanddogid);
   end
   else begin
     optruckanddogid = iptruckanddogid;
     update truckanddog set
          truckanddog.jobdate = :ipjobdate,
          truckanddog.travelfrom = :iptravelfrom,
          truckanddog.travelto = :iptravelto,
          truckanddog.comment = :ipcomment,
          truckanddog.driverid = :ipdriverid,
          truckanddog.jobstatus = :ipjobstatus,
          truckanddog.dogtruckid =  :ipdogtruckid,
          truckanddog.orderdayseqno = :iporderdayseqno
        where truckanddog.truckanddogid = :iptruckanddogid;
   end
end^


ALTER PROCEDURE SPSAVE_TRUCKDRIVER (
    IPDDATE DATE DEFAULT NULL,
    IPDRIVERID INTEGER DEFAULT NULL,
    IPTRUCKID INTEGER DEFAULT NULL)
AS
BEGIN
  update TRUCKDRIVER
         set TRUCKDRIVER.TRUCKID = :iptruckid
         where TRUCKDRIVER.ddate = :ipddate
           and TRUCKDRIVER.DRIVERID = :ipdriverid;
  if (row_count = 0)
  then insert into TRUCKDRIVER
       (ddate, driverid, truckid)
       values(:ipddate, :ipdriverid, :iptruckid);
END^


ALTER PROCEDURE SPSAVE_USER (
    IPUSERID INTEGER,
    IPUSERNAME CHAR(50),
    IPFULLNAME CHAR(50),
    IPISACTIVE SMALLINT,
    IPENCPASSWORD CHAR(60),
    IPDEPTID INTEGER,
    IPPERMISSIONS BIGINT,
    IPFONTFORDEL CHAR(50),
    IPFONTFORCO CHAR(50),
    IPFONTFORPU CHAR(50),
    IPFONTFORWL CHAR(50))
RETURNS (
    ERRORCODE INTEGER)
AS
declare variable lcount integer;
BEGIN
  if (ipuserid = 0) then begin
    select count(*) from BWUSER
           where bwuser.LCUSERNAME = lower(:ipusername)
           into :LCOUNT;
    if (lcount != 0)
    then errorcode = 1;
    else begin
      ipuserid = GEN_ID(GENUSERID, 1);
      insert into BWUSER
             (userid, username, fullname, isactive, lcusername, encpassword,
              deptid, permissions,
              bwuser.fontfordel,
              bwuser.fontforco,
              bwuser.fontforpu,
              bwuser.fontforwl)
             values (:ipuserid, :ipusername, :ipfullname,
                     :ipisactive, lower(:ipusername), :ipencpassword,
                     :ipdeptid, :ippermissions,
                     :ipfontfordel,
                     :ipfontforco,
                     :ipfontforpu,
                     :ipfontforwl);
    end
  END
  else begin
    select count(*) from BWUSER
           where bwuser.LCUSERNAME = lower(:ipusername)
             and bwuser.userid != :ipuserid
           into :LCOUNT;
    if (LCOUNT > 0)
    then errorcode = 2;
    else begin
      /* if a password of "X" was passed in then this means we want to keep
       * the old one
       */
      if (ipencpassword = 'X')
      then update BWUSER
         set username = :ipusername,
             fullname = :ipfullname,
             isactive = :ipisactive,
             lcusername = lower(:ipusername),
             deptid = :ipdeptid,
             permissions = :ippermissions,
              bwuser.fontfordel = :ipfontfordel,
              bwuser.fontforco = :ipfontforco,
              bwuser.fontforpu = :ipfontforpu,
              bwuser.fontforwl = :ipfontforwl
         where bwuser.userid = :ipuserid;
      else update BWUSER
         set username = :ipusername,
             fullname = :ipfullname,
             isactive = :ipisactive,
             encpassword = :ipencpassword,
             lcusername = lower(:ipusername),
             deptid = :ipdeptid,
             permissions = :ippermissions,
              bwuser.fontfordel = :ipfontfordel,
              bwuser.fontforco = :ipfontforco,
              bwuser.fontforpu = :ipfontforpu,
              bwuser.fontforwl = :ipfontforwl
         where bwuser.userid = :ipuserid;
      errorcode = 0;
    end
  end
  SUSPEND;
END^


ALTER PROCEDURE SPSAVE_WSSESSION (
    IPSESSIONID INTEGER,
    IPDRIVERID INTEGER,
    IPLOGINTIME TIMESTAMP,
    IPLASTACCESS TIMESTAMP)
AS
begin
  insert into wssession
       (wssession.sessionid, wssession.driverid, wssession.logintime, wssession.lastaccess)
       values (:ipsessionid, :ipdriverid, :iplogintime, :iplastaccess);
end^


ALTER PROCEDURE SPSAVE_WSTEXT (
    IPWSTEXTID INTEGER,
    IPTHETEXT CHAR(10000))
AS
begin
  update wstext set wstext.thetext = :ipthetext
       where wstext.wstextid = :ipwstextid;
  if (row_count = 0)
  then insert into wstext (wstext.wstextid, wstext.thetext)
      values (:ipwstextid, :ipthetext);
end^


ALTER PROCEDURE SPSAVE_XVERSIONNO (
    IPVERSIONNO INTEGER)
AS
begin
  update xversion
      set xversion.versionno = :ipversionno;
  if (row_count = 0)
  then insert into xversion
               (xversion.versionno)
        values (:ipversionno);
end^


ALTER PROCEDURE SPSET_EVENT (
    IPEVENT CHAR(12) DEFAULT NULL)
AS
BEGIN
  /* mostly for 'lastjob' */
  execute procedure UPD_EVENT (:ipevent);
END^


ALTER PROCEDURE SPSET_JOBBINS (
    IPJOBID INTEGER DEFAULT NULL)
AS
DECLARE VARIABLE OUTBINS CHAR(60);
DECLARE VARIABLE INBINS CHAR(60);
DECLARE VARIABLE LBINNO CHAR(60);
BEGIN
  /* resets the job bin numbers field ? */
  OUTBINS = '';
  for select trim(JOBBINS.CBINNO)
      from JOBBINS
      where JOBBINS.jobid = :ipjobid
        and JOBBINS.DIRECTION = 0
      into :LBINNO
  do begin
    if (OUTBINS != '')
    then OUTBINS = trim(OUTBINS) || ',';
    OUTBINS = trim(OUTBINS) || trim(LBINNO);
  END

  INBINS = '';
  for select trim(JOBBINS.CBINNO)
      from JOBBINS
      where JOBBINS.jobid = :ipjobid
        and JOBBINS.DIRECTION = 1
      into :LBINNO
  do begin
    if (INBINS != '')
    then INBINS = trim(INBINS) || ',';
    INBINS = trim(INBINS) || trim(LBINNO);
  END

  update JOB
       set job.DOBINNOS = :OUTBINS,
           job.PUBINNOS = :INBINS
       where job.jobid = :ipjobid;

END^


ALTER PROCEDURE TESTSPEED
RETURNS (
    LCOUNT INTEGER)
AS
BEGIN
  select  /* count(sorder.orderid) */
/* sorder.orderid ,
     sorder.custid */
  count(*)
   from SORDER
   left outer join customer on sorder.custid = customer.CUSTID
   left outer join address on sorder.deladdrid = address.addrid
   left outer join job on sorder.ORDERID = job.ORDERID
        and job.jobstatus != 3
   where sorder.COMPLETE = 0
   into :LCOUNT;
  SUSPEND;
END^


ALTER PROCEDURE UPD_EVENT (
    IPEVENT CHAR(20) DEFAULT NULL)
AS
BEGIN
  update EVENTTIMES
     set eventtimes.EVENTTIME = current_timestamp
     where EVENTTIMES.EVENTNAME = :ipevent;
  if (row_count = 0) then
     insert into EVENTTIMES (EVENTNAME, EVENTTIME)
      values (:ipevent, current_timestamp);
END^



SET TERM ; ^


/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/

DESCRIBE PROCEDURE SPGET_CHANGEDETAILS
'Get all the change history for an object';

DESCRIBE PROCEDURE SPSAVE_JOBPAYDETAILS
'Saves the job.paydetails record against a job (the corresponding job will be updated in another call)';

